{"version":3,"names":["FEATURE_OVERRIDE_ENABLED","FEATURE_PORSCHE_75_YEARS_LOGO","FEATURE_SHOP","FEATURE_PCOM_SEARCH","FEATURE_SAVED_ITEMS","FEATURE_AB_TESTING","FEATURE_DEALER_SEARCH_CHINA","FEATURE_DEALER_SEARCH_OPENING_HOURS","LOGGING_ENDPOINT","Logger","this","env","version","VERSION","breakpoint","locale","prototype","init","log","logName","level","id","message","errorType","Environments","TEST","JSON","stringify","name","hostname","windowService","location","pathname","PRODUCTION","fetch","method","body","mode","console","err","info","error","NaviError","type","NaviErrorTypes","GENERAL","logger","FeatureToggles","featureEnvMap","getEnvironment","DEFAULT_ENVIRONMENT","featureJson","_this","features","isShopToggleActive","isFeatureEnabled","search","isPcomSearchToggleActive","isSavedItemsToggleActive","isABTestingToggleActive","isDealerSearchChinaEnabled","isDealerSearchOpeningHoursEnabled","loadRemoteToggles","BFFEndpoint","getConfig","BFF_ENDPOINT","concat","response","_c","sent","ok","text","Error","json","result","err_1","stringToBooleanStrict","value","getUrlFeatureToggleOverride","feature","searchString","queryValue","_b","_a","split","find","query","includes","isString","getLocalStorageFeatureToggleOverride","localStorageValue","localStorage","getItem","undefined","isOnSecurityLayer","enabled","featureToggleOverrides","_i","featureToggleOverrides_1","length","featureToggleOverride","setFeatures","error_1","prodDisabledToggles","featureToggles"],"sources":["src/utility/constants/feature-toggles.ts","src/services/logger.ts","src/services/feature-toggles.ts"],"sourcesContent":["export const FEATURE_OVERRIDE_ENABLED = 'featureOverrideEnabled';\nexport const FEATURE_PORSCHE_75_YEARS_LOGO = 'porsche_75_years_logo';\nexport const FEATURE_SHOP = 'shop';\nexport const FEATURE_PCOM_SEARCH = 'pcom_search';\nexport const FEATURE_SAVED_ITEMS = 'saved_items';\nexport const FEATURE_AB_TESTING = 'ab';\n\nexport const FEATURE_DEALER_SEARCH_CHINA = 'dealer_search_china';\nexport const FEATURE_DEALER_SEARCH_OPENING_HOURS = 'opening_hours';\n","import { Environments, Environment } from '../entities/environment';\nimport { VERSION } from '../utility/constants';\nimport { NaviError, NaviErrorType, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\n\nexport const LOGGING_ENDPOINT = 'https://logs.nav.porsche.com';\n\nconst enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  ERROR = 'error'\n}\n\nclass Logger {\n  private env: Environment | null = null;\n  private version = VERSION;\n  private breakpoint = 0;\n  private locale: string | null = null;\n\n  init(env: Environment, breakpoint: number, locale: string) {\n    this.env = env;\n    this.breakpoint = breakpoint;\n    this.locale = locale;\n  }\n\n  private log(logName: string, level: LogLevel, id: string, message: string, errorType?: NaviErrorType) {\n    if (this.env === Environments.TEST) {\n      return;\n    }\n\n    try {\n      const log = JSON.stringify({\n        name: logName,\n        level: level,\n        env: this.env,\n        breakpoint: this.breakpoint,\n        locale: this.locale,\n        version: this.version,\n        hostname: windowService.location.hostname,\n        pathname: windowService.location.pathname,\n        id,\n        errorType: errorType || '',\n        message\n      });\n\n      if (this.env === Environments.PRODUCTION) {\n        if (level !== LogLevel.DEBUG) {\n          fetch(LOGGING_ENDPOINT, {\n            method: 'POST',\n            body: log,\n            mode: 'no-cors'\n          });\n        }\n      } else {\n        // eslint-disable-next-line no-console\n        console[level](log);\n      }\n    } catch (err) {\n      // throw the error away\n    }\n  }\n\n  info(id: string, message = '') {\n    this.log('PHN_HEADER_LOG_ENTRY', LogLevel.INFO, id, message);\n  }\n\n  error(id: string, err: Error) {\n    const errorType = err instanceof NaviError ? err.type : NaviErrorTypes.GENERAL;\n    this.log('PHN_HEADER_LOG_ENTRY', LogLevel.ERROR, id, err.message, errorType);\n  }\n}\n\nexport default new Logger();\n","import { Environment, Environments, getEnvironment } from '../entities/environment';\nimport featureJson from '../feature-toggles.json';\nimport {\n  DEFAULT_ENVIRONMENT,\n  FEATURE_AB_TESTING,\n  FEATURE_DEALER_SEARCH_CHINA,\n  FEATURE_DEALER_SEARCH_OPENING_HOURS,\n  FEATURE_OVERRIDE_ENABLED,\n  FEATURE_PCOM_SEARCH,\n  FEATURE_SAVED_ITEMS,\n  FEATURE_SHOP\n} from '../utility/constants';\nimport { getConfig, isString } from '../utility/helper';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport logger from './logger';\nimport windowService from './window-service';\n\ntype FeatureMap = { [featureName: string]: { enabled: boolean } };\n\nexport class FeatureToggles {\n  features: FeatureMap = {};\n  env: Environment = 'local';\n\n  constructor(\n    env = getEnvironment(DEFAULT_ENVIRONMENT),\n    private readonly featureEnvMap: { [env: string]: FeatureMap } = featureJson\n  ) {\n    this.env = env;\n    this.features = this.featureEnvMap[env];\n  }\n\n  private async loadRemoteToggles(): Promise<void> {\n    try {\n      const BFFEndpoint = getConfig(this.env).BFF_ENDPOINT;\n\n      const response = await fetch(`${BFFEndpoint}/toggles?env=${this.env}`);\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(text);\n      }\n\n      const result = await response.json();\n\n      this.features = result;\n    } catch (err) {\n      throw new NaviError(`Load Feature Toggles failed with error: ${err}`, NaviErrorTypes.GENERAL);\n    }\n  }\n\n  private stringToBooleanStrict(value: string): boolean | null {\n    if (value === 'true') {\n      return true;\n    }\n    if (value === 'false') {\n      return false;\n    }\n    return null;\n  }\n\n  private getUrlFeatureToggleOverride(feature: string, searchString: string): boolean | null {\n    const queryValue = searchString\n      .split('?')[1]\n      ?.split('&')\n      .find((query) => query.includes(feature))\n      ?.split('=')[1];\n\n    return isString(queryValue) ? this.stringToBooleanStrict(queryValue || '') : null;\n  }\n\n  private getLocalStorageFeatureToggleOverride(feature: string): boolean | null {\n    const localStorageValue = localStorage.getItem(`phn.${feature}`);\n\n    return isString(localStorageValue) ? this.stringToBooleanStrict(localStorageValue) : null;\n  }\n\n  isFeatureEnabled(feature: string, searchString: string): boolean {\n    if (this.features === undefined) {\n      return false;\n    }\n\n    if (this.env === Environments.PRODUCTION && this.isOnSecurityLayer(feature)) {\n      return false;\n    }\n\n    if (this.features[FEATURE_OVERRIDE_ENABLED]?.enabled) {\n      const featureToggleOverrides = [\n        this.getUrlFeatureToggleOverride(feature, searchString),\n        this.getLocalStorageFeatureToggleOverride(feature)\n      ];\n\n      for (const featureToggleOverride of featureToggleOverrides) {\n        if (featureToggleOverride !== null) {\n          return featureToggleOverride;\n        }\n      }\n    }\n\n    if (this.features[feature] !== undefined) {\n      return this.features[feature].enabled;\n    } else {\n      return false;\n    }\n  }\n\n  async setFeatures(env: Environment): Promise<void> {\n    this.env = env;\n    try {\n      if (env === 'test') {\n        this.features = this.featureEnvMap[env];\n        return;\n      }\n      await this.loadRemoteToggles();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      logger.error('INIT_APP_CONFIG', error);\n      this.features = this.featureEnvMap[env];\n    }\n  }\n\n  isOnSecurityLayer(feature: string): boolean {\n    const prodDisabledToggles = ['opening_hours'];\n    return prodDisabledToggles.includes(feature);\n  }\n\n  isShopToggleActive = (): boolean => this.isFeatureEnabled(FEATURE_SHOP, windowService.location.search);\n  isPcomSearchToggleActive = (): boolean => this.isFeatureEnabled(FEATURE_PCOM_SEARCH, windowService.location.search);\n  isSavedItemsToggleActive = (): boolean => this.isFeatureEnabled(FEATURE_SAVED_ITEMS, windowService.location.search);\n  isABTestingToggleActive = (): boolean => this.isFeatureEnabled(FEATURE_AB_TESTING, windowService.location.search);\n  isDealerSearchChinaEnabled = (): boolean =>\n    this.isFeatureEnabled(FEATURE_DEALER_SEARCH_CHINA, windowService.location.search);\n  isDealerSearchOpeningHoursEnabled = (): boolean =>\n    this.isFeatureEnabled(FEATURE_DEALER_SEARCH_OPENING_HOURS, windowService.location.search);\n}\n\nexport default new FeatureToggles();\n"],"mappings":"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"}