{"version":3,"names":["autocompleteSearchFieldCss","AutocompleteSearchField","this","initialValue","prototype","clickListener","e","showPredictions","composedPath","el","querySelector","predictions","length","keydownListener","key","preventDefault","stopPropagation","watchShowPredictions","newValue","predictionsToggle","emit","watchInitialValue","searchterm","componentDidRender","autoCompleteLoaded","onKeyDown","pressedKey","highlightedPredictionIndex","text","onSubmit","prediction","submitSearch","undefined","render","_this","h","class","event","state","isString","errorMessage","message","type","placeholder","autocomplete","role","toString","String","value","onInput","_a","getHTMLInputElement","target","dealerSearchResultsStore","savedDealerCookie","clearSearch","searchInput","id","map","index","onClick","color","src","getAssetPath","concat","getConfig","navStateStore","env","ASSETS_URL","alt","dealerDetailsDrawerCss","DealerDetailsDrawer","class_1","componentWillLoad","waitForComponentsToLoad","componentDidLoad","dealer","getDealer","globalDataLayerService","pushDataLayerEvent","EventActions","DEALER_DETAILS_SCREEN_LOAD","componentDisplay","displayElementId","analyticsManager","getDealerResultsLoadDisplayElementId","DEALER_SEARCH_DISPLAY_ELEMENT_ID","displayElementType","getDealerResultsLoadDisplayElementType","displayElementName","name","componentSearch","searchTerm","partner","companyName","companyId","porschePartnerNo","componentsOnReady","Timeout","_e","sent","showSkeleton","ppnDealers","dealerId","ppnDealer","renderHeading","Fragment","style","display","tag","size","language","splitLocale","locale","navContentStore","details","testDrive","finder","bookService","isAddressLocalized","Object","values","addressLocalized","every","x","address","nameLocalized","hasAddress","street","postalCode","city","hasPhoneNumber","contactDetails","phoneNumber","hasEmail","emailAddress","hasHomepage","homepage","hasTestdrive","link","hasName","openingHours","getOpeningHours","contactOpeningHours","hasOpeningHours","country","err","dealerAddress","customDatalayerProperties","Host","isDesktop","breakpoint","DealerDetailCard","elementId","getDealerDetailsRoutingKey","analyticsId","iconLeft","encodeURIComponent","datalayerEventAction","DEALER_CONTACT_CLICK","variant","MenuItemVariant","DealerDetails","featureToggles","isDealerSearchOpeningHoursEnabled","replace","sanitizeDealerHomepage","addQueryParamsToUrl","dealership","ppnOrgId","props","assign","tabIndex","ErrorMessage","onDismiss","description","dealerSearchByNumberOfDealersCss","DealerSearchByNumberOfDealers","class_2","then","numberOfDealers","fetchAllDealersForMarket","emitPageLoadEvent","removeSkeletonOnDealerSearchForm","errorContent","error","isLoading","getAllPPNDealersForMarket","DEALER_API_URL_ALL_DEALERS","ppnDealerSearchResults","results","reduce","dealers","dealerSearchResult","logger","err_1","formErrorMessage","getErrorMessage","emitResultsLoadEvent","DEALER_SEARCH_SCREEN_LOAD","calculateDisplayElementId","calculateDisplayElementType","ElementTypes","dealerSearchForm","DEALER_MARKET_SEARCH_TERM","numberOfResults","DEALER_RESULTS_SCREEN_LOAD","DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER","reset","aria","dealerSearchFormDropdownCss","DealerSearchFormDropdown","regions","class_3","getDealersByRegion","loadedAutoCompleteListener","_event","getPPNDealersByRegion","dealersOfRegion","_f","Logger","err_2","dealerSearchFormEvent","onCitySelect","selectedCity","cities","find","cityName","cityNameLocalized","includes","keys","selectedProvince","onProvinceSelect","getCitiesByGivenRegionName","province","selectedRegion","regionName","regionNameLocalized","GEOLOCATION_BUTTON_SEARCH_TERM","dealerContent","clearSearchEvent","searchText","weight","ellipsis","cursor","filter","label","search","dropdown","required","onChange","hidden","selected","selectAProvince","region","disabled","selectACity","MapsService","autocompleteService","placesService","geocoderService","getLocation","init","apiKey","windowService","fetchGoogleMapsApi","google_1","maps","places","AutocompleteService","PlacesService","Map","createDiv","Geocoder","latLong","LatLng","latitude","longitude","NaviError","err_3","NaviErrorTypes","GENERAL","getPredictions","input","Promise","resolve","reject","getPlacePredictions","componentRestrictions","getRegionSpecificCountry","status","getErrorType","place_id","getPlaceCoordinates","placeId","getDetails","response","_b","geometry","location","lat","_d","_c","lng","NO_RESULTS","getFormattedAddressFromCoordinates","geocode","formatted_address","INVALID_INPUT","RETRY","mapsService","dealerSearchFormGeolocationCss","DealerSearchFormGeolocation","debounceTimeout","class_4","disconnectedCallback","cancel","catch","componentSearchSearchTerm","fetchDealers","getSearchTerms","placeCoordinates","getPPNDealers","DEALER_API_URL","showGeolocationButton","err_4","animateResults","noInput","__awaiter","DEALER_SEARCH_CLICK","componentClick","clickElementId","clickElementName","clickElementType","ClickElementTypes","Button","targetElement","DEALER_SEARCH_TARGET_ELEMENT","RoutingKeys","DEALER_SEARCH","getCurrentLocation","getNavigatorLatLong","formattedAddress","DEALER_GEOLOCATION_CLICK","geolocation","onDealerSearchEntry","err_5","form","inputPlaceholder","onSearchInput","set","detail","onClearSearch","onSubmitSearch","getString","onAnimationEnd","or","icon","DealerSearchFormItemCard","showOverlay","eventEmitter","distance","onDealerCardClick","dealerDetailsRoutingKey","DEALER_RESULT_CLICK","Math","round","unit","toLowerCase","DealerSearchMapLink","emitDealersMapEvent","DEALER_MAP_CLICK","Link","targetUrl","href","dealerSearchResultsCss","DealerSearchResults","noResults","coordinates","mobileMenuItemClick","menuItemCardCss","MenuItemCard","NAVIGATION_CLICK","handleKeyDown","anchorElement","getHTMLElement","click","sendDataLayerEvent","renderTitle","className","renderSubtitle","subtext","body","myporscheLoginCss","MyPorscheLogin","NAVIGATION_LINK_CLICK","MY_PORSCHE","myPorscheDrawer","loginEvent","login","more","signup","signupText"],"sources":["src/components/autocomplete-search-field/autocomplete-search-field.scss?tag=phn-autocomplete-search-field&encapsulation=scoped","src/components/autocomplete-search-field/autocomplete-search-field.tsx","src/components/dealer-details-drawer/dealer-details-drawer.scss?tag=phn-dealer-details-drawer&encapsulation=scoped","src/components/dealer-details-drawer/dealer-details-drawer.tsx","src/components/dealer-search-form/error-message.tsx","src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.scss?tag=phn-dealer-search-by-number-of-dealers&encapsulation=scoped","src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.tsx","src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.scss?tag=phn-dealer-search-form-dropdown&encapsulation=scoped","src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.tsx","src/services/maps-service.ts","src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.scss?tag=phn-dealer-search-form-geolocation&encapsulation=scoped","src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.tsx","src/components/dealer-search-results/dealer-search-form-item-card.tsx","src/components/dealer-search-results/dealer-search-map-link.tsx","src/components/dealer-search-results/dealer-search-results.scss?tag=phn-dealer-search-results&encapsulation=scoped","src/components/dealer-search-results/dealer-search-results.tsx","src/components/menu-item-card/menu-item-card.scss?tag=phn-menu-item-card&encapsulation=scoped","src/components/menu-item-card/menu-item-card.tsx","src/components/myporsche-login/myporsche-login.scss?tag=phn-myporsche-login&encapsulation=scoped","src/components/myporsche-login/myporsche-login.tsx"],"sourcesContent":["@import '../../scss';\n\n:host {\n  display: block;\n\n  .form-container {\n    display: block;\n    position: relative;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    box-sizing: border-box;\n\n    phn-p-text-field-wrapper {\n      width: 100%;\n\n      input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }\n      input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }\n      input[type=\"search\"]::-webkit-search-decoration,\n      input[type=\"search\"]::-webkit-search-cancel-button,\n      input[type=\"search\"]::-webkit-search-results-button,\n      input[type=\"search\"]::-webkit-search-results-decoration { display: none; }\n    }\n\n    &.inline-search-form {\n      margin-right: p-px-to-rem(16px);\n    }\n  }\n\n  .prediction-container {\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 10;\n    width: 100%;\n\n    background-color: white;\n    border: 1px solid $pds-theme-light-contrast-low;\n\n    ul {\n      margin-block: 0;\n      margin-inline: 0;\n      padding-inline: 0;\n      list-style-type: none;\n\n      li {\n        padding-left: p-px-to-rem(12px);\n        padding: p-px-to-rem(8px) 0 p-px-to-rem(8px) p-px-to-rem(12px);\n        color: $pds-theme-light-primary;\n\n        &:hover {\n          color: $pds-theme-light-notification-info;\n          background-color: $pds-theme-light-background-surface;\n        }\n\n        &.highlighted-prediction {\n          color: $pds-theme-light-notification-info;\n        }\n      }\n    }\n\n    .powered-by-google {\n      margin: p-px-to-rem(12px) 0 p-px-to-rem(12px) p-px-to-rem(12px);\n    }\n  }\n}\n","import { Component, EventEmitter, h, Prop, State, Event, getAssetPath, Element, Listen, Watch } from '@stencil/core';\nimport { Prediction } from '../../entities/places';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getConfig, getHTMLInputElement, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\n\n@Component({\n  tag: 'phn-autocomplete-search-field',\n  styleUrl: 'autocomplete-search-field.scss',\n  scoped: true\n})\nexport class AutocompleteSearchField {\n  @Prop() placeholder!: string;\n  @Prop() predictions!: Prediction[];\n  @Prop() initialValue = '';\n  @Prop() errorState = '';\n  @Prop() errorMessage = '';\n\n  @State() showPredictions = false;\n  @State() highlightedPredictionIndex = -1;\n  @State() searchterm = this.initialValue;\n\n  @Event() searchInput!: EventEmitter<string>;\n  @Event() clearSearch!: EventEmitter<void>;\n  @Event() submitSearch!: EventEmitter<Prediction | null>;\n  @Event() predictionsToggle!: EventEmitter<boolean>;\n  @Event() autoCompleteLoaded!: EventEmitter<boolean>;\n\n  @Element() el!: HTMLPhnAutocompleteSearchFieldElement;\n\n  @Listen('click', { passive: true, target: 'window' })\n  clickListener(e: MouseEvent): void {\n    this.showPredictions =\n      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;\n  }\n\n  @Listen('keydown', { passive: false })\n  keydownListener(e: KeyboardEvent): void {\n    if (e.key === 'Escape' && this.showPredictions) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.showPredictions = false;\n    }\n  }\n\n  @Watch('showPredictions')\n  watchShowPredictions(newValue: boolean): void {\n    this.predictionsToggle.emit(newValue);\n  }\n\n  @Watch('initialValue')\n  watchInitialValue(): void {\n    this.searchterm = this.initialValue;\n  }\n\n  componentDidRender(): void {\n    this.autoCompleteLoaded.emit(true);\n  }\n\n  private onKeyDown(pressedKey: string): void {\n    if (this.predictions.length === 0) return;\n\n    switch (pressedKey) {\n      case 'ArrowDown':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex === this.predictions.length - 1) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        }\n        this.highlightedPredictionIndex++;\n        break;\n\n      case 'ArrowUp':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex < 0) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        } else if (this.highlightedPredictionIndex === 0) {\n          this.highlightedPredictionIndex = this.predictions.length - 1;\n          break;\n        }\n        this.highlightedPredictionIndex--;\n        break;\n    }\n\n    if (this.highlightedPredictionIndex > -1) {\n      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;\n    }\n  }\n\n  private onSubmit() {\n    const prediction =\n      this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];\n    this.submitSearch.emit(prediction ?? null);\n    this.showPredictions = false;\n    if (prediction !== undefined) this.searchterm = prediction.text;\n  }\n\n  render(): HTMLPhnAutocompleteSearchFieldElement {\n    return (\n      <form\n        class=\"form-container\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n      >\n        <phn-p-text-field-wrapper\n          data-test-id=\"dealer-search-form-input\"\n          state={isString(this.errorMessage) ? 'error' : 'none'}\n          message={this.errorMessage}\n        >\n          <input\n            class=\"autofocus\"\n            aria-label=\"Find a dealer by typing a city name or zip code\"\n            type=\"search\"\n            placeholder={this.placeholder}\n            autocomplete=\"off\"\n            role=\"combobox\"\n            data-validate=\"required\"\n            aria-expanded={(this.predictions.length > 0 && this.showPredictions).toString()}\n            aria-controls=\"predictions\"\n            aria-autocomplete=\"list\"\n            aria-activedescendant={this.showPredictions ? String(this.highlightedPredictionIndex) : undefined}\n            value={this.searchterm}\n            onInput={(event: Event) => {\n              event.preventDefault();\n\n              this.showPredictions = true;\n              this.highlightedPredictionIndex = -1;\n\n              const value = getHTMLInputElement(event.target)?.value;\n\n              if (!isString(value)) {\n                this.searchterm = '';\n                this.showPredictions = false;\n                dealerSearchResultsStore.state.savedDealerCookie = null;\n                this.clearSearch.emit();\n                return;\n              }\n\n              this.searchInput.emit(value);\n            }}\n            onKeyDown={(event: KeyboardEvent) => {\n              this.onKeyDown(event.key);\n            }}\n          />\n        </phn-p-text-field-wrapper>\n\n        {this.predictions.length > 0 && this.showPredictions ? (\n          <div class=\"prediction-container\">\n            <ul\n              id=\"predictions\"\n              data-test-id=\"dealer-search-autocomplete-predictions\"\n              role=\"listbox\"\n              aria-label=\"List of location predictions\"\n            >\n              {this.predictions.map((prediction, index) => (\n                <li\n                  key={prediction.id}\n                  class={index === this.highlightedPredictionIndex ? 'highlighted-prediction' : ''}\n                  role=\"option\"\n                  aria-selected={String(index === this.highlightedPredictionIndex)}\n                  id={String(index)}\n                  onClick={() => {\n                    this.highlightedPredictionIndex = index;\n                    this.onSubmit();\n                  }}\n                  onKeyDown={(event: KeyboardEvent) => {\n                    // TODO: does this code ever get executed?\n                    if (event.key === 'Enter') {\n                      this.onSubmit();\n                    }\n                  }}\n                >\n                  <phn-p-text color=\"inherit\">{prediction.text}</phn-p-text>\n                </li>\n              ))}\n            </ul>\n            <img\n              class=\"powered-by-google\"\n              src={getAssetPath(\n                `${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`\n              )}\n              alt=\"powered by Google\"\n            />\n          </div>\n        ) : null}\n      </form>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  margin-top: p-px-to-rem(26px);\n\n  @include pds-media-query-min('s') {\n    margin-top: p-px-to-rem(-2px);\n  }\n\n  @include pds-media-query-min('l') {\n    margin-top: p-px-to-rem(-3px);\n  }\n\n  @include pds-media-query-min('xxl') {\n    margin-top: p-px-to-rem(-7px);\n  }\n\n  .skeleton-headline {\n    width: auto;\n    height: p-px-to-rem(50px);\n    background: $pds-theme-light-contrast-low;\n    margin-bottom:  p-px-to-rem(28px);\n    border-radius: 4px;\n  }\n\n  phn-p-heading{\n    margin-bottom: p-px-to-rem(24px);\n  }\n\n  phn-menu-item {\n    margin-top: p-px-to-rem(24px);\n\n    &:first-of-type {\n      margin-top: p-px-to-rem(14px);\n    }\n  }\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    &.skeleton-menu-item {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { getDealerDetailsRoutingKey } from '../../entities/routing-key';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { DEALER_SEARCH_DISPLAY_ELEMENT_ID, EventAction, EventActions, MenuItemVariant } from '../../utility/constants';\nimport { addQueryParamsToUrl, isDesktop, isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { PPNDealer } from '../../entities/dealer-response';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getOpeningHours, sanitizeDealerHomepage } from '../../utility/helpers/dealer-search-helper';\nimport featureToggles from '../../services/feature-toggles';\n\n@Component({\n  tag: 'phn-dealer-details-drawer',\n  styleUrl: 'dealer-details-drawer.scss',\n  scoped: true\n})\nexport class DealerDetailsDrawer {\n  @Prop() dealerId!: string;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  @State() errorMessage = '';\n  @State() showSkeleton = true;\n\n  @Element() el!: HTMLPhnDealerDetailsDrawerElement;\n\n  @Event() clickDrawerHeaderBack!: EventEmitter<void>;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  componentDidLoad(): void {\n    const dealer = this.getDealer();\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer?.name\n      },\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: dealer?.name,\n        companyId: dealer?.porschePartnerNo\n      }\n    });\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = false;\n  }\n\n  private getDealer(): PPNDealer {\n    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};\n\n    return dealer;\n  }\n\n  private renderHeading(name: string): HTMLElement | null {\n    return (\n      <Fragment>\n        {this.showSkeleton ? <div class=\"skeleton-headline\" /> : null}\n        <phn-p-heading\n          style={{ display: this.showSkeleton ? 'none' : '' }}\n          tag=\"h3\"\n          size=\"large\"\n          data-test-id=\"dealer-headline\"\n        >\n          {name}\n        </phn-p-heading>\n      </Fragment>\n    );\n  }\n\n  render(): HTMLPhnDealerDetailsDrawerElement {\n    const ppnDealer = this.getDealer();\n\n    if (ppnDealer === undefined) {\n      return <div>{this.errorMessage}</div>;\n    }\n    const language = splitLocale(this.locale).language;\n    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;\n\n    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n    const address =\n      language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n    const name =\n      language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n    // postalCode is currently not available in addressLocalized\n    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);\n    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);\n    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);\n    const hasHomepage = isString(ppnDealer.contactDetails.homepage);\n    const hasTestdrive = testDrive && isString(testDrive?.text) && isString(testDrive?.link);\n    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);\n    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);\n    const hasOpeningHours = openingHours !== '';\n\n    let country = '';\n    try {\n      country = splitLocale(this.locale).country;\n    } catch (err) {\n      // throw the error away\n    }\n    const dealerAddress =\n      country === 'JP'\n        ? `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`\n        : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;\n    const customDatalayerProperties = {\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    };\n\n    return (\n      <Host>\n        {hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null}\n        {hasAddress ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'address')}\n            analyticsId=\"mainmenu.finddealer.map\"\n            text={dealerAddress}\n            iconLeft=\"pin\"\n            data-test-id=\"dealer-address\"\n            link={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\n              `${address.street},${ppnDealer.address.postalCode},${address.city}`\n            )}`}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'openingHours')}\n            analyticsId=\"mainmenu.finddealer.openinghours\"\n            text={openingHours}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-opening-hours\"\n            iconLeft=\"clock\"\n          />\n        ) : null}\n\n        {hasPhoneNumber ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'number')}\n            analyticsId=\"mainmenu.finddealer.phone\"\n            text={ppnDealer.contactDetails.phoneNumber}\n            iconLeft=\"phone\"\n            data-test-id=\"dealer-phonenumber\"\n            link={`tel:${ppnDealer.contactDetails.phoneNumber}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasEmail ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'email')}\n            analyticsId=\"mainmenu.finddealer.email\"\n            text={ppnDealer.contactDetails.emailAddress}\n            iconLeft=\"email\"\n            data-test-id=\"dealer-email\"\n            link={`mailto:${ppnDealer.contactDetails.emailAddress}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasHomepage ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'homepage')}\n            analyticsId=\"mainmenu.finddealer.website\"\n            text={ppnDealer.contactDetails.homepage.replace('https://', '')}\n            iconLeft=\"globe\"\n            data-test-id=\"dealer-homepage\"\n            link={sanitizeDealerHomepage(ppnDealer.contactDetails.homepage)}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {finder && isString(country) ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, finder.id)}\n            analyticsId={finder.id}\n            text={finder.text}\n            data-test-id=\"dealer-finder-cars\"\n            link={addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId })}\n            iconLeft=\"car\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {bookService ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, bookService.text)}\n            analyticsId={bookService.id}\n            text={bookService.text}\n            link={addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo })}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-service\"\n            iconLeft={'wrench'}\n          />\n        ) : null}\n\n        {hasTestdrive ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, testDrive.text)}\n            analyticsId={testDrive.id}\n            text={testDrive.text}\n            link={testDrive.link}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-testdrive\"\n            iconLeft={'steering-wheel'}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n\ntype DealerDetailCardType = {\n  showSkeleton: boolean;\n  elementId?: string;\n  'data-test-id': string;\n  analyticsId: string;\n  text: string;\n  link?: string;\n  customDatalayerProperties: TDataLayer;\n  datalayerEventAction: EventAction;\n  variant: string;\n  iconLeft: string;\n  target?: string;\n  ariaLabel?: string;\n};\n\nfunction DealerDetailCard(props: DealerDetailCardType): HTMLElement {\n  return <phn-menu-item-card tabIndex={0} class={`${props.showSkeleton ? 'skeleton' : ''}`} {...props} />;\n}\n","import { h } from '@stencil/core';\n\nexport default function ErrorMessage({\n  errorMessage,\n  onDismiss\n}: {\n  errorMessage: string;\n  onDismiss: () => void;\n}): HTMLElement {\n  return (\n    <div class=\"error-message animated\">\n      <phn-p-inline-notification state=\"error\" description={errorMessage} onDismiss={onDismiss} />\n    </div>\n  );\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getAllPPNDealersForMarket } from '../../services/dealer-service';\nimport { getConfig, isString } from '../../utility/helper';\nimport logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport {\n  DEALER_MARKET_SEARCH_TERM,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\n\n@Component({\n  tag: 'phn-dealer-search-by-number-of-dealers',\n  styleUrl: 'dealer-search-by-number-of-dealers.scss',\n  scoped: true\n})\nexport class DealerSearchByNumberOfDealers {\n  @State() isLoading = false;\n  @State() formErrorMessage: string | null = null;\n\n  @Prop() locale!: string;\n\n  @Element() el!: HTMLPhnDealerSearchByNumberOfDealersElement;\n\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { dealer } = navContentStore.state;\n      if (dealer.numberOfDealers <= 5) {\n        this.fetchAllDealersForMarket();\n      }\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  private async fetchAllDealersForMarket() {\n    const { error: errorContent } = navContentStore.state;\n\n    try {\n      this.isLoading = true;\n\n      const { country } = splitLocale(this.locale);\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getAllPPNDealersForMarket(\n        env,\n        getConfig(env).DEALER_API_URL_ALL_DEALERS,\n        country\n      );\n\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private reset() {\n    this.formErrorMessage = null;\n    this.isLoading = false;\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render() {\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    if (isString(this.formErrorMessage))\n      return <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />;\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n\n  .city-select-form-field{\n    padding-top: p-px-to-rem(24px);\n  }\n\n  .title-container {\n    display: flex;\n    flex-direction: row;\n    border: 2px solid rgb(107, 109, 112);\n    border-radius: 5px;\n\n    transition: background-color 0.24s ease;\n    margin: 0;\n    min-height: p-px-to-rem(54px);\n\n    phn-p-text {\n      padding-left: 19px;\n    }\n\n\n    phn-p-icon{\n      margin-right: p-px-to-rem(16px);\n      padding-top: -8px;\n      outline: 0;\n    }\n\n    div.text-limit {\n      width: 80%;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, JSX, Listen, Prop, State } from '@stencil/core';\nimport { getPPNDealersByRegion } from '../../services/dealer-service';\nimport { splitLocale } from '../../entities/locale';\nimport { City, DealersByRegion } from '../../entities/dealer-response';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport Logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport {\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport analyticsManager from '../../services/analytics/analytics-manager';\n\n@Component({\n  tag: 'phn-dealer-search-form-dropdown',\n  styleUrl: 'dealer-search-form-dropdown.scss',\n  scoped: true\n})\nexport class DealerSearchFormDropdown {\n  @Prop() locale = '';\n  @Prop() breakpoint!: number;\n\n  @State() isLoading = false;\n  @State() errorMessage: string | null = null;\n  @State() dealersOfRegion: DealersByRegion = { regions: [] };\n  @State() cities: City[] = [];\n  @State() selectedProvince = '';\n  @State() selectedCity = '';\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormDropdownElement;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n    this.getDealersByRegion();\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  @Listen('removeSkeletonOnDealerSearchForm')\n  loadedAutoCompleteListener(_event: Event): void {\n    this.showSkeleton = false;\n  }\n\n  private async getDealersByRegion() {\n    const { error: errorContent } = navContentStore.state;\n    const { country } = splitLocale(this.locale);\n\n    try {\n      this.isLoading = true;\n      this.dealersOfRegion = await getPPNDealersByRegion(country);\n    } catch (err) {\n      Logger.error('FETCH_DEALERS', err as Error);\n      this.errorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.dealerSearchFormEvent.emit();\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private onCitySelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedCity = (event.target as HTMLSelectElement).value;\n    this.selectedCity = selectedCity;\n    dealerSearchResultsStore.state.ppnDealers =\n      this.cities.find((city) => {\n        return [city.cityName, city.cityNameLocalized].includes(selectedCity);\n      })?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;\n  }\n\n  private onProvinceSelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedProvince = (event.target as HTMLSelectElement).value;\n    this.cities = this.getCitiesByGivenRegionName(selectedProvince);\n    this.selectedProvince = selectedProvince;\n  }\n\n  private getCitiesByGivenRegionName(province: string): City[] {\n    const regions = this.dealersOfRegion.regions;\n\n    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) =>\n      [regionName, regionNameLocalized].includes(province)\n    );\n\n    return selectedRegion?.cities || [];\n  }\n\n  private emitPageLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length || 0\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.isLoading = false;\n    this.selectedProvince = '';\n    this.selectedCity = '';\n\n    dealerSearchResultsStore.state.results = null;\n    dealerSearchResultsStore.state.savedDealerCookie = null;\n\n    this.clearSearchEvent.emit();\n  }\n\n  render(): JSX.Element {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n    const searchText = dealerSearchResultsStore.state.searchTerm;\n\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    return (\n      <Host>\n        {results && results.length > 0 ? (\n          <form\n            class=\"form-container\"\n            onSubmit={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <div>\n              <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n                <div class=\"text-limit\">\n                  <phn-p-text\n                    weight=\"regular\"\n                    size=\"small\"\n                    tag=\"div\"\n                    ellipsis=\"true\"\n                    color=\"contrast-medium\"\n                    data-test-id=\"dealer-search-form-input\"\n                  >\n                    {searchText}\n                  </phn-p-text>\n                </div>\n                <phn-p-icon\n                  name=\"close\"\n                  class=\"close-icon\"\n                  style={{ display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }}\n                  onClick={(event: Event) => {\n                    event.preventDefault();\n                    this.reset();\n                  }}\n                />\n              </div>\n            </div>\n          </form>\n        ) : (\n          <Fragment>\n            <phn-p-select-wrapper\n              filter\n              label={dealerContent.search.dropdown.province}\n              required\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n            >\n              <select\n                name=\"dealers-province\"\n                onChange={(event) => this.onProvinceSelect(event)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                <option hidden selected>\n                  {dealerContent.search.dropdown.selectAProvince}\n                </option>\n                {this.dealersOfRegion.regions.map((region) => {\n                  const province =\n                    splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null\n                      ? region.regionName\n                      : region.regionNameLocalized;\n                  return <option value={province}>{province}</option>;\n                })}\n              </select>\n            </phn-p-select-wrapper>\n\n            <phn-p-select-wrapper\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n              class=\"city-select-form-field\"\n              filter=\"true\"\n              label={dealerContent.search.dropdown.city}\n              required\n            >\n              <select\n                disabled={!isString(this.selectedProvince)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n                name=\"dealers-cities\"\n                onChange={(event) => {\n                  this.onCitySelect(event);\n                }}\n              >\n                <option hidden>{dealerContent.search.dropdown.selectACity}</option>\n                {this.cities.map((city) => (\n                  <option>\n                    {splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null\n                      ? city.cityName\n                      : city.cityNameLocalized}\n                  </option>\n                ))}\n              </select>\n            </phn-p-select-wrapper>\n\n            {isString(this.errorMessage) ? (\n              <ErrorMessage errorMessage={this.errorMessage} onDismiss={() => this.reset()} />\n            ) : null}\n          </Fragment>\n        )}\n      </Host>\n    );\n  }\n}\n","/* istanbul ignore file */\nimport { splitLocale } from '../entities/locale';\nimport { LatLong, Prediction } from '../entities/places';\nimport { isString } from '../utility/helper';\nimport windowService from './window-service';\nimport { NaviErrorTypes, NaviError, NaviErrorType } from '../utility/navi-error';\nimport { getRegionSpecificCountry } from '../utility/helpers/dealer-search-helper';\n\nexport class MapsService {\n  private autocompleteService: google.maps.places.AutocompleteService | null = null;\n  private placesService: google.maps.places.PlacesService | null = null;\n  private geocoderService: google.maps.Geocoder | null = null;\n  private getLocation: ((latLong: LatLong) => google.maps.LatLng) | null = null;\n\n  async init(apiKey: string): Promise<void> {\n    try {\n      const google = await windowService.fetchGoogleMapsApi(apiKey);\n      this.autocompleteService = new google.maps.places.AutocompleteService();\n      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));\n      this.geocoderService = new google.maps.Geocoder();\n      this.getLocation = (latLong: LatLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);\n    } catch (err) {\n      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);\n    }\n  }\n\n  async getPredictions(input: string, locale: string): Promise<Prediction[]> {\n    if (input.length === 0) {\n      return [];\n    }\n    //ToDo: Check what todo if country is no valid iso-code\n    const predictions = await new Promise<google.maps.places.AutocompletePrediction[] | null>((resolve, reject) => {\n      if (this.autocompleteService === null) {\n        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.autocompleteService.getPlacePredictions(\n        {\n          input,\n          componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }\n        },\n        (predictions, status) =>\n          status === 'OK'\n            ? resolve(predictions)\n            : reject(\n                new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))\n              )\n      );\n    });\n\n    return (\n      predictions\n        ?.filter(({ place_id, description }) => isString(place_id) && isString(description))\n        .map(({ place_id: id, description: text }) => ({ id, text })) ?? []\n    );\n  }\n\n  async getPlaceCoordinates(placeId: string): Promise<LatLong> {\n    const response = await new Promise<google.maps.places.PlaceResult | null>((resolve, reject) => {\n      if (this.placesService === null) {\n        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.placesService.getDetails(\n        {\n          placeId\n        },\n        (response, status) =>\n          status === 'OK'\n            ? resolve(response)\n            : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status)))\n      );\n    });\n\n    const latitude = response?.geometry?.location?.lat();\n    const longitude = response?.geometry?.location?.lng();\n\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n      throw new NaviError(\n        `placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`,\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return { latitude, longitude };\n  }\n\n  async getFormattedAddressFromCoordinates(latLong: LatLong): Promise<string> {\n    if (this.getLocation === null) {\n      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);\n    }\n\n    const location = this.getLocation(latLong);\n\n    const response = await new Promise<google.maps.GeocoderResult[] | null>((resolve, reject) => {\n      if (this.geocoderService === null) {\n        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.geocoderService.geocode({ location }, (response, status) => {\n        status === 'OK'\n          ? resolve(response)\n          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));\n      });\n    });\n\n    if (response === null || response.length === 0) {\n      throw new NaviError(\n        'geocoderService.geocode did not find the location based on coordinates.',\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return response[0].formatted_address;\n  }\n}\n\nexport function getErrorType(status: string): NaviErrorType {\n  switch (status) {\n    case 'INVALID_REQUEST': {\n      return NaviErrorTypes.INVALID_INPUT;\n    }\n    case 'NOT_FOUND':\n    case 'ZERO_RESULTS': {\n      return NaviErrorTypes.NO_RESULTS;\n    }\n    case 'OVER_QUERY_LIMIT':\n    case 'UNKNOWN_ERROR': {\n      return NaviErrorTypes.RETRY;\n    }\n    case 'ERROR':\n    case 'REQUEST_DENIED':\n    default: {\n      return NaviErrorTypes.GENERAL;\n    }\n  }\n}\n\nexport default new MapsService();\n","@import '../../scss/index';\n\n:host {\n  display: block;\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    & .skeleton-autocomplete-search-field {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n\n    & .skeleton-or-text {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px 4px 0 0;\n    }\n\n    & .skeleton-geolocation-button {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 0 0 4px 4px;\n    }\n  }\n\n  .or-container {\n    position: relative;\n    width: 100%;\n    margin-top: p-px-to-rem(20px);\n\n    .geolocation {\n      width: 100%;\n      padding-bottom: 24px;\n    }\n\n    phn-p-text {\n      margin-bottom: p-px-to-rem(4px);\n      color: $pds-theme-light-primary;\n    }\n  }\n\n  .animate-out {\n    animation: fadeOutToTop 0.75s ease-in-out 0s;\n  }\n\n  .input-container {\n    width: 100%;\n  }\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { LatLong, Prediction } from '../../entities/places';\nimport { splitLocale } from '../../entities/locale';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getPPNDealers } from '../../services/dealer-service';\nimport { getConfig, getString, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport logger from '../../services/logger';\nimport { getErrorMessage, NaviError, NaviErrorTypes } from '../../utility/navi-error';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  DEALER_SEARCH_TARGET_ELEMENT,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport mapsService from '../../services/maps-service';\nimport windowService from '../../services/window-service';\nimport { Timeout } from '../../utility/timeout';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { getRegionSpecificCountry } from '../../utility/helpers/dealer-search-helper';\n\n@Component({\n  tag: 'phn-dealer-search-form-geolocation',\n  styleUrl: 'dealer-search-form-geolocation.scss',\n  scoped: true\n})\nexport class DealerSearchFormGeolocation {\n  @Prop() locale!: string;\n\n  @State() predictions: Prediction[] = [];\n  @State() errorMessage: string | null = null;\n  @State() formErrorMessage: string | null = null;\n  @State() isLoading = false;\n  @State() showGeolocationButton = dealerSearchResultsStore.state.results === null;\n  @State() animateResults = false;\n  @State() searchTerm = dealerSearchResultsStore.state.searchTerm;\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormGeolocationElement;\n\n  private debounceTimeout = new Timeout(100);\n\n  @Listen('autoCompleteLoaded')\n  loadedAutoCompleteListener(): void {\n    this.showSkeleton = false;\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  disconnectedCallback(): void {\n    dealerSearchResultsStore.state.searchTerm = this.searchTerm;\n    this.debounceTimeout.cancel();\n  }\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { error: errorContent } = navContentStore.state;\n\n      mapsService.init('GOOGLE_API_KEY').catch((err: Error) => {\n        logger.error('INIT_MAPS_SERVICE', err);\n        this.formErrorMessage = getErrorMessage(errorContent, err);\n        this.errorMessage = null;\n      });\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),\n        displayElementName: dealer.text\n      }\n    });\n  }\n\n  private emitResultsLoadEvent(searchTerm: string) {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: componentSearchSearchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private async fetchDealers(getSearchTerms: () => Promise<[string, LatLong]>) {\n    const { error: errorContent } = navContentStore.state;\n    try {\n      this.reset();\n      this.isLoading = true;\n\n      const [searchTerm, placeCoordinates] = await getSearchTerms();\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getPPNDealers(\n        env,\n        getConfig(env).DEALER_API_URL,\n        placeCoordinates,\n        getRegionSpecificCountry(splitLocale(this.locale).country)\n      );\n\n      dealerSearchResultsStore.state.searchTerm = searchTerm;\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n      this.showGeolocationButton = false;\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n      this.errorMessage = null;\n    } finally {\n      this.isLoading = false;\n      this.animateResults = true;\n    }\n  }\n\n  private async onSubmit(prediction: Prediction | null) {\n    const { dealer: dealerContent, error: errorContent } = navContentStore.state;\n\n    if (!isString(this.searchTerm)) {\n      this.errorMessage = errorContent.noInput;\n      this.formErrorMessage = '';\n      return;\n    }\n\n    await this.fetchDealers(async () => {\n      if (prediction === null) {\n        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);\n      }\n\n      this.searchTerm = prediction.text;\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {\n        componentClick: {\n          clickElementId: prediction.id,\n          clickElementName: prediction.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: prediction.text\n        }\n      });\n\n      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);\n\n      return [prediction.text, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(this.searchTerm);\n  }\n\n  private async getCurrentLocation(): Promise<void> {\n    const { dealer: dealerContent } = navContentStore.state;\n\n    await this.fetchDealers(async () => {\n      const placeCoordinates = await windowService.getNavigatorLatLong();\n      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);\n\n      this.searchTerm = '';\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {\n        componentClick: {\n          clickElementId: dealerContent.search.geolocation.id,\n          clickElementName: dealerContent.search.geolocation.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM\n        }\n      });\n\n      return [formattedAddress, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);\n  }\n\n  private async onDealerSearchEntry(searchTerm: string): Promise<void> {\n    const { error } = navContentStore.state;\n    try {\n      this.searchTerm = searchTerm;\n      this.errorMessage = null;\n      this.formErrorMessage = null;\n      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;\n      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);\n    } catch (err) {\n      logger.error('GET_PREDICTIONS', err as Error);\n      this.errorMessage = getErrorMessage(error, err as Error);\n      this.predictions = [];\n    }\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.formErrorMessage = null;\n    this.animateResults = false;\n    this.showGeolocationButton = true;\n    this.isLoading = false;\n\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render(): HTMLPhnDealerSearchFormElement {\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results } = dealerSearchResultsStore.state;\n\n    return (\n      <Host class={this.showSkeleton ? 'skeleton' : ''}>\n        <div class=\"input-container\">\n          {this.showSkeleton ? <div class=\"skeleton-autocomplete-search-field\" /> : null}\n          <phn-autocomplete-search-field\n            placeholder={dealerContent.search.form.inputPlaceholder}\n            initialValue={dealerSearchResultsStore.state.searchTerm}\n            predictions={this.predictions}\n            onSearchInput={(e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail))}\n            onClearSearch={() => {\n              this.predictions = [];\n              dealerSearchResultsStore.state.searchTerm = '';\n              this.searchTerm = '';\n              this.reset();\n              this.clearSearchEvent.emit();\n              this.showGeolocationButton = true;\n            }}\n            onSubmitSearch={(e) => this.onSubmit(e.detail)}\n            errorMessage={getString(this.errorMessage)}\n            style={{ display: this.showSkeleton ? 'none' : '' }}\n          />\n        </div>\n\n        {this.isLoading && (\n          <div class=\"spinner\">\n            <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n          </div>\n        )}\n\n        {this.showGeolocationButton && results === null ? (\n          <Fragment>\n            <div\n              class={`or-container ${this.isLoading ? 'animate-out' : ''}`}\n              onAnimationEnd={() => {\n                this.showGeolocationButton = false;\n              }}\n            >\n              {this.showSkeleton ? <div class=\"skeleton-or-text\" /> : null}\n              <phn-p-text\n                color=\"inherit\"\n                size=\"inherit\"\n                tag=\"div\"\n                data-test-id=\"dealer-search-or-label\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.or}\n              </phn-p-text>\n              {this.showSkeleton ? <div class=\"skeleton-geolocation-button\" /> : null}\n              <phn-p-button\n                class={'geolocation'}\n                onClick={() => this.getCurrentLocation()}\n                variant=\"tertiary\"\n                icon=\"locate\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.geolocation.text}\n              </phn-p-button>\n            </div>\n          </Fragment>\n        ) : null}\n\n        {isString(this.formErrorMessage) ? (\n          <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />\n        ) : null}\n      </Host>\n    );\n  }\n}\n","import { PPNDealer, PPNDealerSearchResult } from '../../entities/dealer-response';\nimport { EventEmitter, h, JSX } from '@stencil/core';\nimport { isString } from '../../utility/helper';\nimport { getDealerDetailsRoutingKey, RoutingKeys } from '../../entities/routing-key';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { splitLocale } from '../../entities/locale';\n\nexport function DealerSearchFormItemCard({\n  dealer,\n  showOverlay,\n  eventEmitter,\n  locale\n}: {\n  dealer: PPNDealerSearchResult;\n  showOverlay?: boolean;\n  eventEmitter: EventEmitter;\n  locale: string;\n}): JSX.Element | null {\n  const { ppnDealer, distance } = dealer;\n  const language = splitLocale(locale).language;\n  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n  // postalCode is currently not available in addressLocalized\n  const address =\n    language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n  const name =\n    language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;\n  let country = '';\n  try {\n    country = splitLocale(locale).country;\n  } catch (err) {\n    // throw the error away\n  }\n  const onDealerCardClick = (ppnDealer: PPNDealer): void => {\n    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);\n    eventEmitter.emit([dealerDetailsRoutingKey]);\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {\n      componentClick: {\n        clickElementId: ppnDealer.id,\n        clickElementName: ppnDealer.name,\n        clickElementType: ClickElementTypes.Button,\n        targetElement: `level2_${dealerDetailsRoutingKey}`\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: results?.length\n      },\n      partner: {\n        companyName: ppnDealer.name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    });\n  };\n\n  return (\n    <phn-menu-item-card\n      tabIndex={0}\n      text={name}\n      class={`animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`}\n      onClick={() => onDealerCardClick(ppnDealer)}\n      analyticsId={ppnDealer.id}\n    >\n      <div class=\"phn-flex-row phn-justify-between phn-align-center\">\n        {country === 'JP' ? (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`}\n          </phn-p-text>\n        ) : (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`${address.street}, `}\n            <span class=\"city\">\n              {ppnDealer.address.postalCode} {address.city}\n            </span>\n          </phn-p-text>\n        )}\n\n        {distance && distance.value >= 1 && numberOfDealers > 5 ? (\n          <phn-p-tag color=\"notification-info-soft\">{`${Math.round(\n            distance.value\n          )}${distance.unit.toLowerCase()}`}</phn-p-tag>\n        ) : null}\n      </div>\n    </phn-menu-item-card>\n  );\n}\n","import { navContentStore } from '../../state/nav-content-store';\nimport { h } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport { isString } from '../../utility/helper';\n\nexport function DealerSearchMapLink() {\n  const { dealer: dealerContent } = navContentStore.state;\n\n  function emitDealersMapEvent() {\n    const map = dealerContent.search.map;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_MAP_CLICK, {\n      componentClick: {\n        clickElementId: map.id,\n        clickElementName: map.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: map.link\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length\n      }\n    });\n  }\n  return (\n    <a class={'animated'} href={dealerContent.search.map.link} aria-label={dealerContent.search.map.description}>\n      <phn-p-button onClick={emitDealersMapEvent} variant=\"tertiary\">\n        {dealerContent.search.map.text}{' '}\n      </phn-p-button>\n    </a>\n  );\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  phn-dealer-details-drawer{\n    margin-top: p-px-to-rem(20px);\n  }\n\n\n  phn-menu-item-card {\n    & > div {\n      margin-top: 14px;\n    }\n  }\n\n  .dealer-card-overlay {\n    opacity: 0.3;\n  }\n\n  .dealer-card{\n    phn-p-tag{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n\n  .error-message {\n    position: relative;\n    margin-top: p-px-to-rem(32px);\n  }\n\n  .animated {\n    animation: fadeInFromBottom 0.75s ease-in-out 0s;\n  }\n\n  a {\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    text-decoration-line: none;\n    margin-top: p-px-to-rem(36px);\n\n    phn-p-button {\n      width: 100%;\n    }\n  }\n}\n","import { Component, Event, EventEmitter, Fragment, h, Host, Prop } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { DealerSearchFormItemCard } from './dealer-search-form-item-card';\nimport { JSX } from '@stencil/core/internal';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { DealerSearchMapLink } from './dealer-search-map-link';\n\n@Component({\n  tag: 'phn-dealer-search-results',\n  styleUrl: 'dealer-search-results.scss',\n  scoped: true\n})\nexport class DealerSearchResults {\n  @Prop() showOverlay = false;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  @Event({ bubbles: true, cancelable: false }) mobileMenuItemClick!: EventEmitter<string[]>;\n\n  render(): JSX.Element | null {\n    const { results, ppnDealers } = dealerSearchResultsStore.state;\n    const { error: errorContent } = navContentStore.state;\n\n    if (results === null) return null;\n\n    if (results?.length === 0)\n      return (\n        <Fragment>\n          <ErrorMessage errorMessage={errorContent.noResults} onDismiss={() => null} />\n        </Fragment>\n      );\n    const dealerId = results[0];\n    if (results.length === 1 && ppnDealers[dealerId]) {\n      dealerSearchResultsStore.state.savedDealerCookie = {\n        id: dealerId,\n        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,\n        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude\n      };\n\n      return <phn-dealer-details-drawer breakpoint={this.breakpoint} dealerId={dealerId} locale={this.locale} />;\n    }\n\n    return (\n      <Host>\n        <Fragment>\n          {results.map((dealerId) => {\n            const dealer = ppnDealers[dealerId];\n\n            if (dealer === undefined || dealer.ppnDealer === undefined) {\n              return null;\n            }\n            return (\n              <DealerSearchFormItemCard\n                dealer={dealer}\n                eventEmitter={this.mobileMenuItemClick}\n                showOverlay={this.showOverlay}\n                locale={this.locale}\n              />\n            );\n          })}\n          <DealerSearchMapLink />\n        </Fragment>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n@mixin renderTitle() {\n  .title-container {\n    width: 100%;\n    margin: 0;\n\n    phn-p-heading {\n      word-break: break-word;\n      white-space: pre-line;\n    }\n\n    phn-p-icon{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n}\n\n@mixin default-skeleton() {\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n    background: $pds-theme-light-contrast-low;\n    border-radius: 4px;\n\n    & * {\n      visibility: hidden;\n    }\n  }\n}\n\n:host {\n  display: block;\n  padding: p-px-to-rem(19px);\n  margin-top: p-px-to-rem(16px);\n  border-radius: 8px;\n  background-color: $pds-theme-light-state-hover;\n  transition: background-color 0.24s ease;\n  cursor: pointer;\n\n  button{\n    all: unset;\n    display: block;\n    width: 100%;\n  }\n\n  @include default-skeleton();\n\n  @include pds-media-query-min('s') {\n    background-color: $pds-theme-light-background-base;\n  }\n\n  &:hover {\n    @include pds-media-query-min('s') {\n      background-color: $pds-theme-light-state-hover;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .subtext {\n    color: $pds-theme-light-primary;\n  }\n\n  .dealer-card-item {\n    font-size: 16px;\n    font-family: \"Porsche Next\";\n    font-style: normal;\n    font-weight: 400;\n    line-height: 24px;\n    color: $pds-theme-light-primary;\n    word-break: break-word;\n    white-space: pre-line;\n  }\n\n  @include renderTitle();\n}\n","import { Component, Element, Fragment, h, Host, JSX, Listen, Prop } from '@stencil/core';\nimport { ClickElementType, ClickElementTypes, EventAction, EventActions } from '../../utility/constants';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { getHTMLElement, isString } from '../../utility/helper';\nimport { sendDataLayerEvent } from '../../services/analytics/data-layer-event-sender';\n\n@Component({\n  tag: 'phn-menu-item-card',\n  styleUrl: 'menu-item-card.scss',\n  scoped: true\n})\nexport class MenuItemCard {\n  @Prop() text!: string;\n  @Prop() analyticsId!: string;\n  @Prop() subtext = '';\n  @Prop() elementId = '';\n  @Prop() link = '';\n  @Prop() datalayerEventAction: EventAction = EventActions.NAVIGATION_CLICK;\n  @Prop() customDatalayerProperties: TDataLayer = {};\n  @Prop() target = '_self';\n  @Prop() iconLeft = '';\n\n  @Element() el!: HTMLPhnMenuItemCardElement;\n\n  @Listen('keydown', { passive: false })\n  handleKeyDown(e: KeyboardEvent): void {\n    if (e.key === 'Enter') {\n      const anchorElement = getHTMLElement(e.target)?.querySelector('a');\n      const targetElement = anchorElement ? anchorElement : getHTMLElement(e.target);\n\n      if (targetElement) {\n        targetElement.click();\n        !anchorElement ? this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId) : null;\n      }\n    }\n  }\n\n  private sendDataLayerEvent(clickElementType: ClickElementType, elementId: string): void {\n    sendDataLayerEvent({\n      analyticsId: this.analyticsId,\n      text: this.text,\n      elementId,\n      clickElementType,\n      link: this.link,\n      customDatalayerProperties: this.customDatalayerProperties,\n      datalayerEventAction: this.datalayerEventAction\n    });\n  }\n\n  private renderTitle(): HTMLElement {\n    return (\n      <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n        {this.elementId ? (\n          <phn-p-text className={'dealer-card-item'}>{this.text}</phn-p-text>\n        ) : (\n          <phn-p-heading tag=\"h3\" size=\"medium\">\n            {this.text}\n          </phn-p-heading>\n        )}\n        {isString(this.iconLeft) ? <phn-p-icon name={this.iconLeft}></phn-p-icon> : null}\n      </div>\n    );\n  }\n\n  private renderSubtitle(): JSX.Element | null {\n    if (!isString(this.subtext)) {\n      return null;\n    }\n\n    return (\n      <phn-p-text\n        class={'subtext'}\n        color=\"contrast-medium\"\n        weight=\"regular\"\n        size=\"xx-small\"\n        tag=\"div\"\n        ellipsis=\"true\"\n        data-test-id=\"subtext\"\n      >\n        {this.subtext}\n      </phn-p-text>\n    );\n  }\n\n  render(): JSX.Element {\n    const body = (\n      <Fragment>\n        <div class=\"texts\">\n          {this.renderTitle()}\n          {this.renderSubtitle()}\n        </div>\n        <slot />\n      </Fragment>\n    );\n\n    if (isString(this.link))\n      return (\n        <a\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);\n          }}\n          class=\"card-link\"\n          href={this.link}\n          target={this.target}\n        >\n          {body}\n        </a>\n      );\n\n    return (\n      <Host>\n        <button\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);\n          }}\n        >\n          {body}\n        </button>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  .button-container {\n    display: flex;\n\n    @include pds-media-query-min-max('base', 'xs') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    @include pds-media-query-min-max('s', 'l') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    .login {\n      padding: p-px-to-rem(36px) 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n        padding-top: 0;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 p-px-to-rem(8px) p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min-max('s', 'l') {\n        padding: 0 0 p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n\n    .more {\n      padding: 0 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 0 p-px-to-rem(16px) p-px-to-rem(8px);\n      }\n\n      @include pds-media-query-min('s') {\n        padding: 0 0 p-px-to-rem(23px) 0\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n  }\n\n  phn-p-text {\n    padding-bottom: p-px-to-rem(24px);\n    border-bottom: 2px solid $pds-theme-light-contrast-low;\n    margin-bottom: p-px-to-rem(10px);\n\n    @include pds-media-query-min('xxl') {\n      margin-bottom: p-px-to-rem(16px);\n    }\n  }\n\n  phn-p-link-pure {\n    float: left;\n    text-decoration: underline;\n    color: black;\n  }\n}\n","import { Component, Event, EventEmitter, Fragment, h, JSX, Prop } from '@stencil/core';\nimport { TLink } from '../../entities/content';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\n\n@Component({\n  tag: 'phn-myporsche-login',\n  styleUrl: 'myporsche-login.scss',\n  scoped: true\n})\nexport class MyPorscheLogin {\n  @Prop() login!: TLink;\n  @Prop() more: TLink | null = null;\n  @Prop() signup!: TLink;\n  @Prop() signupText!: string;\n\n  @Event() loginEvent!: EventEmitter<void>;\n\n  private sendDataLayerEvent(link: TLink | null): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.NAVIGATION_LINK_CLICK, {\n      componentClick: {\n        clickElementId: link?.id,\n        clickElementName: link?.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: link?.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.MY_PORSCHE,\n          ElementTypes.myPorscheDrawer\n        ),\n        displayElementName: link?.text\n      }\n    });\n  }\n\n  render(): JSX.Element {\n    return (\n      <Fragment>\n        <div class=\"button-container\">\n          <phn-p-button\n            variant=\"primary\"\n            class=\"login\"\n            onClick={() => {\n              this.loginEvent.emit();\n              this.sendDataLayerEvent(this.login);\n            }}\n          >\n            {this.login.text}\n          </phn-p-button>\n          {this.more && isString(this.more.link) ? (\n            <phn-p-link\n              variant=\"tertiary\"\n              class=\"more\"\n              href={this.more.link}\n              onClick={() => {\n                this.sendDataLayerEvent(this.more);\n              }}\n            >\n              {this.more.text}\n            </phn-p-link>\n          ) : null}\n        </div>\n        <div>\n          <phn-p-link-pure\n            icon=\"none\"\n            onClick={() => {\n              this.sendDataLayerEvent(this.signup);\n            }}\n          >\n            <a href={this.signup.link}>{this.signup.text}</a>\n          </phn-p-link-pure>\n          <phn-p-text>&nbsp;{this.signupText}</phn-p-text>\n        </div>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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"}