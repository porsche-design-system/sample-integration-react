{"version":3,"names":["getAllPPNDealersForMarket","env","dealerApiUrl","country","getPPNDealers","latitude","longitude","radius","coordinates","options","headers","Headers","set","Environments","LOCAL","windowService","btoa","concat","requestParams","fetch","getQueryString","method","response","_b","sent","NaviError","NaviErrorTypes","GENERAL","status","NO_RESULTS","json","ppnDealerSearchResults","map","_a","dealer","rest","__rest","Object","assign","ppnDealer","getPPNDealer","id","find","dealerSearchResult","undefined","dealersByRegionMap","Map","getPPNDealerByRegion","region","getPPNDealersByRegion","dealersOfRegion","dealerResult","regions","flatMap","cities","dealers","values","reduce","dealerList","__spreadArray","navStateStore","state","has","dealersByRegion","get","BFF_ENDPOINT","getConfig"],"sources":["src/services/dealer-service.ts"],"sourcesContent":["import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n"],"mappings":"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"}