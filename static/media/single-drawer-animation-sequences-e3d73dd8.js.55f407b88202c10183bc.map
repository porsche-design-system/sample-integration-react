{"version":3,"names":["registerOpenSingleDrawerAnimation","_b","onAnimationStarts","onAnimationEnds","sequence","onStart","elementSelector","animation","name","from","duration","AnimationDurations","drawerOpen","cleanUpAfterAnimation","backdrop","to","onEnd","animationManager","register","AnimationSequences","OPEN_SINGLE_DRAWER","makeSequence","timingFunction","registerCloseSingleDrawerAnimation","drawer","CLOSE_SINGLE_DRAWER","registerTransitionNextLevelSingleDrawerAnimation","TRANSITION_NEXT_LEVEL_SINGLE_DRAWER","registerTransitionPreviousLevelSingleDrawerAnimation","TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER","isPlayingSingleDrawerAnimation","singleDrawerAnimationSequences","some","isPlaying","_a","e"],"sources":["src/components/single-drawer/single-drawer-animation-sequences.ts"],"sourcesContent":["import animationManager, {\n  AnimationEndsCallbacks,\n  AnimationStatusCallbacks,\n  makeSequence,\n  SequenceStep\n} from '../../services/animations/animation-manager';\nimport { AnimationDurations, AnimationSequences, AnimationSequencesType } from '../../utility/constants';\n\nexport const registerOpenSingleDrawerAnimation = ({\n  onAnimationStarts,\n  onAnimationEnds\n}: Required<AnimationStatusCallbacks>): void => {\n  const sequence: SequenceStep[] = [\n    [\n      {\n        onStart: onAnimationStarts,\n        elementSelector: 'phn-single-drawer .drawer.animating',\n        animation: {\n          name: 'slideInFromLeft',\n          from: -1000,\n          duration: AnimationDurations.drawerOpen,\n          cleanUpAfterAnimation: true\n        }\n      },\n      {\n        elementSelector: 'phn-backdrop',\n        animation: {\n          name: 'fadeInBackdrop',\n          duration: AnimationDurations.backdrop,\n          to: 0.6\n        },\n        onEnd: onAnimationEnds\n      }\n    ]\n  ];\n\n  animationManager.register(\n    AnimationSequences.OPEN_SINGLE_DRAWER,\n    makeSequence(sequence, { timingFunction: 'cubicBezierStart' })\n  );\n};\n\nexport const registerCloseSingleDrawerAnimation = ({\n  onAnimationStarts,\n  onAnimationEnds\n}: Required<AnimationStatusCallbacks>): void => {\n  const sequence: SequenceStep[] = [\n    [\n      {\n        onStart: onAnimationStarts,\n        elementSelector: 'phn-single-drawer .drawer.animating',\n        animation: {\n          name: 'slideOutToLeft',\n          duration: AnimationDurations.drawer,\n          to: -1000\n        }\n      },\n      {\n        elementSelector: 'phn-backdrop',\n        animation: {\n          name: 'fadeOutBackdrop',\n          duration: AnimationDurations.backdrop,\n          from: 0.6\n        },\n        onEnd: onAnimationEnds\n      }\n    ]\n  ];\n\n  animationManager.register(\n    AnimationSequences.CLOSE_SINGLE_DRAWER,\n    makeSequence(sequence, { timingFunction: 'cubicBezierEnd' })\n  );\n};\n\nexport const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }: AnimationEndsCallbacks): void => {\n  animationManager.register(\n    AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n    makeSequence([\n      [\n        {\n          elementSelector: 'phn-single-drawer .drawer.animating',\n          animation: {\n            name: 'slideInFromRightFixed',\n            duration: AnimationDurations.drawer,\n            timingFunction: 'easeInOutQuad'\n          },\n          onEnd: onAnimationEnds\n        }\n      ]\n    ])\n  );\n};\n\nexport const registerTransitionPreviousLevelSingleDrawerAnimation = ({\n  onAnimationEnds\n}: AnimationEndsCallbacks): void => {\n  animationManager.register(\n    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER,\n    makeSequence([\n      [\n        {\n          elementSelector: 'phn-single-drawer .drawer.animating',\n          animation: {\n            name: 'slideOutToRightFixed',\n            duration: AnimationDurations.drawer,\n            timingFunction: 'easeInOutQuad'\n          },\n          onEnd: onAnimationEnds\n        }\n      ]\n    ])\n  );\n};\n\nexport const isPlayingSingleDrawerAnimation = (): boolean => {\n  try {\n    const singleDrawerAnimationSequences: AnimationSequencesType[] = [\n      AnimationSequences.OPEN_SINGLE_DRAWER,\n      AnimationSequences.CLOSE_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER\n    ];\n\n    return singleDrawerAnimationSequences.some((sequence) => {\n      try {\n        return animationManager.isPlaying(sequence);\n      } catch {\n        return false;\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n};\n"],"mappings":"+KAQaA,kCAAoC,SAACC,G,IAChDC,EAAiBD,EAAAC,kBACjBC,EAAeF,EAAAE,gBAEf,IAAMC,EAA2B,CAC/B,CACE,CACEC,QAASH,EACTI,gBAAiB,sCACjBC,UAAW,CACTC,KAAM,kBACNC,MAAO,IACPC,SAAUC,mBAAmBC,WAC7BC,sBAAuB,OAG3B,CACEP,gBAAiB,eACjBC,UAAW,CACTC,KAAM,iBACNE,SAAUC,mBAAmBG,SAC7BC,GAAI,IAENC,MAAOb,KAKbc,iBAAiBC,SACfC,mBAAmBC,mBACnBC,aAAajB,EAAU,CAAEkB,eAAgB,qBAE7C,E,IAEaC,mCAAqC,SAACtB,G,IACjDC,EAAiBD,EAAAC,kBACjBC,EAAeF,EAAAE,gBAEf,IAAMC,EAA2B,CAC/B,CACE,CACEC,QAASH,EACTI,gBAAiB,sCACjBC,UAAW,CACTC,KAAM,iBACNE,SAAUC,mBAAmBa,OAC7BT,IAAK,MAGT,CACET,gBAAiB,eACjBC,UAAW,CACTC,KAAM,kBACNE,SAAUC,mBAAmBG,SAC7BL,KAAM,IAERO,MAAOb,KAKbc,iBAAiBC,SACfC,mBAAmBM,oBACnBJ,aAAajB,EAAU,CAAEkB,eAAgB,mBAE7C,E,IAEaI,iDAAmD,SAACzB,G,IAAEE,EAAeF,EAAAE,gBAChFc,iBAAiBC,SACfC,mBAAmBQ,oCACnBN,aAAa,CACX,CACE,CACEf,gBAAiB,sCACjBC,UAAW,CACTC,KAAM,wBACNE,SAAUC,mBAAmBa,OAC7BF,eAAgB,iBAElBN,MAAOb,MAKjB,E,IAEayB,qDAAuD,SAAC3B,G,IACnEE,EAAeF,EAAAE,gBAEfc,iBAAiBC,SACfC,mBAAmBU,wCACnBR,aAAa,CACX,CACE,CACEf,gBAAiB,sCACjBC,UAAW,CACTC,KAAM,uBACNE,SAAUC,mBAAmBa,OAC7BF,eAAgB,iBAElBN,MAAOb,MAKjB,E,IAEa2B,+BAAiC,WAC5C,IACE,IAAMC,EAA2D,CAC/DZ,mBAAmBC,mBACnBD,mBAAmBM,oBACnBN,mBAAmBQ,oCACnBR,mBAAmBU,yCAGrB,OAAOE,EAA+BC,MAAK,SAAC5B,GAC1C,IACE,OAAOa,iBAAiBgB,UAAU7B,E,CAClC,MAAA8B,GACA,OAAO,K,KAGX,MAAOC,GACP,OAAO,K,CAEX,S"}