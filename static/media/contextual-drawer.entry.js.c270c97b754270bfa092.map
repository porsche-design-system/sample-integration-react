{"version":3,"names":["registerContextualDrawerOpening","_a","onStartOpening","onFinishOpening","animationManager","register","makeSequence","onStart","elementSelector","animation","className","cleanUpAfterAnimation","element","style","left","onEnd","backgroundColor","opacity","registerContextualDrawerClosing","onStartClosing","cleanUpBeforeAnimation","contextualDrawerCss","ContextualDrawer","prototype","closeContextualDrawer","this","closeDrawer","openContextualDrawer","play","_this","then","phnContextualDrawerStatus","emit","status","DrawerStatusValues","finishClosing","isDrawerOpened","componentDidLoad","startOpening","contextualDrawerHeader","document","getElementById","display","finishOpening","startClosing","render","h","Host","variant","theme","icon","onClick","class","id","slot","name"],"sources":["src/components/contextual-drawer/contextual-drawer-animation-sequence.ts","src/components/contextual-drawer/contextual-drawer.scss?tag=contextual-drawer&encapsulation=scoped","src/components/contextual-drawer/contextual-drawer.tsx"],"sourcesContent":["import animationManager, { makeSequence } from '../../services/animations/animation-manager';\n\nexport const registerContextualDrawerOpening = ({\n  onStartOpening,\n  onFinishOpening\n}: {\n  onStartOpening: () => void;\n  onFinishOpening: () => void;\n}): void => {\n  animationManager.register(\n    'openContextualDrawer',\n    makeSequence([\n      [\n        {\n          onStart: onStartOpening,\n          elementSelector: 'contextual-drawer',\n          animation: {\n            className: 'slide-in-from-left',\n            cleanUpAfterAnimation: (element) => {\n              element.style.left = '0px';\n            }\n          }\n        },\n        {\n          onEnd: onFinishOpening,\n          elementSelector: '.contextual-drawer-backdrop',\n          animation: {\n            className: 'fade-in-animation',\n            cleanUpAfterAnimation: (element) => {\n              element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';\n              element.style.opacity = '1';\n            }\n          }\n        }\n      ]\n    ])\n  );\n};\n\nexport const registerContextualDrawerClosing = ({ onStartClosing }: { onStartClosing: () => void }): void => {\n  animationManager.register(\n    'closeContextualDrawer',\n    makeSequence([\n      [\n        {\n          onStart: onStartClosing,\n          elementSelector: 'contextual-drawer',\n          animation: {\n            className: 'slide-out-to-left',\n            cleanUpBeforeAnimation: (element) => {\n              element.style.left = '';\n            }\n            // cleanUpBeforeAnimation: (element) => {\n            //   element.style.left = '0px';\n            // }\n          }\n        },\n        {\n          elementSelector: '.contextual-drawer-backdrop',\n          animation: {\n            className: 'fade-out-animation',\n            cleanUpBeforeAnimation: (element) => {\n              element.style.backgroundColor = '';\n              element.style.opacity = '';\n            }\n          }\n        }\n      ]\n    ])\n  );\n};\n","@import '../../scss';\n\n$drawer-width: (\n  'mobile':  100%,\n  'm':  p-px-to-rem(336px),\n  'l':  p-px-to-rem(405px),\n  'xxl':  p-px-to-rem(606px),\n  'default': p-px-to-rem(330px)\n);\n\n:host {\n  float: right;\n  left: -1000px;\n  width: fit-content;\n  box-sizing: border-box;\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  z-index: $phn-z-index-mega-flyout + 1;\n\n  &.slide-in-from-left {\n    animation: slide-in-from-left-absolute 600ms;\n  }\n\n  &.slide-out-to-left {\n    animation: slide-in-from-left-absolute 600ms reverse;\n  }\n\n  @include pds-media-query-min-max('base', 's') {\n    width: map-get($drawer-width, 'mobile');\n  }\n\n  .contextual-drawer-backdrop {\n    position: fixed;\n    z-index: $phn-z-index-mega-flyout;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.0);\n    opacity: 0;\n    cursor: pointer;\n    @include pds-frosted-glass();\n\n    &.fade-in-animation {\n      animation: fade-in-animation 400ms;\n    }\n\n    &.fade-out-animation {\n      animation: fade-in-animation 400ms reverse;\n    }\n\n  }\n\n  .close-button {\n    $button-width: 48px;\n    $button-margin: 28px;\n    position: absolute;\n    right: p-px-to-rem(-($button-width + $button-margin));\n    z-index: $phn-z-index-mega-flyout + 1;\n    width: p-px-to-rem($button-width);\n    height: p-px-to-rem($button-width);\n    margin-top: p-px-to-rem($button-margin);\n    cursor: pointer;\n\n    @include pds-media-query-min-max('base', 's') {\n      display: none;\n    }\n  }\n\n  .contextual-drawer{\n    background-color: $main-drawer-background-color;\n    position: relative;\n    overflow-y: auto;\n    overflow-x: hidden;\n    width: map-get($drawer-width, 'default');\n    border-radius: 0 4px 4px 0;\n    height: 100vh;\n    z-index: $phn-z-index-mega-flyout + 1;\n\n    @include pds-media-query-min-max('base', 's') {\n      width: map-get($drawer-width, 'mobile');\n      border-radius: 0;\n      background-color: $main-drawer-mobile-background-color;\n    }\n\n    @include pds-media-query-min('m') {\n      width: map-get($drawer-width, 'm');\n    }\n\n    @include pds-media-query-min('l') {\n      width: map-get($drawer-width, 'l');\n    }\n\n    @include pds-media-query-min('xxl') {\n      width: map-get($drawer-width, 'xxl');\n    }\n  }\n\n\n}\n","import { Component, Event, EventEmitter, h, Host, JSX, Listen, State } from '@stencil/core';\nimport {\n  registerContextualDrawerClosing,\n  registerContextualDrawerOpening\n} from './contextual-drawer-animation-sequence';\nimport animationManager from '../../services/animations/animation-manager';\nimport { DrawerStatusTypes, DrawerStatusValues } from '../../utility/constants/app';\n\n@Component({\n  tag: 'contextual-drawer',\n  styleUrl: 'contextual-drawer.scss',\n  scoped: true\n})\nexport class ContextualDrawer {\n  @Event() openBackdrop!: EventEmitter<boolean>;\n  @State() isDrawerOpened = false;\n\n  @Event({ composed: true, bubbles: true }) phnContextualDrawerStatus!: EventEmitter<{\n    status: DrawerStatusTypes;\n  }>;\n\n  @Listen('phnCloseContextualDrawer', { target: 'window' })\n  closeContextualDrawer(): void {\n    this.closeDrawer();\n  }\n\n  @Listen('phnOpenContextualDrawer', { target: 'window' })\n  openContextualDrawer(): void {\n    animationManager.play('openContextualDrawer');\n  }\n\n  private closeDrawer(): void {\n    animationManager.play('closeContextualDrawer').then(() => {\n      this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.finishClosing });\n      this.isDrawerOpened = false;\n    });\n  }\n\n  componentDidLoad(): void {\n    registerContextualDrawerOpening({\n      onStartOpening: () => {\n        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.startOpening });\n        this.isDrawerOpened = true;\n        const contextualDrawerHeader = document.getElementById('contextual-drawer-header');\n        if (contextualDrawerHeader) {\n          contextualDrawerHeader.style.display = '';\n        }\n      },\n      onFinishOpening: () => {\n        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.finishOpening });\n      }\n    });\n\n    registerContextualDrawerClosing({\n      onStartClosing: () => {\n        this.phnContextualDrawerStatus.emit({ status: DrawerStatusValues.startClosing });\n      }\n    });\n  }\n\n  render(): JSX.Element {\n    return (\n      <Host style={{ display: this.isDrawerOpened ? '' : 'none' }}>\n        <phn-p-button\n          variant=\"secondary\"\n          className=\"close-button\"\n          theme=\"dark\"\n          hide-label=\"true\"\n          icon={'close'}\n          aria-label=\"close modal dialog\"\n          onClick={() => {\n            this.closeDrawer();\n          }}\n        />\n        <div class=\"contextual-drawer\" id=\"contextual-drawer\">\n          <div slot=\"contextual_drawer_header\">\n            <slot name=\"contextual_drawer_header\"></slot>\n          </div>\n        </div>\n        <div\n          aria-hidden=\"true\"\n          class=\"contextual-drawer-backdrop\"\n          onClick={() => {\n            this.closeDrawer();\n          }}\n        />\n      </Host>\n    );\n  }\n}\n"],"mappings":"mOAEO,IAAMA,gCAAkC,SAACC,G,IAC9CC,EAAcD,EAAAC,eACdC,EAAeF,EAAAE,gBAKfC,iBAAiBC,SACf,uBACAC,aAAa,CACX,CACE,CACEC,QAASL,EACTM,gBAAiB,oBACjBC,UAAW,CACTC,UAAW,qBACXC,sBAAuB,SAACC,GACtBA,EAAQC,MAAMC,KAAO,K,IAI3B,CACEC,MAAOZ,EACPK,gBAAiB,8BACjBC,UAAW,CACTC,UAAW,oBACXC,sBAAuB,SAACC,GACtBA,EAAQC,MAAMG,gBAAkB,qBAChCJ,EAAQC,MAAMI,QAAU,G,OAOtC,EAEO,IAAMC,gCAAkC,SAACjB,G,IAAEkB,EAAclB,EAAAkB,eAC9Df,iBAAiBC,SACf,wBACAC,aAAa,CACX,CACE,CACEC,QAASY,EACTX,gBAAiB,oBACjBC,UAAW,CACTC,UAAW,oBACXU,uBAAwB,SAACR,GACvBA,EAAQC,MAAMC,KAAO,E,IAO3B,CACEN,gBAAiB,8BACjBC,UAAW,CACTC,UAAW,qBACXU,uBAAwB,SAACR,GACvBA,EAAQC,MAAMG,gBAAkB,GAChCJ,EAAQC,MAAMI,QAAU,E,OAOtC,ECtEA,IAAMI,oBAAsB,omM,ICafC,iBAAgB,W,+LAED,K,CAO1BA,EAAAC,UAAAC,sBAAA,WACEC,KAAKC,a,EAIPJ,EAAAC,UAAAI,qBAAA,WACEvB,iBAAiBwB,KAAK,uB,EAGhBN,EAAAC,UAAAG,YAAA,eAAAG,EAAAJ,KACNrB,iBAAiBwB,KAAK,yBAAyBE,MAAK,WAClDD,EAAKE,0BAA0BC,KAAK,CAAEC,OAAQC,mBAAmBC,gBACjEN,EAAKO,eAAiB,K,KAI1Bd,EAAAC,UAAAc,iBAAA,eAAAR,EAAAJ,KACEzB,gCAAgC,CAC9BE,eAAgB,WACd2B,EAAKE,0BAA0BC,KAAK,CAAEC,OAAQC,mBAAmBI,eACjET,EAAKO,eAAiB,KACtB,IAAMG,EAAyBC,SAASC,eAAe,4BACvD,GAAIF,EAAwB,CAC1BA,EAAuB1B,MAAM6B,QAAU,E,GAG3CvC,gBAAiB,WACf0B,EAAKE,0BAA0BC,KAAK,CAAEC,OAAQC,mBAAmBS,e,IAIrEzB,gCAAgC,CAC9BC,eAAgB,WACdU,EAAKE,0BAA0BC,KAAK,CAAEC,OAAQC,mBAAmBU,c,KAKvEtB,EAAAC,UAAAsB,OAAA,eAAAhB,EAAAJ,KACE,OACEqB,EAACC,KAAI,CAAClC,MAAO,CAAE6B,QAASjB,KAAKW,eAAiB,GAAK,SACjDU,EAAA,gBACEE,QAAQ,YACRtC,UAAU,eACVuC,MAAM,OAAM,aACD,OACXC,KAAM,QAAO,aACF,qBACXC,QAAS,WACPtB,EAAKH,a,IAGToB,EAAA,OAAKM,MAAM,oBAAoBC,GAAG,qBAChCP,EAAA,OAAKQ,KAAK,4BACRR,EAAA,QAAMS,KAAK,+BAGfT,EAAA,qBACc,OACZM,MAAM,6BACND,QAAS,WACPtB,EAAKH,a,eAtEY,G"}