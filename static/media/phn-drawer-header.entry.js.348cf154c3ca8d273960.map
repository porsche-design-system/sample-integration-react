{"version":3,"names":["drawerHeaderCss","DrawerHeader","class_1","prototype","componentWillLoad","this","waitForComponentsToLoad","componentsOnReady","el","Timeout","_a","sent","showSkeleton","receivedContent","sendDataLayerEvent","globalDataLayerService","pushDataLayerEvent","EventActions","MENU_CLOSE_CLICK","componentClick","clickElementId","clickElementName","clickElementType","ClickElementTypes","Button","targetElement","componentDisplay","displayElementId","analyticsManager","calculateDisplayElementId","displayElementType","calculateDisplayElementType","route","ElementTypes","closeButton","displayElementName","render","_this","topLevelRoutingKey","findTopLevelRoutingKey","isMobile","isDesktop","breakpoint","displayHeadlineContent","undefined","getHeadlineText","navContentStore","state","modelType","includes","split","subtext","getSubtext","locale","h","class","showBackButton","Fragment","onClick","back","analyticsId","backButtonAnalyticsId","text","backButtonText","style","display","isString","icon","hideLabel","aria","size","reset","clickDrawerHeaderClose","emit"],"sources":["src/components/drawer-header/drawer-header.scss?tag=phn-drawer-header&encapsulation=scoped","src/components/drawer-header/drawer-header.tsx"],"sourcesContent":["@import '../../scss';\n\n:host {\n  display: block;\n}\n\n.drawer-header {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.heading-items {\n  margin-bottom: p-px-to-rem(4px);\n  align-items: center;\n}\n\n.skeleton-headline {\n  width: p-px-to-rem(150px);\n  height: p-px-to-rem(24px);\n  background: $pds-theme-light-contrast-low;\n  border-radius: 4px;\n}\n\n.button-skeleton {\n  margin-left: p-px-to-rem(8px);\n  border-radius: p-px-to-rem(4px);\n  height: p-px-to-rem(24px);\n  width: p-px-to-rem(24px);\n  background: $pds-theme-light-contrast-low;\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Prop, State } from '@stencil/core';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { isDesktop, isString } from '../../utility/helper';\nimport { getHeadlineText, getSubtext } from '../../services/menu-items-service';\nimport { findTopLevelRoutingKey } from '../../entities/routing-key';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport { back, reset } from '../../services/routing-manager';\n\n@Component({\n  tag: 'phn-drawer-header',\n  styleUrl: 'drawer-header.scss',\n  scoped: true\n})\nexport class DrawerHeader {\n  @Prop() backButtonText = '';\n  @Prop() backButtonAnalyticsId!: string;\n  @Prop() showBackButton = false;\n  @Prop() route!: string;\n  @Prop() breakpoint!: number;\n  @Prop() receivedContent = false;\n  @Prop() locale?: string;\n\n  @State() showSkeleton = true;\n\n  @Event() clickDrawerHeaderClose!: EventEmitter<void>;\n\n  @Element() el!: HTMLPhnDrawerHeaderElement;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = !this.receivedContent;\n  }\n\n  private sendDataLayerEvent() {\n    globalDataLayerService.pushDataLayerEvent(EventActions.MENU_CLOSE_CLICK, {\n      componentClick: {\n        clickElementId: 'mainmenu.drawer.close',\n        clickElementName: 'X',\n        clickElementType: ClickElementTypes.Button,\n        targetElement: 'level-0'\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(this.route, ElementTypes.closeButton),\n        displayElementName: 'X'\n      }\n    });\n  }\n\n  render(): HTMLPhnDrawerHeaderElement {\n    const topLevelRoutingKey = findTopLevelRoutingKey(this.route);\n    const isMobile = !isDesktop(this.breakpoint);\n    const displayHeadlineContent =\n      topLevelRoutingKey !== undefined ? getHeadlineText(navContentStore.state, this.route, topLevelRoutingKey) : '';\n\n    const modelType = displayHeadlineContent.includes('mainmenu.') ? displayHeadlineContent.split('mainmenu.')[1] : '';\n    const subtext = getSubtext(topLevelRoutingKey, this.route, this.locale);\n    return (\n      <div class=\"drawer-header\">\n        {this.showBackButton ? (\n          <Fragment>\n            <phn-back-button\n              class=\"back-button\"\n              onClick={() => {\n                back();\n              }}\n              analyticsId={this.backButtonAnalyticsId}\n              text={isMobile ? '' : this.backButtonText}\n              style={!this.showSkeleton ? {} : { display: 'none' }}\n            />\n            {this.showSkeleton ? <div class=\"button-skeleton\" /> : null}\n          </Fragment>\n        ) : (\n          <div class=\"spacer\" />\n        )}\n\n        {isMobile ? (\n          modelType === '' ? (\n            <Fragment>\n              {this.showSkeleton && this.showBackButton ? <div class=\"skeleton-headline\"></div> : null}\n              <phn-heading\n                text={displayHeadlineContent}\n                style={this.showSkeleton || !isString(displayHeadlineContent) ? { display: 'none' } : {}}\n                class=\"heading-items\"\n                subtext={subtext}\n              />\n            </Fragment>\n          ) : (\n            <Fragment>\n              {this.showSkeleton ? <div class=\"skeleton-headline\"></div> : null}\n              <phn-signature-heading text={modelType} subtext={subtext} />\n            </Fragment>\n          )\n        ) : null}\n\n        <Fragment>\n          <phn-p-button-pure\n            class=\"close-button\"\n            icon=\"close\"\n            hideLabel=\"true\"\n            aria={{ 'aria-label': 'close dialog' }}\n            size=\"small\"\n            style={!this.showSkeleton ? {} : { display: 'none' }}\n            data-test-id=\"close-button\"\n            onClick={() => {\n              this.sendDataLayerEvent();\n              reset();\n              this.clickDrawerHeaderClose.emit();\n            }}\n          >\n            Close Dialog\n          </phn-p-button-pure>\n          {this.showSkeleton ? <div class=\"button-skeleton\" /> : null}\n        </Fragment>\n      </div>\n    );\n  }\n}\n"],"mappings":"67EAAA,IAAMA,gBAAkB,0nJ,ICiBXC,aAAY,W,oIACE,G,yDAEA,M,oEAGC,M,wCAGF,I,CAMxBC,EAAAC,UAAAC,kBAAA,WACEC,KAAKC,yB,EAGOJ,EAAAC,UAAAG,wBAAN,W,4GACN,SAAMC,kBAAkBF,KAAKG,GAAI,IAAIC,QAAQ,O,OAA7CC,EAAAC,OACAN,KAAKO,cAAgBP,KAAKQ,gB,kBAGpBX,EAAAC,UAAAW,mBAAA,WACNC,uBAAuBC,mBAAmBC,aAAaC,iBAAkB,CACvEC,eAAgB,CACdC,eAAgB,wBAChBC,iBAAkB,IAClBC,iBAAkBC,kBAAkBC,OACpCC,cAAe,WAEjBC,iBAAkB,CAChBC,iBAAkBC,iBAAiBC,4BACnCC,mBAAoBF,iBAAiBG,4BAA4B1B,KAAK2B,MAAOC,aAAaC,aAC1FC,mBAAoB,M,EAK1BjC,EAAAC,UAAAiC,OAAA,eAAAC,EAAAhC,KACE,IAAMiC,EAAqBC,uBAAuBlC,KAAK2B,OACvD,IAAMQ,GAAYC,UAAUpC,KAAKqC,YACjC,IAAMC,EACJL,IAAuBM,UAAYC,gBAAgBC,gBAAgBC,MAAO1C,KAAK2B,MAAOM,GAAsB,GAE9G,IAAMU,EAAYL,EAAuBM,SAAS,aAAeN,EAAuBO,MAAM,aAAa,GAAK,GAChH,IAAMC,EAAUC,WAAWd,EAAoBjC,KAAK2B,MAAO3B,KAAKgD,QAChE,OACEC,EAAA,OAAKC,MAAM,iBACRlD,KAAKmD,eACJF,EAACG,SAAQ,KACPH,EAAA,mBACEC,MAAM,cACNG,QAAS,WACPC,M,EAEFC,YAAavD,KAAKwD,sBAClBC,KAAMtB,EAAW,GAAKnC,KAAK0D,eAC3BC,OAAQ3D,KAAKO,aAAe,GAAK,CAAEqD,QAAS,UAE7C5D,KAAKO,aAAe0C,EAAA,OAAKC,MAAM,oBAAuB,MAGzDD,EAAA,OAAKC,MAAM,WAGZf,EACCQ,IAAc,GACZM,EAACG,SAAQ,KACNpD,KAAKO,cAAgBP,KAAKmD,eAAiBF,EAAA,OAAKC,MAAM,sBAA6B,KACpFD,EAAA,eACEQ,KAAMnB,EACNqB,MAAO3D,KAAKO,eAAiBsD,SAASvB,GAA0B,CAAEsB,QAAS,QAAW,GACtFV,MAAM,gBACNJ,QAASA,KAIbG,EAACG,SAAQ,KACNpD,KAAKO,aAAe0C,EAAA,OAAKC,MAAM,sBAA6B,KAC7DD,EAAA,yBAAuBQ,KAAMd,EAAWG,QAASA,KAGnD,KAEJG,EAACG,SAAQ,KACPH,EAAA,qBACEC,MAAM,eACNY,KAAK,QACLC,UAAU,OACVC,KAAM,CAAE,aAAc,gBACtBC,KAAK,QACLN,OAAQ3D,KAAKO,aAAe,GAAK,CAAEqD,QAAS,QAAQ,eACvC,eACbP,QAAS,WACPrB,EAAKvB,qBACLyD,QACAlC,EAAKmC,uBAAuBC,M,GAC7B,gBAIFpE,KAAKO,aAAe0C,EAAA,OAAKC,MAAM,oBAAuB,M,gIAvGxC,G"}