{"version":3,"names":["handleAnimationRouting","actions","OPENING","openingAction","CLOSING","closingAction","FORWARD","forwardAction","BACKWARDS","backwardAction","UNCHANGED","unchangedAction","conditionToExecute","getSingleDrawerAction","isOpening","isClosing","isAnimatingForward","isAnimatingBackward","animationManager","play","AnimationSequences","OPEN_SINGLE_DRAWER","nextRoute","currentRoute","getCurrentRoute","CLOSE_SINGLE_DRAWER","then","getAnimatedRoute","setTimeout","TRANSITION_NEXT_LEVEL_SINGLE_DRAWER","_a","_b","TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER","isPlayingSingleDrawerAnimation","singleDrawerAnimationSequences","some","sequence","isPlaying","e","_c","routerStore","state","routingKeyHistory","routingKeyPointer","animatingPointer","goTo","routes","_i","arguments","length","newHistory","__spreadArray","RoutingKeys","MAIN_MENU","back","findTopLevelRoutingKey","DEALER_SEARCH","dealerSearchResultsStore","savedDealerCookie","pop","isNavigatingBackwards","addRoute","newRoute","isDesktop","windowService","getBreakpoint","dispatchEvent","bubbles","cancelable","detail","constructRoutingKey","apply","reset","RoutingKeyPointers","LEVEL_ZERO","isOpened","isClosed","syncAnimation","showBackButton","section","sectionKey","indexOf","LEVEL_TWO"],"sources":["src/components/single-drawer/animations/animations-controller.ts","src/services/routing-manager.ts"],"sourcesContent":["import animationManager from '../../../services/animations/animation-manager';\nimport { AnimationSequences, AnimationSequencesType } from '../../../utility/constants';\nimport {\n  getAnimatedRoute,\n  getCurrentRoute,\n  isAnimatingBackward,\n  isAnimatingForward,\n  isClosing,\n  isOpening\n} from '../../../services/routing-manager';\n\nexport const handleAnimationRouting = (): AnimationRouting => {\n  const actions: Record<Operations, () => AnimationRouting> = {\n    OPENING: openingAction,\n    CLOSING: closingAction,\n    FORWARD: forwardAction,\n    BACKWARDS: backwardAction,\n    UNCHANGED: unchangedAction\n  };\n\n  const conditionToExecute = getSingleDrawerAction();\n\n  return actions[conditionToExecute]();\n};\n\ntype Operations = 'OPENING' | 'CLOSING' | 'FORWARD' | 'BACKWARDS' | 'UNCHANGED';\nfunction getSingleDrawerAction(): Operations {\n  if (isOpening()) {\n    return 'OPENING';\n  }\n  if (isClosing()) {\n    return 'CLOSING';\n  }\n  if (isAnimatingForward()) {\n    return 'FORWARD';\n  }\n  if (isAnimatingBackward()) {\n    return 'BACKWARDS';\n  }\n  return 'UNCHANGED';\n}\n\ntype AnimationRouting = { nextRoute: string; currentRoute: string };\n\nconst openingAction = (): AnimationRouting => {\n  animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);\n\n  return {\n    nextRoute: '',\n    currentRoute: getCurrentRoute()\n  };\n};\n\nconst closingAction = (): AnimationRouting => {\n  animationManager.play(AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {\n    // TODO: Focus on burger button if using the keyboard\n  });\n\n  return {\n    nextRoute: getCurrentRoute() || '',\n    currentRoute: getAnimatedRoute() || ''\n  };\n};\n\nconst forwardAction = (): AnimationRouting => {\n  setTimeout(() => {\n    animationManager.play(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);\n  });\n\n  return {\n    nextRoute: getCurrentRoute() ?? '',\n    currentRoute: getAnimatedRoute() ?? ''\n  };\n};\n\nconst backwardAction = (): AnimationRouting => {\n  if (getCurrentRoute() !== '') {\n    setTimeout(() => {\n      animationManager.play(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);\n    });\n  }\n\n  return {\n    nextRoute: getAnimatedRoute() ?? '',\n    currentRoute: getCurrentRoute() ?? ''\n  };\n};\n\nconst unchangedAction = (): AnimationRouting => {\n  return {\n    nextRoute: '',\n    currentRoute: getCurrentRoute()\n  };\n};\n\nexport const isPlayingSingleDrawerAnimation = (): boolean => {\n  try {\n    const singleDrawerAnimationSequences: AnimationSequencesType[] = [\n      AnimationSequences.OPEN_SINGLE_DRAWER,\n      AnimationSequences.CLOSE_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER\n    ];\n\n    return singleDrawerAnimationSequences.some((sequence) => {\n      try {\n        return animationManager.isPlaying(sequence);\n      } catch {\n        return false;\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n};\n","import { routerStore } from '../state/router-store';\nimport { constructRoutingKey, findTopLevelRoutingKey, RoutingKeyPointers, RoutingKeys } from '../entities/routing-key';\nimport { dispatchEvent, isDesktop } from '../utility/helper';\nimport windowService from './window-service';\nimport { dealerSearchResultsStore } from '../state/dealer-search-results-store';\nimport { isPlayingSingleDrawerAnimation } from '../components/single-drawer/animations/animations-controller';\n\nexport const getCurrentRoute = (): string => {\n  const { routingKeyHistory, routingKeyPointer } = routerStore.state;\n  return routingKeyHistory[routingKeyPointer] || '';\n};\n\nexport const getAnimatedRoute = (): string => {\n  const { routingKeyHistory, animatingPointer } = routerStore.state;\n  return routingKeyHistory[animatingPointer] || '';\n};\n\nexport const goTo = (...routes: string[]): void => {\n  const newHistory = [RoutingKeys.MAIN_MENU, ...routes];\n  routerStore.state.routingKeyPointer = routes.length;\n  routerStore.state.routingKeyHistory = newHistory;\n};\n\nexport const back = (): void => {\n  if (!isPlayingSingleDrawerAnimation()) {\n    if (findTopLevelRoutingKey(getCurrentRoute()) === RoutingKeys.DEALER_SEARCH) {\n      dealerSearchResultsStore.state.savedDealerCookie = null;\n    }\n    routerStore.state.routingKeyPointer = routerStore.state.routingKeyPointer - 1;\n  }\n};\n\nexport const pop = (): void => {\n  if (isNavigatingBackwards()) routerStore.state.routingKeyHistory.pop();\n};\n\nexport const addRoute = (newRoute: string[]): void => {\n  if (isDesktop(windowService.getBreakpoint())) {\n    dispatchEvent('phn-router', 'mobileMenuItemClick', {\n      bubbles: true,\n      cancelable: false,\n      detail: [constructRoutingKey(getCurrentRoute(), ...newRoute)]\n    });\n  } else {\n    const newHistory = [...routerStore.state.routingKeyHistory, constructRoutingKey(getCurrentRoute(), ...newRoute)];\n    routerStore.state.routingKeyPointer = newHistory.length - 1;\n    routerStore.state.routingKeyHistory = newHistory;\n  }\n};\n\nexport const reset = (): void => {\n  routerStore.state.routingKeyPointer = -1;\n};\n\nexport const isNavigatingBackwards = (): boolean => {\n  return routerStore.state.routingKeyPointer < routerStore.state.routingKeyHistory.length - 1;\n};\n\nexport const isAnimating = (): boolean => {\n  const { routingKeyPointer, animatingPointer } = routerStore.state;\n  return routingKeyPointer !== animatingPointer;\n};\n\n//____________ANIMATIONS______________//\n\nexport const isAnimatingForward = (): boolean => {\n  return routerStore.state.routingKeyPointer > routerStore.state.animatingPointer;\n};\n\nexport const isAnimatingBackward = (): boolean => {\n  return routerStore.state.routingKeyPointer < routerStore.state.animatingPointer;\n};\n\nexport const isOpening = (): boolean => {\n  return (\n    routerStore.state.animatingPointer === RoutingKeyPointers.LEVEL_ZERO && routerStore.state.routingKeyPointer >= 0\n  );\n};\n\nexport const isOpened = (): boolean => {\n  return !isClosed();\n};\n\nexport const isClosed = (): boolean => {\n  return (\n    routerStore.state.routingKeyPointer === RoutingKeyPointers.LEVEL_ZERO &&\n    routerStore.state.animatingPointer === RoutingKeyPointers.LEVEL_ZERO\n  );\n};\nexport const isClosing = (): boolean => {\n  return routerStore.state.routingKeyPointer === -1 && routerStore.state.animatingPointer >= 0;\n};\n\nexport const syncAnimation = () => {\n  routerStore.state.animatingPointer = routerStore.state.routingKeyPointer;\n};\n\nexport const showBackButton = (section: string): boolean => {\n  const sectionKey = routerStore.state.routingKeyHistory.indexOf(section);\n\n  return sectionKey >= RoutingKeyPointers.LEVEL_TWO;\n};\n"],"mappings":"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"}