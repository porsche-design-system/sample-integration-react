{"version":3,"names":["registerOpenSingleDrawerAnimation","_b","onAnimationStarts","onAnimationEnds","sequence","onStart","elementSelector","animation","className","cleanUpAfterAnimation","element","style","left","backgroundColor","opacity","onEnd","animationManager","register","AnimationSequences","OPEN_SINGLE_DRAWER","makeSequence","registerCloseSingleDrawerAnimation","cleanUpBeforeAnimation","CLOSE_SINGLE_DRAWER","registerTransitionNextLevelSingleDrawerAnimation","TRANSITION_NEXT_LEVEL_SINGLE_DRAWER","registerTransitionPreviousLevelSingleDrawerAnimation","TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER","isPlayingSingleDrawerAnimation","singleDrawerAnimationSequences","some","isPlaying","_a","e"],"sources":["src/components/single-drawer/single-drawer-animation-sequences.ts"],"sourcesContent":["import animationManager, {\n  AnimationEndsCallbacks,\n  AnimationStatusCallbacks,\n  makeSequence,\n  SequenceStep\n} from '../../services/animations/animation-manager';\nimport { AnimationSequences, AnimationSequencesType } from '../../utility/constants';\n\nexport const registerOpenSingleDrawerAnimation = ({\n  onAnimationStarts,\n  onAnimationEnds\n}: Required<AnimationStatusCallbacks>): void => {\n  const sequence: SequenceStep[] = [\n    [\n      {\n        onStart: onAnimationStarts,\n        elementSelector: 'phn-single-drawer',\n        animation: {\n          className: 'slide-in-from-left',\n          cleanUpAfterAnimation: (element) => {\n            element.style.left = '0px';\n          }\n        }\n      },\n      {\n        elementSelector: 'phn-backdrop',\n        animation: {\n          className: 'fade-in-animation',\n          cleanUpAfterAnimation: (element) => {\n            element.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';\n            element.style.opacity = '1';\n          }\n        },\n        onEnd: onAnimationEnds\n      }\n    ]\n  ];\n\n  animationManager.register(AnimationSequences.OPEN_SINGLE_DRAWER, makeSequence(sequence));\n};\n\nexport const registerCloseSingleDrawerAnimation = ({\n  onAnimationStarts,\n  onAnimationEnds\n}: Required<AnimationStatusCallbacks>): void => {\n  const sequence: SequenceStep[] = [\n    [\n      {\n        onStart: onAnimationStarts,\n        elementSelector: 'phn-single-drawer',\n        animation: {\n          className: 'slide-out-to-left',\n          cleanUpBeforeAnimation: (element) => {\n            element.style.left = '';\n          },\n          cleanUpAfterAnimation: (element) => {\n            element.style.left = '-1000px';\n          }\n        }\n      },\n      {\n        elementSelector: 'phn-backdrop',\n        animation: {\n          className: 'fade-out-animation',\n          cleanUpBeforeAnimation: (element) => {\n            element.style.backgroundColor = '';\n            element.style.opacity = '';\n          }\n        },\n        onEnd: onAnimationEnds\n      }\n    ]\n  ];\n\n  animationManager.register(AnimationSequences.CLOSE_SINGLE_DRAWER, makeSequence(sequence));\n};\n\nexport const registerTransitionNextLevelSingleDrawerAnimation = ({ onAnimationEnds }: AnimationEndsCallbacks): void => {\n  animationManager.register(\n    AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n    makeSequence([\n      [\n        {\n          elementSelector: 'phn-single-drawer .drawer.animating',\n          animation: {\n            className: 'slide-in-from-right-fixed'\n          },\n          onEnd: onAnimationEnds\n        }\n      ]\n    ])\n  );\n};\n\nexport const registerTransitionPreviousLevelSingleDrawerAnimation = ({\n  onAnimationEnds\n}: AnimationEndsCallbacks): void => {\n  animationManager.register(\n    AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER,\n    makeSequence([\n      [\n        {\n          elementSelector: 'phn-single-drawer .drawer.animating',\n          animation: {\n            className: 'slide-out-to-right-fixed'\n          },\n          onEnd: onAnimationEnds\n        }\n      ]\n    ])\n  );\n};\n\nexport const isPlayingSingleDrawerAnimation = (): boolean => {\n  try {\n    const singleDrawerAnimationSequences: AnimationSequencesType[] = [\n      AnimationSequences.OPEN_SINGLE_DRAWER,\n      AnimationSequences.CLOSE_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER\n    ];\n\n    return singleDrawerAnimationSequences.some((sequence) => {\n      try {\n        return animationManager.isPlaying(sequence);\n      } catch {\n        return false;\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n};\n"],"mappings":"uJAQaA,kCAAoC,SAACC,G,IAChDC,EAAiBD,EAAAC,kBACjBC,EAAeF,EAAAE,gBAEf,IAAMC,EAA2B,CAC/B,CACE,CACEC,QAASH,EACTI,gBAAiB,oBACjBC,UAAW,CACTC,UAAW,qBACXC,sBAAuB,SAACC,GACtBA,EAAQC,MAAMC,KAAO,K,IAI3B,CACEN,gBAAiB,eACjBC,UAAW,CACTC,UAAW,oBACXC,sBAAuB,SAACC,GACtBA,EAAQC,MAAME,gBAAkB,qBAChCH,EAAQC,MAAMG,QAAU,G,GAG5BC,MAAOZ,KAKba,iBAAiBC,SAASC,mBAAmBC,mBAAoBC,aAAahB,GAChF,E,IAEaiB,mCAAqC,SAACpB,G,IACjDC,EAAiBD,EAAAC,kBACjBC,EAAeF,EAAAE,gBAEf,IAAMC,EAA2B,CAC/B,CACE,CACEC,QAASH,EACTI,gBAAiB,oBACjBC,UAAW,CACTC,UAAW,oBACXc,uBAAwB,SAACZ,GACvBA,EAAQC,MAAMC,KAAO,E,EAEvBH,sBAAuB,SAACC,GACtBA,EAAQC,MAAMC,KAAO,S,IAI3B,CACEN,gBAAiB,eACjBC,UAAW,CACTC,UAAW,qBACXc,uBAAwB,SAACZ,GACvBA,EAAQC,MAAME,gBAAkB,GAChCH,EAAQC,MAAMG,QAAU,E,GAG5BC,MAAOZ,KAKba,iBAAiBC,SAASC,mBAAmBK,oBAAqBH,aAAahB,GACjF,E,IAEaoB,iDAAmD,SAACvB,G,IAAEE,EAAeF,EAAAE,gBAChFa,iBAAiBC,SACfC,mBAAmBO,oCACnBL,aAAa,CACX,CACE,CACEd,gBAAiB,sCACjBC,UAAW,CACTC,UAAW,6BAEbO,MAAOZ,MAKjB,E,IAEauB,qDAAuD,SAACzB,G,IACnEE,EAAeF,EAAAE,gBAEfa,iBAAiBC,SACfC,mBAAmBS,wCACnBP,aAAa,CACX,CACE,CACEd,gBAAiB,sCACjBC,UAAW,CACTC,UAAW,4BAEbO,MAAOZ,MAKjB,E,IAEayB,+BAAiC,WAC5C,IACE,IAAMC,EAA2D,CAC/DX,mBAAmBC,mBACnBD,mBAAmBK,oBACnBL,mBAAmBO,oCACnBP,mBAAmBS,yCAGrB,OAAOE,EAA+BC,MAAK,SAAC1B,GAC1C,IACE,OAAOY,iBAAiBe,UAAU3B,E,CAClC,MAAA4B,GACA,OAAO,K,KAGX,MAAOC,GACP,OAAO,K,CAEX,S"}