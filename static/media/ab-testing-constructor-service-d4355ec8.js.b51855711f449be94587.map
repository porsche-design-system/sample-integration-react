{"version":3,"names":["experimentsDefinitions","MatomoAbTestingService","this","client","experiments","prototype","init","featureToggles","isABTestingToggleActive","setClient","_a","sent","loadExperiments","Logger","error","e_1","execute","experimentName","experiment","getExperiment","variation","getVariation","activate","e","concat","executeContentChange","menu","experienceName","name","children","Promise","resolve","injectScript","w","window","Matomo","getClient","ExperimentCreator","AbTesting","Experiment","getAbTestingDefinitions","experimentKey","experimentDefinition","push","loadContentGeneratorExperiments","contentDefinitions","navContentStore","state","abExperiences","_i","contentDefinitions_1","length","variationDefinition","variations","map","Object","assign","find","NaviError","NaviErrorTypes","GENERAL","variationName","getActivatedVariationName","_this","reject","s","document","createElement","text","getMatomoScript","head","appendChild","matomoScript","getHTMLElement","querySelector","onload","onerror","currentEnvironment","navStateStore","env","MatomoAbTesting","abTestingService"],"sources":["src/utility/constants/ab-testing.ts","src/services/ab-testing/matomo-ab-testing-service.ts","src/services/ab-testing/ab-testing-constructor-service.ts"],"sourcesContent":["export type ExperimentDefinition = Record<string, unknown>;\n\nexport type AvailableExperiment = (typeof experimentsDefinitions)[keyof typeof experimentsDefinitions];\n\nexport const experimentsDefinitions: ExperimentDefinition = {};\n\nexport interface MatomoClient {\n  track: () => void;\n  AbTesting: {\n    Experiment: { new (definition: unknown): Experiment };\n  };\n}\n\nexport interface Experiment {\n  name: string;\n  getActivatedVariationName: () => string;\n  variations: Variation[];\n}\n\nexport interface Variation {\n  name: string;\n  activate: () => unknown;\n}\n","import { navStateStore } from '../../state/nav-state-store';\nimport { NaviError, NaviErrorTypes } from '../../utility/navi-error';\nimport { IAbTestingService } from './ab-testing-service.interface';\nimport {\n  AvailableExperiment,\n  Experiment,\n  experimentsDefinitions,\n  MatomoClient,\n  Variation\n} from '../../utility/constants/ab-testing';\nimport Logger from '../logger';\nimport { getHTMLElement } from '../../utility/helper';\nimport featureToggles from '../feature-toggles';\nimport { TMenu, VariationDefinition } from '../../entities/content';\nimport { navContentStore } from '../../state/nav-content-store';\n\nexport class MatomoAbTestingService implements IAbTestingService {\n  client: MatomoClient | null = null;\n  experiments: Experiment[] = [];\n\n  async init(): Promise<void> {\n    if (featureToggles.isABTestingToggleActive()) {\n      try {\n        await this.setClient();\n        await this.loadExperiments();\n      } catch (e) {\n        Logger.error('Could not initialize AbTesting', e as Error);\n      }\n    }\n  }\n\n  execute(experimentName: AvailableExperiment): void {\n    if (featureToggles.isABTestingToggleActive()) {\n      try {\n        const experiment = this.getExperiment(experimentName);\n        const variation = this.getVariation(experiment);\n        variation.activate();\n      } catch (e) {\n        Logger.error(`Could not execute experiment ${experimentName}`, e as Error);\n      }\n    }\n  }\n\n  executeContentChange(menu: TMenu): TMenu[] {\n    if (featureToggles.isABTestingToggleActive()) {\n      try {\n        const experiment = this.getExperiment(menu.experienceName);\n        const variation = this.getVariation(experiment);\n        if (variation.name === 'original') {\n          return menu.children;\n        }\n        return variation.activate() as unknown as TMenu[];\n      } catch (e) {\n        Logger.error(`Could not execute experiment ${menu.experienceName}`, e as Error);\n      }\n    }\n    return menu.children;\n  }\n\n  private async setClient(): Promise<MatomoClient> {\n    if (this.client) return Promise.resolve(this.client);\n\n    await this.injectScript();\n    const w = window as any;\n    this.client = w.Matomo as MatomoClient;\n    return this.client;\n  }\n\n  private async loadExperiments(): Promise<void> {\n    const client = this.getClient();\n    const ExperimentCreator = client.AbTesting.Experiment;\n    const experimentsDefinitions = this.getAbTestingDefinitions();\n    for (const experimentKey in experimentsDefinitions) {\n      const experimentDefinition = experimentsDefinitions[experimentKey];\n      const experiment = new ExperimentCreator(experimentDefinition);\n      this.experiments.push(experiment);\n    }\n  }\n\n  async loadContentGeneratorExperiments(): Promise<void> {\n    if (featureToggles.isABTestingToggleActive()) {\n      const client = this.getClient();\n      const ExperimentCreator = client.AbTesting.Experiment;\n      const contentDefinitions = navContentStore.state.abExperiences;\n\n      if (contentDefinitions) {\n        for (const experimentDefinition of contentDefinitions) {\n          const variationDefinition: Variation[] = experimentDefinition.variations.map(\n            (variation: VariationDefinition) => ({\n              name: variation.name,\n              activate: () => variation.children\n            })\n          );\n          variationDefinition.push({\n            name: 'original',\n            activate: () => null\n          });\n          const experiment = new ExperimentCreator({ ...experimentDefinition, variations: variationDefinition });\n          this.experiments.push(experiment);\n        }\n      }\n    }\n  }\n\n  private getExperiment(name: AvailableExperiment): Experiment {\n    const experiment = this.experiments.find((experiment) => experiment.name === name);\n    if (!experiment) throw new NaviError(`No experiment with name: ${name} found`, NaviErrorTypes.GENERAL);\n    return experiment;\n  }\n\n  private getVariation(experiment: Experiment): Variation {\n    const variationName = experiment.getActivatedVariationName();\n    const variation = experiment.variations.find((variation) => variation.name === variationName);\n\n    if (!variation)\n      throw new NaviError(\n        `No variation in experiment: ${experiment.name} with name: ${variationName} found`,\n        NaviErrorTypes.GENERAL\n      );\n    return variation;\n  }\n\n  private getClient(): MatomoClient {\n    if (!this.client) throw new NaviError('No client is set, you must call init first', NaviErrorTypes.GENERAL);\n    return this.client;\n  }\n\n  private injectScript(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      const s = document.createElement('script');\n      s.text = this.getMatomoScript();\n      document.head.appendChild(s);\n\n      const matomoScript = getHTMLElement(\n        document.querySelector('script[src=\"//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js\"]')\n      );\n\n      if (matomoScript) {\n        matomoScript.onload = () => {\n          resolve(true);\n        };\n        matomoScript.onerror = () => reject(new NaviError('Could not inject Matomo script', NaviErrorTypes.GENERAL));\n      } else {\n        reject(new NaviError('There is no HTML Script element available', NaviErrorTypes.GENERAL));\n      }\n    });\n  }\n\n  private getAbTestingDefinitions() {\n    return experimentsDefinitions;\n  }\n\n  private getMatomoScript(): string {\n    const currentEnvironment = navStateStore.state.env;\n    return `var _paq = window._paq = window._paq || [];\n    _paq.push(['trackPageView']);\n    _paq.push(['enableLinkTracking']);\n    (function() {\n      var u=\"https://porsche.matomo.cloud/\";\n      _paq.push(['setTrackerUrl', u+'matomo.php']);\n      _paq.push(['setSiteId', ${currentEnvironment === 'production' ? '7' : '8'}]);\n      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n      g.async=true; g.src='//cdn.matomo.cloud/porsche.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);\n    })\n   ();`;\n  }\n}\n\nexport const MatomoAbTesting = new MatomoAbTestingService();\n","import { IAbTestingService } from './ab-testing-service.interface';\nimport { MatomoAbTesting } from './matomo-ab-testing-service';\n\nexport default function abTestingService(): IAbTestingService {\n  return MatomoAbTesting;\n}\n"],"mappings":"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"}