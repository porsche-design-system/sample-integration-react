{"version":3,"file":"static/js/6866.ba996f1d.chunk.js","mappings":"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","sources":["../node_modules/@porschehn/navigation/dist/esm-es5/src/services/animations/animation-manager.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/constants/animations.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/helpers/dealer-search-helper.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/services/dealer-service.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/autocomplete-search-field/autocomplete-search-field.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/autocomplete-search-field/autocomplete-search-field.scss?tag=phn-autocomplete-search-field&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-details-drawer/dealer-details-drawer.scss?tag=phn-dealer-details-drawer&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-details-drawer/dealer-details-drawer.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form/error-message.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.scss?tag=phn-dealer-search-by-number-of-dealers&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.scss?tag=phn-dealer-search-form-dropdown&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/services/maps-service.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-form-item-card.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-map-link.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.scss?tag=phn-dealer-search-form-geolocation&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-results.scss?tag=phn-dealer-search-results&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-results.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/menu-item-card/menu-item-card.scss?tag=phn-menu-item-card&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/menu-item-card/menu-item-card.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/myporsche-login/myporsche-login.scss?tag=phn-myporsche-login&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/myporsche-login/myporsche-login.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/ready.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/single-drawer/animations/animations-controller.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/services/routing-manager.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/timeout.ts"],"sourcesContent":["import { AnimationSequencesType } from '../../utility/constants';\nimport { getHTMLElement, getRootElement, isPromise } from '../../utility/helper';\n\nexport type AnimationStartsCallbacks = {\n  onAnimationStarts?: (() => Promise<unknown>) | (() => void);\n};\n\nexport type AnimationEndsCallbacks = {\n  onAnimationEnds?: (() => Promise<unknown>) | (() => void);\n};\n\nexport type AnimationStatusCallbacks = AnimationStartsCallbacks & AnimationEndsCallbacks;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type SequenceIdentifier = AnimationSequencesType | (string & {});\n\nexport interface NaviAnimation {\n  animation: AnimationGeneratorType;\n  elementSelector: string;\n  onStart?: (() => Promise<unknown>) | (() => unknown);\n  onEnd?: (() => Promise<unknown>) | (() => unknown);\n}\n\nexport type SequenceStep = Array<NaviAnimation>;\n\nexport type AnimationSequence = {\n  steps: Array<SequenceStep>;\n  currentStepIndex: number;\n  running: boolean;\n  resolve?: (value: unknown) => void;\n  reject?: (reason?: unknown) => void;\n  promise?: Promise<void>;\n};\n\nexport type AnimationGeneratorType = {\n  className: string;\n  cleanUpBeforeAnimation?: ((el: HTMLElement) => Promise<void>) | ((el: HTMLElement) => void) | boolean;\n  cleanUpAfterAnimation?: ((el: HTMLElement) => Promise<void>) | ((el: HTMLElement) => void) | boolean;\n};\n\nconst animationRegistry: Record<\n  string,\n  {\n    promise: Promise<void>;\n    resolve: (value: void) => void;\n    reject: (reason?: unknown) => void;\n    animation: AnimationGeneratorType;\n    timeout: NodeJS.Timeout;\n  }\n> = {};\n\nconst sequences: {\n  [key in SequenceIdentifier]?: AnimationSequence | undefined;\n} = {};\n\nconst animationTimeoutDurationMs = 1000;\n\nfunction initialize(): void {\n  getRootElement().addEventListener('transitionend', animationEndListener);\n  getRootElement().addEventListener('animationend', animationEndListener);\n}\n\nfunction register(sequenceIdentifier: SequenceIdentifier, animationSequence: AnimationSequence): void {\n  sequences[sequenceIdentifier] = animationSequence;\n}\n\nfunction reset(): void {\n  Object.keys(sequences).forEach((key) => delete sequences[key]);\n}\n\nasync function play(sequenceIdentifier: SequenceIdentifier): Promise<unknown> {\n  const sequence = sequences[sequenceIdentifier];\n\n  if (sequence === undefined) {\n    return new Promise((_, reject) => reject(new Error(`Sequence ${sequenceIdentifier} has not been registered`)));\n  }\n\n  if (!sequence.running) {\n    sequence.promise = new Promise<void>((resolve, reject) => {\n      sequence.resolve = () => {\n        sequence.running = false;\n        resolve();\n      };\n\n      sequence.reject = (value: unknown) => {\n        sequence.running = false;\n        reject(value);\n      };\n\n      sequence.running = true;\n\n      applyCurrentAnimationSequenceStep(sequence);\n    });\n  }\n\n  return sequence.promise;\n}\n\nasync function applyCurrentAnimationSequenceStep(sequence: AnimationSequence) {\n  if (sequence.currentStepIndex >= sequence.steps.length) {\n    finishAnimationSequence(sequence);\n    return;\n  }\n\n  const sequenceStep = sequence.steps[sequence.currentStepIndex];\n\n  const promises = [];\n  for (const animation of sequenceStep) {\n    promises.push(executeAnimation(animation));\n  }\n\n  try {\n    await Promise.all(promises);\n  } catch (error) {\n    sequence.reject?.(error);\n    return;\n  }\n\n  sequence.currentStepIndex += 1;\n\n  setTimeout(() => applyCurrentAnimationSequenceStep(sequence), 0);\n}\n\nfunction finishAnimationSequence(sequence: AnimationSequence) {\n  sequence.currentStepIndex = 0;\n  sequence.resolve?.(null);\n  sequence.promise = undefined;\n}\n\nfunction animationEndListener(event: AnimationEvent | TransitionEvent): void {\n  const target = getHTMLElement(event.target);\n\n  if (target === null) {\n    throw new Error(`${event.type} event target is null`);\n  }\n\n  const id = target.dataset.phnAmId;\n\n  if (id !== undefined && id !== null) {\n    finishAnimationPromise(id, target);\n  }\n}\n\nasync function executeAnimation({ onStart, onEnd, animation, elementSelector }: NaviAnimation): Promise<void> {\n  if (onStart) {\n    const maybePromise = onStart();\n    if (isPromise<void>(maybePromise)) {\n      await maybePromise;\n    }\n  }\n\n  const animatedElements: HTMLElement[] = Array.from(getRootElement().querySelectorAll(elementSelector));\n  const animationExecutors = [];\n\n  for (const element of animatedElements) {\n    const animationPromiseEffect = generateAndCleanUpAnimationPromise(animationPromiseGenerator)(element, animation);\n    animationExecutors.push(animationPromiseEffect);\n  }\n\n  await Promise.all(animationExecutors);\n  if (onEnd) {\n    const maybePromise = onEnd();\n    if (isPromise<void>(maybePromise)) {\n      await maybePromise;\n    }\n  }\n}\n\nfunction generateAndCleanUpAnimationPromise(\n  animationPromiseGenerator: (element: HTMLElement, animation: AnimationGeneratorType) => Promise<void>\n): (element: HTMLElement, animation: AnimationGeneratorType) => Promise<void> {\n  return async function (element: HTMLElement, animation: AnimationGeneratorType): Promise<void> {\n    const { cleanUpBeforeAnimation, cleanUpAfterAnimation } = animation;\n\n    const animationPromise = animationPromiseGenerator(element, animation);\n\n    if (typeof cleanUpBeforeAnimation === 'function') {\n      const maybePromise: void | Promise<void> = cleanUpBeforeAnimation(element);\n      if (isPromise<void>(maybePromise)) {\n        await maybePromise;\n      }\n    }\n\n    await animationPromise;\n\n    if (typeof cleanUpAfterAnimation === 'function') {\n      const maybePromise: void | Promise<void> = cleanUpAfterAnimation(element);\n      if (isPromise<void>(maybePromise)) {\n        await maybePromise;\n      }\n    }\n\n    if (cleanUpAfterAnimation !== false) {\n      // only not remove class if cleanUpAfterAnimation is explicitely set to false\n      element.classList.remove(animation.className);\n    }\n  };\n}\n\nconst animationPromiseGenerator = (element: HTMLElement, animation: AnimationGeneratorType): Promise<void> => {\n  const id = Math.floor(Math.random() * 1e7);\n\n  element.classList.add(animation.className);\n  element.dataset.phnAmId = id.toString();\n\n  let resolve!: (value: void) => void;\n  let reject!: (reason?: unknown) => void;\n  let timeout!: NodeJS.Timeout;\n  const promise = new Promise<void>((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n\n    timeout = setTimeout(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Animation with className ${animation.className} didn't finish after ${animationTimeoutDurationMs}ms. Forcefully finishing animation and continuing with the rest of the sequence.`\n      );\n      finishAnimationPromise(String(id), element);\n    }, animationTimeoutDurationMs);\n  });\n\n  animationRegistry[id] = { animation, resolve, reject, promise, timeout };\n\n  return promise;\n};\n\nfunction finishAnimationPromise(phnAmId: string, target: HTMLElement): void {\n  const { resolve, timeout } = animationRegistry[phnAmId];\n\n  clearTimeout(timeout);\n  delete animationRegistry[phnAmId];\n  delete target.dataset.phnAmId;\n\n  resolve();\n}\n\nfunction isPlaying(sequenceIdentifier: SequenceIdentifier): boolean {\n  const sequence = sequences[sequenceIdentifier];\n\n  if (sequence === undefined) {\n    throw new Error(`Sequence ${sequenceIdentifier} has not been registered`);\n  }\n\n  return sequence.promise !== undefined;\n}\n\nfunction makeSequence(\n  sequenceSteps: SequenceStep[],\n  animationDefaults?: Partial<Omit<AnimationGeneratorType, 'name'>>\n): AnimationSequence {\n  return {\n    steps: sequenceSteps.map((step) => step.map((animation) => ({ ...animationDefaults, ...animation }))),\n    currentStepIndex: 0,\n    running: false\n  };\n}\n\nexport default {\n  initialize,\n  play,\n  isPlaying,\n  register,\n  reset\n};\n\nexport { makeSequence };\n","export const AnimationSequences = {\n  OPEN_DOUBLE_DRAWER: 'openDoubleDrawer',\n  CLOSE_DOUBLE_DRAWER: 'closeDoubleDrawer',\n  TRANSITION_SAME_LEVEL_DOUBLE_DRAWER: 'transitionSameLevelDoubleDrawer',\n  TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE: 'transitionSameLevelDoubleDrawerReverse',\n  TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER: 'transitionNextLevelDoubleDrawer',\n  TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER: 'transitionPreviousLevelDoubleDrawer',\n  OPEN_SINGLE_DRAWER: 'openSingleDrawer',\n  CLOSE_SINGLE_DRAWER: 'closeSingleDrawer',\n  TRANSITION_NEXT_LEVEL_SINGLE_DRAWER: 'transitionNextLevelSingleDrawer',\n  TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER: 'transitionPreviousLevelSingleDrawer'\n} as const;\n\nexport type AnimationSequencesType = (typeof AnimationSequences)[keyof typeof AnimationSequences];\n\nexport const AnimationDurations = {\n  highlight: 200,\n  drawerContent: 250,\n  drawer: 400,\n  backdrop: 400,\n  drawerOpen: 600\n};\n","import { OpenHours } from '../../entities/dealer-response';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { OpeningHours } from '../../entities/content';\nimport { isString } from '../helper';\n\nexport function showDealerSearchDropdown(country: string): boolean {\n  const countriesWithDropdown = ['CN'];\n\n  return countriesWithDropdown.includes(country);\n}\n\nexport function getRegionSpecificCountry(country: string): string {\n  return country.includes('-') ? country.split('-')[0] : country;\n}\n\nexport function sanitizeDealerHomepage(originalUrl: string): string {\n  if (!originalUrl.startsWith('https://')) {\n    return `http://${originalUrl}`;\n  }\n\n  return originalUrl;\n}\n\nexport function getOpeningHours(openingHoursData: OpenHours[]): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  if (!openingHours) {\n    return '';\n  }\n\n  const WEEK_DAYS = [\n    openingHours.monday,\n    openingHours.tuesday,\n    openingHours.wednesday,\n    openingHours.thursday,\n    openingHours.friday,\n    openingHours.saturday,\n    openingHours.sunday\n  ];\n\n  const openingHoursMap = getOpeningHoursMap(openingHours, openingHoursData);\n  const result: string[] = [];\n  let previousOpeningHours = '';\n  let previousDayIndex = -1;\n  let consecutiveDays: string[] = [];\n\n  for (const day of WEEK_DAYS) {\n    const currentDayIndex = WEEK_DAYS.indexOf(day);\n    const openHours = openingHoursMap.get(day);\n    const openingHoursString = getOpeningHoursString(openHours);\n\n    if (openingHoursString !== '') {\n      if (previousOpeningHours === '') {\n        previousOpeningHours = openingHoursString;\n        consecutiveDays.push(day);\n      } else if (previousOpeningHours !== openingHoursString || previousDayIndex !== currentDayIndex - 1) {\n        result.push(getDayRange(consecutiveDays, previousOpeningHours));\n        consecutiveDays = [day];\n        previousOpeningHours = openingHoursString;\n      } else {\n        consecutiveDays.push(day);\n      }\n      previousDayIndex = currentDayIndex;\n    }\n  }\n\n  if (previousOpeningHours !== '') {\n    result.push(getDayRange(consecutiveDays, previousOpeningHours));\n  }\n\n  return result.join('\\n');\n}\n\nfunction getDayRange(days: string[], openingHoursString: string) {\n  if (days.length === 1) {\n    return `${days[0]}: ${openingHoursString}`;\n  }\n  return `${days[0]} - ${days[days.length - 1]}: ${openingHoursString}`;\n}\n\nfunction getOpeningHoursMap(openingHours: OpeningHours, openingHoursData: OpenHours[]) {\n  const openingHoursMap: Map<string, { open: string; close: string }> = new Map();\n\n  for (const item of openingHoursData) {\n    const day = openingHours[item.day.toLowerCase() as keyof OpeningHours];\n\n    if (isString(day)) {\n      openingHoursMap.set(day, { open: item.open, close: item.close });\n    }\n  }\n\n  return openingHoursMap;\n}\n\nfunction getOpeningHoursString(openHours: { open: string; close: string } | undefined): string {\n  return openHours && openHours.open !== '' && openHours.close !== '' ? getTimeFormat(openHours) : '';\n}\n\nfunction getTimeFormat(openHours: { open: string; close: string }): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  const timeFormat = openingHours?.timeFormat === 12;\n\n  return `${convertToLocalTime(openHours.open, timeFormat)} - ${convertToLocalTime(openHours.close, timeFormat)}`;\n}\n\nfunction convertToLocalTime(time: string, timeFormat = false) {\n  const [hour, minute] = time.split(':').map(Number);\n  const date = new Date(0, 0, 0, hour, minute);\n\n  return date\n    .toLocaleString(undefined, {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: timeFormat\n    })\n    .toUpperCase();\n}\n","import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n","import { Component, EventEmitter, h, Prop, State, Event, getAssetPath, Element, Listen, Watch } from '@stencil/core';\nimport { Prediction } from '../../entities/places';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getConfig, getHTMLInputElement, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\n\n@Component({\n  tag: 'phn-autocomplete-search-field',\n  styleUrl: 'autocomplete-search-field.scss',\n  scoped: true\n})\nexport class AutocompleteSearchField {\n  @Prop() placeholder!: string;\n  @Prop() predictions!: Prediction[];\n  @Prop() initialValue = '';\n  @Prop() errorState = '';\n  @Prop() errorMessage = '';\n\n  @State() showPredictions = false;\n  @State() highlightedPredictionIndex = -1;\n  @State() searchterm = this.initialValue;\n\n  @Event() searchInput!: EventEmitter<string>;\n  @Event() clearSearch!: EventEmitter<void>;\n  @Event() submitSearch!: EventEmitter<Prediction | null>;\n  @Event() predictionsToggle!: EventEmitter<boolean>;\n  @Event() autoCompleteLoaded!: EventEmitter<boolean>;\n\n  @Element() el!: HTMLPhnAutocompleteSearchFieldElement;\n\n  @Listen('click', { passive: true, target: 'window' })\n  clickListener(e: MouseEvent): void {\n    this.showPredictions =\n      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;\n  }\n\n  @Listen('keydown', { passive: false })\n  keydownListener(e: KeyboardEvent): void {\n    if (e.key === 'Escape' && this.showPredictions) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.showPredictions = false;\n    }\n  }\n\n  @Watch('showPredictions')\n  watchShowPredictions(newValue: boolean): void {\n    this.predictionsToggle.emit(newValue);\n  }\n\n  @Watch('initialValue')\n  watchInitialValue(): void {\n    this.searchterm = this.initialValue;\n  }\n\n  componentDidRender(): void {\n    this.autoCompleteLoaded.emit(true);\n  }\n\n  private onKeyDown(pressedKey: string): void {\n    if (this.predictions.length === 0) return;\n\n    switch (pressedKey) {\n      case 'ArrowDown':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex === this.predictions.length - 1) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        }\n        this.highlightedPredictionIndex++;\n        break;\n\n      case 'ArrowUp':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex < 0) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        } else if (this.highlightedPredictionIndex === 0) {\n          this.highlightedPredictionIndex = this.predictions.length - 1;\n          break;\n        }\n        this.highlightedPredictionIndex--;\n        break;\n    }\n\n    if (this.highlightedPredictionIndex > -1) {\n      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;\n    }\n  }\n\n  private onSubmit() {\n    const prediction =\n      this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];\n    this.submitSearch.emit(prediction ?? null);\n    this.showPredictions = false;\n    if (prediction !== undefined) this.searchterm = prediction.text;\n  }\n\n  render(): HTMLPhnAutocompleteSearchFieldElement {\n    return (\n      <form\n        class=\"form-container\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n      >\n        <phn-p-text-field-wrapper\n          data-test-id=\"dealer-search-form-input\"\n          state={isString(this.errorMessage) ? 'error' : 'none'}\n          message={this.errorMessage}\n        >\n          <input\n            class=\"autofocus\"\n            aria-label=\"Find a dealer by typing a city name or zip code\"\n            type=\"search\"\n            placeholder={this.placeholder}\n            autocomplete=\"off\"\n            role=\"combobox\"\n            data-validate=\"required\"\n            aria-expanded={(this.predictions.length > 0 && this.showPredictions).toString()}\n            aria-controls=\"predictions\"\n            aria-autocomplete=\"list\"\n            aria-activedescendant={this.showPredictions ? String(this.highlightedPredictionIndex) : undefined}\n            value={this.searchterm}\n            onInput={(event: Event) => {\n              event.preventDefault();\n\n              this.showPredictions = true;\n              this.highlightedPredictionIndex = -1;\n\n              const value = getHTMLInputElement(event.target)?.value;\n\n              if (!isString(value)) {\n                this.searchterm = '';\n                this.showPredictions = false;\n                dealerSearchResultsStore.state.savedDealerCookie = null;\n                this.clearSearch.emit();\n                return;\n              }\n\n              this.searchInput.emit(value);\n            }}\n            onKeyDown={(event: KeyboardEvent) => {\n              this.onKeyDown(event.key);\n            }}\n          />\n        </phn-p-text-field-wrapper>\n\n        {this.predictions.length > 0 && this.showPredictions ? (\n          <div class=\"prediction-container\">\n            <ul\n              id=\"predictions\"\n              data-test-id=\"dealer-search-autocomplete-predictions\"\n              role=\"listbox\"\n              aria-label=\"List of location predictions\"\n            >\n              {this.predictions.map((prediction, index) => (\n                <li\n                  key={prediction.id}\n                  class={index === this.highlightedPredictionIndex ? 'highlighted-prediction' : ''}\n                  role=\"option\"\n                  aria-selected={String(index === this.highlightedPredictionIndex)}\n                  id={String(index)}\n                  onClick={() => {\n                    this.highlightedPredictionIndex = index;\n                    this.onSubmit();\n                  }}\n                  onKeyDown={(event: KeyboardEvent) => {\n                    // TODO: does this code ever get executed?\n                    if (event.key === 'Enter') {\n                      this.onSubmit();\n                    }\n                  }}\n                >\n                  <phn-p-text color=\"inherit\">{prediction.text}</phn-p-text>\n                </li>\n              ))}\n            </ul>\n            <img\n              class=\"powered-by-google\"\n              src={getAssetPath(\n                `${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`\n              )}\n              alt=\"powered by Google\"\n            />\n          </div>\n        ) : null}\n      </form>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  .form-container {\n    display: block;\n    position: relative;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    box-sizing: border-box;\n\n    phn-p-text-field-wrapper {\n      width: 100%;\n\n      input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }\n      input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }\n      input[type=\"search\"]::-webkit-search-decoration,\n      input[type=\"search\"]::-webkit-search-cancel-button,\n      input[type=\"search\"]::-webkit-search-results-button,\n      input[type=\"search\"]::-webkit-search-results-decoration { display: none; }\n    }\n\n    &.inline-search-form {\n      margin-right: p-px-to-rem(16px);\n    }\n  }\n\n  .prediction-container {\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 10;\n    width: 100%;\n\n    background-color: white;\n    border: 1px solid $pds-theme-light-contrast-low;\n\n    ul {\n      margin-block: 0;\n      margin-inline: 0;\n      padding-inline: 0;\n      list-style-type: none;\n\n      li {\n        padding-left: p-px-to-rem(12px);\n        padding: p-px-to-rem(8px) 0 p-px-to-rem(8px) p-px-to-rem(12px);\n        color: $pds-theme-light-primary;\n\n        &:hover {\n          color: $pds-theme-light-notification-info;\n          background-color: $pds-theme-light-background-surface;\n        }\n\n        &.highlighted-prediction {\n          color: $pds-theme-light-notification-info;\n        }\n      }\n    }\n\n    .powered-by-google {\n      margin: p-px-to-rem(12px) 0 p-px-to-rem(12px) p-px-to-rem(12px);\n    }\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  margin-top: p-px-to-rem(26px);\n\n  @include pds-media-query-min('s') {\n    margin-top: p-px-to-rem(-2px);\n  }\n\n  @include pds-media-query-min('l') {\n    margin-top: p-px-to-rem(-3px);\n  }\n\n  @include pds-media-query-min('xxl') {\n    margin-top: p-px-to-rem(-7px);\n  }\n\n  .skeleton-headline {\n    width: auto;\n    height: p-px-to-rem(50px);\n    background: $pds-theme-light-contrast-low;\n    margin-bottom:  p-px-to-rem(28px);\n    border-radius: 4px;\n  }\n\n  phn-p-heading{\n    margin-bottom: p-px-to-rem(24px);\n  }\n\n  phn-menu-item {\n    margin-top: p-px-to-rem(24px);\n\n    &:first-of-type {\n      margin-top: p-px-to-rem(14px);\n    }\n  }\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    &.skeleton-menu-item {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { getDealerDetailsRoutingKey } from '../../entities/routing-key';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { DEALER_SEARCH_DISPLAY_ELEMENT_ID, EventAction, EventActions, MenuItemVariant } from '../../utility/constants';\nimport { addQueryParamsToUrl, isDesktop, isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { PPNDealer } from '../../entities/dealer-response';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getOpeningHours, sanitizeDealerHomepage } from '../../utility/helpers/dealer-search-helper';\nimport featureToggles from '../../services/feature-toggles';\n\n@Component({\n  tag: 'phn-dealer-details-drawer',\n  styleUrl: 'dealer-details-drawer.scss',\n  scoped: true\n})\nexport class DealerDetailsDrawer {\n  @Prop() dealerId!: string;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  @State() errorMessage = '';\n  @State() showSkeleton = true;\n\n  @Element() el!: HTMLPhnDealerDetailsDrawerElement;\n\n  @Event() clickDrawerHeaderBack!: EventEmitter<void>;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  componentDidLoad(): void {\n    const dealer = this.getDealer();\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer?.name\n      },\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: dealer?.name,\n        companyId: dealer?.porschePartnerNo\n      }\n    });\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = false;\n  }\n\n  private getDealer(): PPNDealer {\n    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};\n\n    return dealer;\n  }\n\n  private renderHeading(name: string): HTMLElement | null {\n    return (\n      <Fragment>\n        {this.showSkeleton ? <div class=\"skeleton-headline\" /> : null}\n        <phn-p-heading\n          style={{ display: this.showSkeleton ? 'none' : '' }}\n          tag=\"h3\"\n          size=\"large\"\n          data-test-id=\"dealer-headline\"\n        >\n          {name}\n        </phn-p-heading>\n      </Fragment>\n    );\n  }\n\n  render(): HTMLPhnDealerDetailsDrawerElement {\n    const ppnDealer = this.getDealer();\n\n    if (ppnDealer === undefined) {\n      return <div>{this.errorMessage}</div>;\n    }\n    const language = splitLocale(this.locale).language;\n    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;\n\n    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n    const address =\n      language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n    const name =\n      language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n    // postalCode is currently not available in addressLocalized\n    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);\n    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);\n    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);\n    const hasHomepage = isString(ppnDealer.contactDetails.homepage);\n    const hasTestdrive = testDrive && isString(testDrive?.text) && isString(testDrive?.link);\n    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);\n    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);\n    const hasOpeningHours = openingHours !== '';\n\n    let country = '';\n    try {\n      country = splitLocale(this.locale).country;\n    } catch (err) {\n      // throw the error away\n    }\n    const dealerAddress =\n      country === 'JP'\n        ? `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`\n        : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;\n    const customDatalayerProperties = {\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    };\n\n    return (\n      <Host>\n        {hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null}\n        {hasAddress ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'address')}\n            analyticsId=\"mainmenu.finddealer.map\"\n            text={dealerAddress}\n            iconLeft=\"pin\"\n            data-test-id=\"dealer-address\"\n            link={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\n              `${address.street},${ppnDealer.address.postalCode},${address.city}`\n            )}`}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'openingHours')}\n            analyticsId=\"mainmenu.finddealer.openinghours\"\n            text={openingHours}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-opening-hours\"\n            iconLeft=\"clock\"\n          />\n        ) : null}\n\n        {hasPhoneNumber ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'number')}\n            analyticsId=\"mainmenu.finddealer.phone\"\n            text={ppnDealer.contactDetails.phoneNumber}\n            iconLeft=\"phone\"\n            data-test-id=\"dealer-phonenumber\"\n            link={`tel:${ppnDealer.contactDetails.phoneNumber}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasEmail ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'email')}\n            analyticsId=\"mainmenu.finddealer.email\"\n            text={ppnDealer.contactDetails.emailAddress}\n            iconLeft=\"email\"\n            data-test-id=\"dealer-email\"\n            link={`mailto:${ppnDealer.contactDetails.emailAddress}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasHomepage ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'homepage')}\n            analyticsId=\"mainmenu.finddealer.website\"\n            text={ppnDealer.contactDetails.homepage.replace('https://', '')}\n            iconLeft=\"globe\"\n            data-test-id=\"dealer-homepage\"\n            link={sanitizeDealerHomepage(ppnDealer.contactDetails.homepage)}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {finder && isString(country) ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, finder.id)}\n            analyticsId={finder.id}\n            text={finder.text}\n            data-test-id=\"dealer-finder-cars\"\n            link={addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId })}\n            iconLeft=\"car\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {bookService ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, bookService.text)}\n            analyticsId={bookService.id}\n            text={bookService.text}\n            link={addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo })}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-service\"\n            iconLeft={'wrench'}\n          />\n        ) : null}\n\n        {hasTestdrive ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, testDrive.text)}\n            analyticsId={testDrive.id}\n            text={testDrive.text}\n            link={testDrive.link}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-testdrive\"\n            iconLeft={'steering-wheel'}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n\ntype DealerDetailCardType = {\n  showSkeleton: boolean;\n  elementId?: string;\n  'data-test-id': string;\n  analyticsId: string;\n  text: string;\n  link?: string;\n  customDatalayerProperties: TDataLayer;\n  datalayerEventAction: EventAction;\n  variant: string;\n  iconLeft: string;\n  target?: string;\n  ariaLabel?: string;\n};\n\nfunction DealerDetailCard(props: DealerDetailCardType): HTMLElement {\n  return <phn-menu-item-card tabIndex={0} class={`${props.showSkeleton ? 'skeleton' : ''}`} {...props} />;\n}\n","import { h } from '@stencil/core';\n\nexport default function ErrorMessage({\n  errorMessage,\n  onDismiss\n}: {\n  errorMessage: string;\n  onDismiss: () => void;\n}): HTMLElement {\n  return (\n    <div class=\"error-message animated\">\n      <phn-p-inline-notification state=\"error\" description={errorMessage} onDismiss={onDismiss} />\n    </div>\n  );\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getAllPPNDealersForMarket } from '../../services/dealer-service';\nimport { getConfig, isString } from '../../utility/helper';\nimport logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport {\n  DEALER_MARKET_SEARCH_TERM,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\n\n@Component({\n  tag: 'phn-dealer-search-by-number-of-dealers',\n  styleUrl: 'dealer-search-by-number-of-dealers.scss',\n  scoped: true\n})\nexport class DealerSearchByNumberOfDealers {\n  @State() isLoading = false;\n  @State() formErrorMessage: string | null = null;\n\n  @Prop() locale!: string;\n\n  @Element() el!: HTMLPhnDealerSearchByNumberOfDealersElement;\n\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { dealer } = navContentStore.state;\n      if (dealer.numberOfDealers <= 5) {\n        this.fetchAllDealersForMarket();\n      }\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  private async fetchAllDealersForMarket() {\n    const { error: errorContent } = navContentStore.state;\n\n    try {\n      this.isLoading = true;\n\n      const { country } = splitLocale(this.locale);\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getAllPPNDealersForMarket(\n        env,\n        getConfig(env).DEALER_API_URL_ALL_DEALERS,\n        country\n      );\n\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private reset() {\n    this.formErrorMessage = null;\n    this.isLoading = false;\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render() {\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    if (isString(this.formErrorMessage))\n      return <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />;\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n\n  .city-select-form-field{\n    padding-top: p-px-to-rem(24px);\n  }\n\n  .title-container {\n    display: flex;\n    flex-direction: row;\n    border: 2px solid rgb(107, 109, 112);\n    border-radius: 5px;\n\n    transition: background-color 0.24s ease;\n    margin: 0;\n    min-height: p-px-to-rem(54px);\n\n    phn-p-text {\n      padding-left: 19px;\n    }\n\n\n    phn-p-icon{\n      margin-right: p-px-to-rem(16px);\n      padding-top: -8px;\n      outline: 0;\n    }\n\n    div.text-limit {\n      width: 80%;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, JSX, Listen, Prop, State } from '@stencil/core';\nimport { getPPNDealersByRegion } from '../../services/dealer-service';\nimport { splitLocale } from '../../entities/locale';\nimport { City, DealersByRegion } from '../../entities/dealer-response';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport Logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport {\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport analyticsManager from '../../services/analytics/analytics-manager';\n\n@Component({\n  tag: 'phn-dealer-search-form-dropdown',\n  styleUrl: 'dealer-search-form-dropdown.scss',\n  scoped: true\n})\nexport class DealerSearchFormDropdown {\n  @Prop() locale = '';\n  @Prop() breakpoint!: number;\n\n  @State() isLoading = false;\n  @State() errorMessage: string | null = null;\n  @State() dealersOfRegion: DealersByRegion = { regions: [] };\n  @State() cities: City[] = [];\n  @State() selectedProvince = '';\n  @State() selectedCity = '';\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormDropdownElement;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n    this.getDealersByRegion();\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  @Listen('removeSkeletonOnDealerSearchForm')\n  loadedAutoCompleteListener(_event: Event): void {\n    this.showSkeleton = false;\n  }\n\n  private async getDealersByRegion() {\n    const { error: errorContent } = navContentStore.state;\n    const { country } = splitLocale(this.locale);\n\n    try {\n      this.isLoading = true;\n      this.dealersOfRegion = await getPPNDealersByRegion(country);\n    } catch (err) {\n      Logger.error('FETCH_DEALERS', err as Error);\n      this.errorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.dealerSearchFormEvent.emit();\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private onCitySelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedCity = (event.target as HTMLSelectElement).value;\n    this.selectedCity = selectedCity;\n    dealerSearchResultsStore.state.ppnDealers =\n      this.cities.find((city) => {\n        return [city.cityName, city.cityNameLocalized].includes(selectedCity);\n      })?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;\n  }\n\n  private onProvinceSelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedProvince = (event.target as HTMLSelectElement).value;\n    this.cities = this.getCitiesByGivenRegionName(selectedProvince);\n    this.selectedProvince = selectedProvince;\n  }\n\n  private getCitiesByGivenRegionName(province: string): City[] {\n    const regions = this.dealersOfRegion.regions;\n\n    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) =>\n      [regionName, regionNameLocalized].includes(province)\n    );\n\n    return selectedRegion?.cities || [];\n  }\n\n  private emitPageLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length || 0\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.isLoading = false;\n    this.selectedProvince = '';\n    this.selectedCity = '';\n\n    dealerSearchResultsStore.state.results = null;\n    dealerSearchResultsStore.state.savedDealerCookie = null;\n\n    this.clearSearchEvent.emit();\n  }\n\n  render(): JSX.Element {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n    const searchText = dealerSearchResultsStore.state.searchTerm;\n\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    return (\n      <Host>\n        {results && results.length > 0 ? (\n          <form\n            class=\"form-container\"\n            onSubmit={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <div>\n              <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n                <div class=\"text-limit\">\n                  <phn-p-text\n                    weight=\"regular\"\n                    size=\"small\"\n                    tag=\"div\"\n                    ellipsis=\"true\"\n                    color=\"contrast-medium\"\n                    data-test-id=\"dealer-search-form-input\"\n                  >\n                    {searchText}\n                  </phn-p-text>\n                </div>\n                <phn-p-icon\n                  name=\"close\"\n                  class=\"close-icon\"\n                  style={{ display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }}\n                  onClick={(event: Event) => {\n                    event.preventDefault();\n                    this.reset();\n                  }}\n                />\n              </div>\n            </div>\n          </form>\n        ) : (\n          <Fragment>\n            <phn-p-select-wrapper\n              filter\n              label={dealerContent.search.dropdown.province}\n              required\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n            >\n              <select\n                name=\"dealers-province\"\n                onChange={(event) => this.onProvinceSelect(event)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                <option hidden selected>\n                  {dealerContent.search.dropdown.selectAProvince}\n                </option>\n                {this.dealersOfRegion.regions.map((region) => {\n                  const province =\n                    splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null\n                      ? region.regionName\n                      : region.regionNameLocalized;\n                  return <option value={province}>{province}</option>;\n                })}\n              </select>\n            </phn-p-select-wrapper>\n\n            <phn-p-select-wrapper\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n              class=\"city-select-form-field\"\n              filter=\"true\"\n              label={dealerContent.search.dropdown.city}\n              required\n            >\n              <select\n                disabled={!isString(this.selectedProvince)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n                name=\"dealers-cities\"\n                onChange={(event) => {\n                  this.onCitySelect(event);\n                }}\n              >\n                <option hidden>{dealerContent.search.dropdown.selectACity}</option>\n                {this.cities.map((city) => (\n                  <option>\n                    {splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null\n                      ? city.cityName\n                      : city.cityNameLocalized}\n                  </option>\n                ))}\n              </select>\n            </phn-p-select-wrapper>\n\n            {isString(this.errorMessage) ? (\n              <ErrorMessage errorMessage={this.errorMessage} onDismiss={() => this.reset()} />\n            ) : null}\n          </Fragment>\n        )}\n      </Host>\n    );\n  }\n}\n","/* istanbul ignore file */\nimport { splitLocale } from '../entities/locale';\nimport { LatLong, Prediction } from '../entities/places';\nimport { isString } from '../utility/helper';\nimport windowService from './window-service';\nimport { NaviErrorTypes, NaviError, NaviErrorType } from '../utility/navi-error';\nimport { getRegionSpecificCountry } from '../utility/helpers/dealer-search-helper';\n\nexport class MapsService {\n  private autocompleteService: google.maps.places.AutocompleteService | null = null;\n  private placesService: google.maps.places.PlacesService | null = null;\n  private geocoderService: google.maps.Geocoder | null = null;\n  private getLocation: ((latLong: LatLong) => google.maps.LatLng) | null = null;\n\n  async init(apiKey: string): Promise<void> {\n    try {\n      const google = await windowService.fetchGoogleMapsApi(apiKey);\n      this.autocompleteService = new google.maps.places.AutocompleteService();\n      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));\n      this.geocoderService = new google.maps.Geocoder();\n      this.getLocation = (latLong: LatLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);\n    } catch (err) {\n      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);\n    }\n  }\n\n  async getPredictions(input: string, locale: string): Promise<Prediction[]> {\n    if (input.length === 0) {\n      return [];\n    }\n    //ToDo: Check what todo if country is no valid iso-code\n    const predictions = await new Promise<google.maps.places.AutocompletePrediction[] | null>((resolve, reject) => {\n      if (this.autocompleteService === null) {\n        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.autocompleteService.getPlacePredictions(\n        {\n          input,\n          componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }\n        },\n        (predictions, status) =>\n          status === 'OK'\n            ? resolve(predictions)\n            : reject(\n                new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))\n              )\n      );\n    });\n\n    return (\n      predictions\n        ?.filter(({ place_id, description }) => isString(place_id) && isString(description))\n        .map(({ place_id: id, description: text }) => ({ id, text })) ?? []\n    );\n  }\n\n  async getPlaceCoordinates(placeId: string): Promise<LatLong> {\n    const response = await new Promise<google.maps.places.PlaceResult | null>((resolve, reject) => {\n      if (this.placesService === null) {\n        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.placesService.getDetails(\n        {\n          placeId\n        },\n        (response, status) =>\n          status === 'OK'\n            ? resolve(response)\n            : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status)))\n      );\n    });\n\n    const latitude = response?.geometry?.location?.lat();\n    const longitude = response?.geometry?.location?.lng();\n\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n      throw new NaviError(\n        `placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`,\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return { latitude, longitude };\n  }\n\n  async getFormattedAddressFromCoordinates(latLong: LatLong): Promise<string> {\n    if (this.getLocation === null) {\n      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);\n    }\n\n    const location = this.getLocation(latLong);\n\n    const response = await new Promise<google.maps.GeocoderResult[] | null>((resolve, reject) => {\n      if (this.geocoderService === null) {\n        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.geocoderService.geocode({ location }, (response, status) => {\n        status === 'OK'\n          ? resolve(response)\n          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));\n      });\n    });\n\n    if (response === null || response.length === 0) {\n      throw new NaviError(\n        'geocoderService.geocode did not find the location based on coordinates.',\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return response[0].formatted_address;\n  }\n}\n\nexport function getErrorType(status: string): NaviErrorType {\n  switch (status) {\n    case 'INVALID_REQUEST': {\n      return NaviErrorTypes.INVALID_INPUT;\n    }\n    case 'NOT_FOUND':\n    case 'ZERO_RESULTS': {\n      return NaviErrorTypes.NO_RESULTS;\n    }\n    case 'OVER_QUERY_LIMIT':\n    case 'UNKNOWN_ERROR': {\n      return NaviErrorTypes.RETRY;\n    }\n    case 'ERROR':\n    case 'REQUEST_DENIED':\n    default: {\n      return NaviErrorTypes.GENERAL;\n    }\n  }\n}\n\nexport default new MapsService();\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { LatLong, Prediction } from '../../entities/places';\nimport { splitLocale } from '../../entities/locale';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getPPNDealers } from '../../services/dealer-service';\nimport { getConfig, getString, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport logger from '../../services/logger';\nimport { getErrorMessage, NaviError, NaviErrorTypes } from '../../utility/navi-error';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  DEALER_SEARCH_TARGET_ELEMENT,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport mapsService from '../../services/maps-service';\nimport windowService from '../../services/window-service';\nimport { Timeout } from '../../utility/timeout';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { getRegionSpecificCountry } from '../../utility/helpers/dealer-search-helper';\n\n@Component({\n  tag: 'phn-dealer-search-form-geolocation',\n  styleUrl: 'dealer-search-form-geolocation.scss',\n  scoped: true\n})\nexport class DealerSearchFormGeolocation {\n  @Prop() locale!: string;\n\n  @State() predictions: Prediction[] = [];\n  @State() errorMessage: string | null = null;\n  @State() formErrorMessage: string | null = null;\n  @State() isLoading = false;\n  @State() showGeolocationButton = dealerSearchResultsStore.state.results === null;\n  @State() animateResults = false;\n  @State() searchTerm = dealerSearchResultsStore.state.searchTerm;\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormGeolocationElement;\n\n  private debounceTimeout = new Timeout(100);\n\n  @Listen('autoCompleteLoaded')\n  loadedAutoCompleteListener(): void {\n    this.showSkeleton = false;\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  disconnectedCallback(): void {\n    dealerSearchResultsStore.state.searchTerm = this.searchTerm;\n    this.debounceTimeout.cancel();\n  }\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { error: errorContent } = navContentStore.state;\n\n      mapsService.init('GOOGLE_API_KEY').catch((err: Error) => {\n        logger.error('INIT_MAPS_SERVICE', err);\n        this.formErrorMessage = getErrorMessage(errorContent, err);\n        this.errorMessage = null;\n      });\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),\n        displayElementName: dealer.text\n      }\n    });\n  }\n\n  private emitResultsLoadEvent(searchTerm: string) {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: componentSearchSearchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private async fetchDealers(getSearchTerms: () => Promise<[string, LatLong]>) {\n    const { error: errorContent } = navContentStore.state;\n    try {\n      this.reset();\n      this.isLoading = true;\n\n      const [searchTerm, placeCoordinates] = await getSearchTerms();\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getPPNDealers(\n        env,\n        getConfig(env).DEALER_API_URL,\n        placeCoordinates,\n        getRegionSpecificCountry(splitLocale(this.locale).country)\n      );\n\n      dealerSearchResultsStore.state.searchTerm = searchTerm;\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n      this.showGeolocationButton = false;\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n      this.errorMessage = null;\n    } finally {\n      this.isLoading = false;\n      this.animateResults = true;\n    }\n  }\n\n  private async onSubmit(prediction: Prediction | null) {\n    const { dealer: dealerContent, error: errorContent } = navContentStore.state;\n\n    if (!isString(this.searchTerm)) {\n      this.errorMessage = errorContent.noInput;\n      this.formErrorMessage = '';\n      return;\n    }\n\n    await this.fetchDealers(async () => {\n      if (prediction === null) {\n        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);\n      }\n\n      this.searchTerm = prediction.text;\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {\n        componentClick: {\n          clickElementId: prediction.id,\n          clickElementName: prediction.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: prediction.text\n        }\n      });\n\n      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);\n\n      return [prediction.text, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(this.searchTerm);\n  }\n\n  private async getCurrentLocation(): Promise<void> {\n    const { dealer: dealerContent } = navContentStore.state;\n\n    await this.fetchDealers(async () => {\n      const placeCoordinates = await windowService.getNavigatorLatLong();\n      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);\n\n      this.searchTerm = '';\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {\n        componentClick: {\n          clickElementId: dealerContent.search.geolocation.id,\n          clickElementName: dealerContent.search.geolocation.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM\n        }\n      });\n\n      return [formattedAddress, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);\n  }\n\n  private async onDealerSearchEntry(searchTerm: string): Promise<void> {\n    const { error } = navContentStore.state;\n    try {\n      this.searchTerm = searchTerm;\n      this.errorMessage = null;\n      this.formErrorMessage = null;\n      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;\n      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);\n    } catch (err) {\n      logger.error('GET_PREDICTIONS', err as Error);\n      this.errorMessage = getErrorMessage(error, err as Error);\n      this.predictions = [];\n    }\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.formErrorMessage = null;\n    this.animateResults = false;\n    this.showGeolocationButton = true;\n    this.isLoading = false;\n\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render(): HTMLPhnDealerSearchFormElement {\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results } = dealerSearchResultsStore.state;\n\n    return (\n      <Host class={this.showSkeleton ? 'skeleton' : ''}>\n        <div class=\"input-container\">\n          {this.showSkeleton ? <div class=\"skeleton-autocomplete-search-field\" /> : null}\n          <phn-autocomplete-search-field\n            placeholder={dealerContent.search.form.inputPlaceholder}\n            initialValue={dealerSearchResultsStore.state.searchTerm}\n            predictions={this.predictions}\n            onSearchInput={(e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail))}\n            onClearSearch={() => {\n              this.predictions = [];\n              dealerSearchResultsStore.state.searchTerm = '';\n              this.searchTerm = '';\n              this.reset();\n              this.clearSearchEvent.emit();\n              this.showGeolocationButton = true;\n            }}\n            onSubmitSearch={(e) => this.onSubmit(e.detail)}\n            errorMessage={getString(this.errorMessage)}\n            style={{ display: this.showSkeleton ? 'none' : '' }}\n          />\n        </div>\n\n        {this.isLoading && (\n          <div class=\"spinner\">\n            <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n          </div>\n        )}\n\n        {this.showGeolocationButton && results === null ? (\n          <Fragment>\n            <div\n              class={`or-container ${this.isLoading ? 'animate-out' : ''}`}\n              onAnimationEnd={() => {\n                this.showGeolocationButton = false;\n              }}\n            >\n              {this.showSkeleton ? <div class=\"skeleton-or-text\" /> : null}\n              <phn-p-text\n                color=\"inherit\"\n                size=\"inherit\"\n                tag=\"div\"\n                data-test-id=\"dealer-search-or-label\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.or}\n              </phn-p-text>\n              {this.showSkeleton ? <div class=\"skeleton-geolocation-button\" /> : null}\n              <phn-p-button\n                class={'geolocation'}\n                onClick={() => this.getCurrentLocation()}\n                variant=\"tertiary\"\n                icon=\"locate\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.geolocation.text}\n              </phn-p-button>\n            </div>\n          </Fragment>\n        ) : null}\n\n        {isString(this.formErrorMessage) ? (\n          <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />\n        ) : null}\n      </Host>\n    );\n  }\n}\n","import { PPNDealer, PPNDealerSearchResult } from '../../entities/dealer-response';\nimport { h, JSX } from '@stencil/core';\nimport { isString } from '../../utility/helper';\nimport { getDealerDetailsRoutingKey, RoutingKeys } from '../../entities/routing-key';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { splitLocale } from '../../entities/locale';\nimport { addRoute } from '../../services/routing-manager';\n\nexport function DealerSearchFormItemCard({\n  dealer,\n  showOverlay,\n  locale\n}: {\n  dealer: PPNDealerSearchResult;\n  showOverlay?: boolean;\n  locale: string;\n}): JSX.Element | null {\n  const { ppnDealer, distance } = dealer;\n  const language = splitLocale(locale).language;\n  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n  // postalCode is currently not available in addressLocalized\n  const address =\n    language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n  const name =\n    language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;\n  let country = '';\n  try {\n    country = splitLocale(locale).country;\n  } catch (err) {\n    // throw the error away\n  }\n  const onDealerCardClick = (ppnDealer: PPNDealer): void => {\n    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);\n    addRoute([ppnDealer.id]);\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    dealerSearchResultsStore.state.savedDealerCookie = {\n      id: ppnDealer.id,\n      latitude: ppnDealer.coordinates.latitude,\n      longitude: ppnDealer.coordinates.longitude\n    };\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {\n      componentClick: {\n        clickElementId: ppnDealer.id,\n        clickElementName: ppnDealer.name,\n        clickElementType: ClickElementTypes.Button,\n        targetElement: `level2_${dealerDetailsRoutingKey}`\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: results?.length\n      },\n      partner: {\n        companyName: ppnDealer.name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    });\n  };\n\n  return (\n    <phn-menu-item-card\n      tabIndex={0}\n      text={name}\n      class={`animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`}\n      onClick={() => onDealerCardClick(ppnDealer)}\n      analyticsId={ppnDealer.id}\n    >\n      <div class=\"phn-flex-row phn-justify-between phn-align-center\">\n        {country === 'JP' ? (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`}\n          </phn-p-text>\n        ) : (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`${address.street}, `}\n            <span class=\"city\">\n              {ppnDealer.address.postalCode} {address.city}\n            </span>\n          </phn-p-text>\n        )}\n\n        {distance && distance.value >= 1 && numberOfDealers > 5 ? (\n          <phn-p-tag color=\"notification-info-soft\">{`${Math.round(\n            distance.value\n          )}${distance.unit.toLowerCase()}`}</phn-p-tag>\n        ) : null}\n      </div>\n    </phn-menu-item-card>\n  );\n}\n","import { navContentStore } from '../../state/nav-content-store';\nimport { h } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport { isString } from '../../utility/helper';\n\nexport function DealerSearchMapLink() {\n  const { dealer: dealerContent } = navContentStore.state;\n\n  function emitDealersMapEvent() {\n    const map = dealerContent.search.map;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_MAP_CLICK, {\n      componentClick: {\n        clickElementId: map.id,\n        clickElementName: map.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: map.link\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length\n      }\n    });\n  }\n  return (\n    <a class={'animated'} href={dealerContent.search.map.link} aria-label={dealerContent.search.map.description}>\n      <phn-p-button onClick={emitDealersMapEvent} variant=\"tertiary\">\n        {dealerContent.search.map.text}{' '}\n      </phn-p-button>\n    </a>\n  );\n}\n","@import '../../scss/index';\n\n:host {\n  display: block;\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    & .skeleton-autocomplete-search-field {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n\n    & .skeleton-or-text {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px 4px 0 0;\n    }\n\n    & .skeleton-geolocation-button {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 0 0 4px 4px;\n    }\n  }\n\n  .or-container {\n    position: relative;\n    width: 100%;\n    margin-top: p-px-to-rem(20px);\n\n    .geolocation {\n      width: 100%;\n      padding-bottom: 24px;\n    }\n\n    phn-p-text {\n      margin-bottom: p-px-to-rem(4px);\n      color: $pds-theme-light-primary;\n    }\n  }\n\n  .animate-out {\n    animation: fadeOutToTop 0.75s ease-in-out 0s;\n  }\n\n  .input-container {\n    width: 100%;\n  }\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  phn-dealer-details-drawer{\n    margin-top: p-px-to-rem(20px);\n  }\n\n\n  phn-menu-item-card {\n    & > div {\n      margin-top: 14px;\n    }\n  }\n\n  .dealer-card-overlay {\n    opacity: 0.3;\n  }\n\n  .dealer-card{\n    phn-p-tag{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n\n  .error-message {\n    position: relative;\n    margin-top: p-px-to-rem(32px);\n  }\n\n  .animated {\n    animation: fadeInFromBottom 0.75s ease-in-out 0s;\n  }\n\n  a {\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    text-decoration-line: none;\n    margin-top: p-px-to-rem(36px);\n\n    phn-p-button {\n      width: 100%;\n    }\n  }\n}\n","import { Component, Fragment, h, Host, Prop } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { DealerSearchFormItemCard } from './dealer-search-form-item-card';\nimport { JSX } from '@stencil/core/internal';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { DealerSearchMapLink } from './dealer-search-map-link';\n\n@Component({\n  tag: 'phn-dealer-search-results',\n  styleUrl: 'dealer-search-results.scss',\n  scoped: true\n})\nexport class DealerSearchResults {\n  @Prop() showOverlay = false;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  render(): JSX.Element | null {\n    const { results, ppnDealers } = dealerSearchResultsStore.state;\n    const { error: errorContent } = navContentStore.state;\n\n    if (results === null) return null;\n\n    if (results?.length === 0)\n      return (\n        <Fragment>\n          <ErrorMessage errorMessage={errorContent.noResults} onDismiss={() => null} />\n        </Fragment>\n      );\n    const dealerId = results[0];\n    if (results.length === 1 && ppnDealers[dealerId]) {\n      dealerSearchResultsStore.state.savedDealerCookie = {\n        id: dealerId,\n        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,\n        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude\n      };\n\n      return <phn-dealer-details-drawer breakpoint={this.breakpoint} dealerId={dealerId} locale={this.locale} />;\n    }\n\n    return (\n      <Host>\n        <Fragment>\n          {results.map((dealerId) => {\n            const dealer = ppnDealers[dealerId];\n\n            if (dealer === undefined || dealer.ppnDealer === undefined) {\n              return null;\n            }\n            return <DealerSearchFormItemCard dealer={dealer} showOverlay={this.showOverlay} locale={this.locale} />;\n          })}\n          <DealerSearchMapLink />\n        </Fragment>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n@mixin renderTitle() {\n  .title-container {\n    width: 100%;\n    margin: 0;\n\n    phn-p-heading {\n      word-break: break-word;\n      white-space: pre-line;\n    }\n\n    phn-p-icon{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n}\n\n@mixin default-skeleton() {\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n    background: $pds-theme-light-contrast-low;\n    border-radius: 4px;\n\n    & * {\n      visibility: hidden;\n    }\n  }\n}\n\n:host {\n  display: block;\n  padding: p-px-to-rem(19px);\n  margin-top: p-px-to-rem(16px);\n  border-radius: 8px;\n  background-color: $pds-theme-light-state-hover;\n  transition: background-color 0.24s ease;\n  cursor: pointer;\n\n  button{\n    all: unset;\n    display: block;\n    width: 100%;\n  }\n\n  @include default-skeleton();\n\n  @include pds-media-query-min('s') {\n    background-color: $pds-theme-light-background-base;\n  }\n\n  &:hover {\n    @include pds-media-query-min('s') {\n      background-color: $pds-theme-light-state-hover;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .subtext {\n    color: $pds-theme-light-primary;\n  }\n\n  .dealer-card-item {\n    font-size: 16px;\n    font-family: \"Porsche Next\";\n    font-style: normal;\n    font-weight: 400;\n    line-height: 24px;\n    color: $pds-theme-light-primary;\n    word-break: break-word;\n    white-space: pre-line;\n  }\n\n  @include renderTitle();\n}\n","import { Component, Element, Fragment, h, Host, JSX, Listen, Prop } from '@stencil/core';\nimport { ClickElementType, ClickElementTypes, EventAction, EventActions } from '../../utility/constants';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { getHTMLElement, isString } from '../../utility/helper';\nimport { sendDataLayerEvent } from '../../services/analytics/data-layer-event-sender';\n\n@Component({\n  tag: 'phn-menu-item-card',\n  styleUrl: 'menu-item-card.scss',\n  scoped: true\n})\nexport class MenuItemCard {\n  @Prop() text!: string;\n  @Prop() analyticsId!: string;\n  @Prop() subtext = '';\n  @Prop() elementId = '';\n  @Prop() link = '';\n  @Prop() datalayerEventAction: EventAction = EventActions.NAVIGATION_CLICK;\n  @Prop() customDatalayerProperties: TDataLayer = {};\n  @Prop() target = '_self';\n  @Prop() iconLeft = '';\n\n  @Element() el!: HTMLPhnMenuItemCardElement;\n\n  @Listen('keydown', { passive: false })\n  handleKeyDown(e: KeyboardEvent): void {\n    if (e.key === 'Enter') {\n      const anchorElement = getHTMLElement(e.target)?.querySelector('a');\n      const targetElement = anchorElement ? anchorElement : getHTMLElement(e.target);\n\n      if (targetElement) {\n        targetElement.click();\n        !anchorElement ? this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId) : null;\n      }\n    }\n  }\n\n  private sendDataLayerEvent(clickElementType: ClickElementType, elementId: string): void {\n    sendDataLayerEvent({\n      analyticsId: this.analyticsId,\n      text: this.text,\n      elementId,\n      clickElementType,\n      link: this.link,\n      customDatalayerProperties: this.customDatalayerProperties,\n      datalayerEventAction: this.datalayerEventAction\n    });\n  }\n\n  private renderTitle(): HTMLElement {\n    return (\n      <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n        {this.elementId ? (\n          <phn-p-text className={'dealer-card-item'}>{this.text}</phn-p-text>\n        ) : (\n          <phn-p-heading tag=\"h3\" size=\"medium\">\n            {this.text}\n          </phn-p-heading>\n        )}\n        {isString(this.iconLeft) ? <phn-p-icon name={this.iconLeft}></phn-p-icon> : null}\n      </div>\n    );\n  }\n\n  private renderSubtitle(): JSX.Element | null {\n    if (!isString(this.subtext)) {\n      return null;\n    }\n\n    return (\n      <phn-p-text\n        class={'subtext'}\n        color=\"contrast-medium\"\n        weight=\"regular\"\n        size=\"xx-small\"\n        tag=\"div\"\n        ellipsis=\"true\"\n        data-test-id=\"subtext\"\n      >\n        {this.subtext}\n      </phn-p-text>\n    );\n  }\n\n  render(): JSX.Element {\n    const body = (\n      <Fragment>\n        <div class=\"texts\">\n          {this.renderTitle()}\n          {this.renderSubtitle()}\n        </div>\n        <slot />\n      </Fragment>\n    );\n\n    if (isString(this.link))\n      return (\n        <a\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);\n          }}\n          class=\"card-link\"\n          href={this.link}\n          target={this.target}\n        >\n          {body}\n        </a>\n      );\n\n    return (\n      <Host>\n        <button\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);\n          }}\n        >\n          {body}\n        </button>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  .button-container {\n    display: flex;\n\n    @include pds-media-query-min-max('base', 'xs') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    @include pds-media-query-min-max('s', 'l') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    .login {\n      padding: p-px-to-rem(36px) 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n        padding-top: 0;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 p-px-to-rem(8px) p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min-max('s', 'l') {\n        padding: 0 0 p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n\n    .more {\n      padding: 0 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 0 p-px-to-rem(16px) p-px-to-rem(8px);\n      }\n\n      @include pds-media-query-min('s') {\n        padding: 0 0 p-px-to-rem(23px) 0\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n  }\n\n  phn-p-text {\n    padding-bottom: p-px-to-rem(24px);\n    border-bottom: 2px solid $pds-theme-light-contrast-low;\n    margin-bottom: p-px-to-rem(10px);\n\n    @include pds-media-query-min('xxl') {\n      margin-bottom: p-px-to-rem(16px);\n    }\n  }\n\n  phn-p-link-pure {\n    float: left;\n    text-decoration: underline;\n    color: black;\n  }\n}\n","import { Component, Event, EventEmitter, Fragment, h, JSX, Prop } from '@stencil/core';\nimport { TLink } from '../../entities/content';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\n\n@Component({\n  tag: 'phn-myporsche-login',\n  styleUrl: 'myporsche-login.scss',\n  scoped: true\n})\nexport class MyPorscheLogin {\n  @Prop() login!: TLink;\n  @Prop() more: TLink | null = null;\n  @Prop() signup!: TLink;\n  @Prop() signupText!: string;\n\n  @Event() loginEvent!: EventEmitter<void>;\n\n  private sendDataLayerEvent(link: TLink | null): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.NAVIGATION_LINK_CLICK, {\n      componentClick: {\n        clickElementId: link?.id,\n        clickElementName: link?.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: link?.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.MY_PORSCHE,\n          ElementTypes.myPorscheDrawer\n        ),\n        displayElementName: link?.text\n      }\n    });\n  }\n\n  render(): JSX.Element {\n    return (\n      <Fragment>\n        <div class=\"button-container\">\n          <phn-p-button\n            variant=\"primary\"\n            class=\"login\"\n            onClick={() => {\n              this.loginEvent.emit();\n              this.sendDataLayerEvent(this.login);\n            }}\n          >\n            {this.login.text}\n          </phn-p-button>\n          {this.more && isString(this.more.link) ? (\n            <phn-p-link\n              variant=\"tertiary\"\n              class=\"more\"\n              href={this.more.link}\n              onClick={() => {\n                this.sendDataLayerEvent(this.more);\n              }}\n            >\n              {this.more.text}\n            </phn-p-link>\n          ) : null}\n        </div>\n        <div>\n          <phn-p-link-pure\n            icon=\"none\"\n            onClick={() => {\n              this.sendDataLayerEvent(this.signup);\n            }}\n          >\n            <a href={this.signup.link}>{this.signup.text}</a>\n          </phn-p-link-pure>\n          <phn-p-text>&nbsp;{this.signupText}</phn-p-text>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import { HTMLStencilElement } from '@stencil/core/internal';\nimport windowService from '../services/window-service';\nimport { Timeout } from './timeout';\n\nexport async function componentsOnReady(\n  parent: HTMLElement | null,\n  timeout: Timeout,\n  ...selectors: string[]\n): Promise<HTMLElement[] | null> {\n  if (parent === null) {\n    return null;\n  }\n  const waitForElement = async (selector?: string) => {\n    const el = await windowService.waitForElement(parent, selector);\n\n    if (typeof (el as HTMLStencilElement)?.componentOnReady === 'function') {\n      await (el as HTMLStencilElement).componentOnReady();\n    }\n\n    return el;\n  };\n\n  const waitForElements = selectors.length > 0 ? selectors.map(waitForElement) : [waitForElement()];\n\n  const timer = new Promise<null>((resolve) => timeout.set(async () => resolve(null)));\n  return Promise.race([Promise.all(waitForElements), timer]);\n}\n","import animationManager from '../../../services/animations/animation-manager';\nimport { AnimationSequences, AnimationSequencesType } from '../../../utility/constants';\nimport {\n  getAnimatedRoute,\n  getCurrentRoute,\n  isAnimatingBackward,\n  isAnimatingForward,\n  isClosing,\n  isOpening\n} from '../../../services/routing-manager';\n\nexport const handleAnimationRouting = (): AnimationRouting => {\n  const actions: Record<Operations, () => AnimationRouting> = {\n    OPENING: openingAction,\n    CLOSING: closingAction,\n    FORWARD: forwardAction,\n    BACKWARDS: backwardAction,\n    UNCHANGED: unchangedAction\n  };\n\n  const conditionToExecute = getSingleDrawerAction();\n\n  return actions[conditionToExecute]();\n};\n\ntype Operations = 'OPENING' | 'CLOSING' | 'FORWARD' | 'BACKWARDS' | 'UNCHANGED';\nfunction getSingleDrawerAction(): Operations {\n  if (isOpening()) {\n    return 'OPENING';\n  }\n  if (isClosing()) {\n    return 'CLOSING';\n  }\n  if (isAnimatingForward()) {\n    return 'FORWARD';\n  }\n  if (isAnimatingBackward()) {\n    return 'BACKWARDS';\n  }\n  return 'UNCHANGED';\n}\n\ntype AnimationRouting = { nextRoute: string; currentRoute: string };\n\nconst openingAction = (): AnimationRouting => {\n  animationManager.play(AnimationSequences.OPEN_SINGLE_DRAWER);\n\n  return {\n    nextRoute: '',\n    currentRoute: getCurrentRoute()\n  };\n};\n\nconst closingAction = (): AnimationRouting => {\n  animationManager.play(AnimationSequences.CLOSE_SINGLE_DRAWER).then(() => {\n    // TODO: Focus on burger button if using the keyboard\n  });\n\n  return {\n    nextRoute: getCurrentRoute() || '',\n    currentRoute: getAnimatedRoute() || ''\n  };\n};\n\nconst forwardAction = (): AnimationRouting => {\n  setTimeout(() => {\n    animationManager.play(AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER);\n  });\n\n  return {\n    nextRoute: getCurrentRoute() ?? '',\n    currentRoute: getAnimatedRoute() ?? ''\n  };\n};\n\nconst backwardAction = (): AnimationRouting => {\n  if (getCurrentRoute() !== '') {\n    setTimeout(() => {\n      animationManager.play(AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER);\n    });\n  }\n\n  return {\n    nextRoute: getAnimatedRoute() ?? '',\n    currentRoute: getCurrentRoute() ?? ''\n  };\n};\n\nconst unchangedAction = (): AnimationRouting => {\n  return {\n    nextRoute: '',\n    currentRoute: getCurrentRoute()\n  };\n};\n\nexport const isPlayingSingleDrawerAnimation = (): boolean => {\n  try {\n    const singleDrawerAnimationSequences: AnimationSequencesType[] = [\n      AnimationSequences.OPEN_SINGLE_DRAWER,\n      AnimationSequences.CLOSE_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_NEXT_LEVEL_SINGLE_DRAWER,\n      AnimationSequences.TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER\n    ];\n\n    return singleDrawerAnimationSequences.some((sequence) => {\n      try {\n        return animationManager.isPlaying(sequence);\n      } catch {\n        return false;\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n};\n","import { routerStore } from '../state/router-store';\nimport { constructRoutingKey, findTopLevelRoutingKey, RoutingKeyPointers, RoutingKeys } from '../entities/routing-key';\nimport { dispatchEvent, isDesktop } from '../utility/helper';\nimport windowService from './window-service';\nimport { dealerSearchResultsStore } from '../state/dealer-search-results-store';\nimport { isPlayingSingleDrawerAnimation } from '../components/single-drawer/animations/animations-controller';\n\nexport const getCurrentRoute = (): string => {\n  const { routingKeyHistory, routingKeyPointer } = routerStore.state;\n  return routingKeyHistory[routingKeyPointer] || '';\n};\n\nexport const getAnimatedRoute = (): string => {\n  const { routingKeyHistory, animatingPointer } = routerStore.state;\n  return routingKeyHistory[animatingPointer] || '';\n};\n\nexport const goTo = (...routes: string[]): void => {\n  const newHistory = [RoutingKeys.MAIN_MENU, ...routes];\n  routerStore.state.routingKeyPointer = routes.length;\n  routerStore.state.routingKeyHistory = newHistory;\n};\n\nexport const back = (): void => {\n  if (!isPlayingSingleDrawerAnimation()) {\n    if (findTopLevelRoutingKey(getCurrentRoute()) === RoutingKeys.DEALER_SEARCH) {\n      dealerSearchResultsStore.state.savedDealerCookie = null;\n    }\n    routerStore.state.routingKeyPointer = routerStore.state.routingKeyPointer - 1;\n  }\n};\n\nexport const pop = (): void => {\n  if (isNavigatingBackwards()) routerStore.state.routingKeyHistory.pop();\n};\n\nexport const addRoute = (newRoute: string[]): void => {\n  if (isDesktop(windowService.getBreakpoint())) {\n    dispatchEvent('phn-router', 'mobileMenuItemClick', {\n      bubbles: true,\n      cancelable: false,\n      detail: [constructRoutingKey(getCurrentRoute(), ...newRoute)]\n    });\n  } else {\n    const newHistory = [...routerStore.state.routingKeyHistory, constructRoutingKey(getCurrentRoute(), ...newRoute)];\n    routerStore.state.routingKeyPointer = newHistory.length - 1;\n    routerStore.state.routingKeyHistory = newHistory;\n  }\n};\n\nexport const reset = (): void => {\n  routerStore.state.routingKeyPointer = -1;\n};\n\nexport const isNavigatingBackwards = (): boolean => {\n  return routerStore.state.routingKeyPointer < routerStore.state.routingKeyHistory.length - 1;\n};\n\nexport const isAnimating = (): boolean => {\n  const { routingKeyPointer, animatingPointer } = routerStore.state;\n  return routingKeyPointer !== animatingPointer;\n};\n\n//____________ANIMATIONS______________//\n\nexport const isAnimatingForward = (): boolean => {\n  return routerStore.state.routingKeyPointer > routerStore.state.animatingPointer;\n};\n\nexport const isAnimatingBackward = (): boolean => {\n  return routerStore.state.routingKeyPointer < routerStore.state.animatingPointer;\n};\n\nexport const isOpening = (): boolean => {\n  return (\n    routerStore.state.animatingPointer === RoutingKeyPointers.LEVEL_ZERO && routerStore.state.routingKeyPointer >= 0\n  );\n};\n\nexport const isOpened = (): boolean => {\n  return !isClosed();\n};\n\nexport const isClosed = (): boolean => {\n  return (\n    routerStore.state.routingKeyPointer === RoutingKeyPointers.LEVEL_ZERO &&\n    routerStore.state.animatingPointer === RoutingKeyPointers.LEVEL_ZERO\n  );\n};\nexport const isClosing = (): boolean => {\n  return routerStore.state.routingKeyPointer === -1 && routerStore.state.animatingPointer >= 0;\n};\n\nexport const syncAnimation = () => {\n  routerStore.state.animatingPointer = routerStore.state.routingKeyPointer;\n};\n\nexport const showBackButton = (section: string): boolean => {\n  const sectionKey = routerStore.state.routingKeyHistory.indexOf(section);\n\n  return sectionKey >= RoutingKeyPointers.LEVEL_TWO;\n};\n","export class Timeout {\n  private timer: NodeJS.Timeout | null = null;\n\n  constructor(private delay: number) {}\n\n  set<T>(cb: () => Promise<T>): void {\n    this.cancel();\n\n    this.timer = setTimeout(async () => {\n      await cb();\n      this.cancel();\n    }, this.delay);\n  }\n\n  cancel(): void {\n    if (this.timer !== null) {\n      clearTimeout(this.timer);\n\n      if (typeof this.timer.unref === 'function') {\n        this.timer.unref();\n      }\n\n      this.timer = null;\n    }\n  }\n}\n"],"names":["animationRegistry","sequences","applyCurrentAnimationSequenceStep","e","currentStepIndex","steps","length","n","resolve","call","promise","undefined","finishAnimationSequence","t","r","i","a","o","push","executeAnimation","Promise","all","u","sent","reject","s","setTimeout","animationEndListener","getHTMLElement","target","Error","concat","type","dataset","phnAmId","finishAnimationPromise","onStart","onEnd","animation","elementSelector","isPromise","f","Array","from","getRootElement","querySelectorAll","c","l","generateAndCleanUpAnimationPromise","animationPromiseGenerator","cleanUpBeforeAnimation","cleanUpAfterAnimation","classList","remove","className","Math","floor","random","add","toString","console","warn","String","timeout","clearTimeout","makeSequence","map","Object","assign","running","animationManager","initialize","addEventListener","play","isPlaying","register","reset","keys","forEach","AnimationSequences","OPEN_DOUBLE_DRAWER","CLOSE_DOUBLE_DRAWER","TRANSITION_SAME_LEVEL_DOUBLE_DRAWER","TRANSITION_SAME_LEVEL_DOUBLE_DRAWER_REVERSE","TRANSITION_NEXT_LEVEL_DOUBLE_DRAWER","TRANSITION_PREVIOUS_LEVEL_DOUBLE_DRAWER","OPEN_SINGLE_DRAWER","CLOSE_SINGLE_DRAWER","TRANSITION_NEXT_LEVEL_SINGLE_DRAWER","TRANSITION_PREVIOUS_LEVEL_SINGLE_DRAWER","showDealerSearchDropdown","includes","getRegionSpecificCountry","split","sanitizeDealerHomepage","startsWith","getOpeningHours","navContentStore","state","dealer","openingHours","monday","tuesday","wednesday","thursday","friday","saturday","sunday","Map","day","toLowerCase","isString","set","open","close","getOpeningHoursMap","g","p","indexOf","getOpeningHoursString","get","getDayRange","join","timeFormat","convertToLocalTime","getTimeFormat","Number","Date","toLocaleString","hour","minute","hour12","toUpperCase","getAllPPNDealersForMarket","getPPNDealers","latitude","longitude","radius","Headers","Environments","LOCAL","windowService","btoa","coordinates","fetch","getQueryString","method","headers","d","NaviError","NaviErrorTypes","GENERAL","status","NO_RESULTS","json","__rest","ppnDealer","getPPNDealer","find","id","dealersByRegionMap","getPPNDealerByRegion","getPPNDealersByRegion","regions","flatMap","cities","dealers","values","reduce","__spreadArray","navStateStore","env","has","getConfig","BFF_ENDPOINT","AutocompleteSearchField","this","initialValue","prototype","clickListener","showPredictions","composedPath","el","querySelector","predictions","keydownListener","key","preventDefault","stopPropagation","watchShowPredictions","predictionsToggle","emit","watchInitialValue","searchterm","componentDidRender","autoCompleteLoaded","onKeyDown","highlightedPredictionIndex","text","onSubmit","submitSearch","render","h","class","errorMessage","message","placeholder","autocomplete","role","value","onInput","getHTMLInputElement","dealerSearchResultsStore","savedDealerCookie","clearSearch","searchInput","onClick","color","src","getAssetPath","ASSETS_URL","alt","DealerDetailsDrawer","componentWillLoad","waitForComponentsToLoad","componentDidLoad","getDealer","globalDataLayerService","pushDataLayerEvent","EventActions","DEALER_DETAILS_SCREEN_LOAD","componentDisplay","displayElementId","analyticsManager","getDealerResultsLoadDisplayElementId","DEALER_SEARCH_DISPLAY_ELEMENT_ID","displayElementType","getDealerResultsLoadDisplayElementType","displayElementName","name","componentSearch","searchTerm","partner","companyName","companyId","porschePartnerNo","componentsOnReady","Timeout","showSkeleton","ppnDealers","dealerId","renderHeading","Fragment","style","display","tag","size","splitLocale","locale","language","details","testDrive","finder","bookService","addressLocalized","every","address","nameLocalized","street","postalCode","city","contactDetails","phoneNumber","m","emailAddress","homepage","link","contactOpeningHours","y","w","country","b","k","Host","isDesktop","breakpoint","DealerDetailCard","elementId","getDealerDetailsRoutingKey","analyticsId","iconLeft","encodeURIComponent","datalayerEventAction","DEALER_CONTACT_CLICK","customDatalayerProperties","variant","MenuItemVariant","DealerDetails","featureToggles","isDealerSearchOpeningHoursEnabled","replace","addQueryParamsToUrl","dealership","ppnOrgId","tabIndex","ErrorMessage","onDismiss","description","DealerSearchByNumberOfDealers","then","numberOfDealers","fetchAllDealersForMarket","emitPageLoadEvent","removeSkeletonOnDealerSearchForm","error","isLoading","DEALER_API_URL_ALL_DEALERS","results","logger","formErrorMessage","getErrorMessage","emitResultsLoadEvent","DEALER_SEARCH_SCREEN_LOAD","calculateDisplayElementId","calculateDisplayElementType","ElementTypes","dealerSearchForm","DEALER_MARKET_SEARCH_TERM","numberOfResults","DEALER_RESULTS_SCREEN_LOAD","DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER","aria","DealerSearchFormDropdown","getDealersByRegion","loadedAutoCompleteListener","dealersOfRegion","dealerSearchFormEvent","onCitySelect","selectedCity","cityName","cityNameLocalized","selectedProvince","onProvinceSelect","getCitiesByGivenRegionName","regionName","regionNameLocalized","GEOLOCATION_BUTTON_SEARCH_TERM","clearSearchEvent","weight","ellipsis","cursor","filter","label","search","dropdown","province","required","onChange","hidden","selected","selectAProvince","disabled","selectACity","getErrorType","INVALID_INPUT","RETRY","mapsService","autocompleteService","placesService","geocoderService","getLocation","init","fetchGoogleMapsApi","maps","places","AutocompleteService","PlacesService","createDiv","Geocoder","LatLng","getPredictions","getPlacePredictions","input","componentRestrictions","place_id","getPlaceCoordinates","getDetails","placeId","geometry","location","lat","lng","getFormattedAddressFromCoordinates","geocode","formatted_address","DealerSearchFormGeolocation","debounceTimeout","disconnectedCallback","cancel","catch","fetchDealers","DEALER_API_URL","showGeolocationButton","animateResults","__awaiter","DEALER_SEARCH_CLICK","componentClick","clickElementId","clickElementName","clickElementType","ClickElementTypes","Button","targetElement","DEALER_SEARCH_TARGET_ELEMENT","RoutingKeys","DEALER_SEARCH","noInput","getCurrentLocation","getNavigatorLatLong","DEALER_GEOLOCATION_CLICK","geolocation","onDealerSearchEntry","form","inputPlaceholder","onSearchInput","detail","onClearSearch","onSubmitSearch","getString","onAnimationEnd","or","icon","DealerSearchFormItemCard","showOverlay","distance","addRoute","DEALER_RESULT_CLICK","round","unit","DealerSearchMapLink","href","DEALER_MAP_CLICK","Link","targetUrl","DealerSearchResults","noResults","MenuItemCard","NAVIGATION_CLICK","handleKeyDown","click","sendDataLayerEvent","renderTitle","renderSubtitle","subtext","MyPorscheLogin","NAVIGATION_LINK_CLICK","MY_PORSCHE","myPorscheDrawer","loginEvent","login","more","signup","signupText","arguments","waitForElement","componentOnReady","__generator","race","handleAnimationRouting","OPENING","openingAction","CLOSING","closingAction","FORWARD","forwardAction","BACKWARDS","backwardAction","UNCHANGED","unchangedAction","isOpening","isClosing","isAnimatingForward","isAnimatingBackward","getSingleDrawerAction","nextRoute","currentRoute","getCurrentRoute","getAnimatedRoute","routerStore","routingKeyHistory","routingKeyPointer","animatingPointer","goTo","MAIN_MENU","back","some","isPlayingSingleDrawerAnimation","findTopLevelRoutingKey","pop","isNavigatingBackwards","getBreakpoint","dispatchEvent","bubbles","cancelable","constructRoutingKey","apply","RoutingKeyPointers","LEVEL_ZERO","isOpened","isClosed","syncAnimation","showBackButton","LEVEL_TWO","delay","timer","unref"],"sourceRoot":""}