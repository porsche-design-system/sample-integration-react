{"version":3,"file":"static/js/5605.25885dd9.chunk.js","mappings":"0RAKgBA,EAAyBC,GAGvC,MAF8B,CAAC,MAEFC,SAASD,EACxC,C,SAEgBE,EAAyBF,GACvC,OAAOA,EAAQC,SAAS,KAAOD,EAAQG,MAAM,KAAK,GAAKH,CACzD,C,SAEgBI,EAAuBJ,GACrC,OAAKA,EAAYK,WAAW,YAIrBL,EAHE,UAAAM,OAAUN,EAIrB,C,SAEgBO,EAAgBP,GACtB,IAAAQ,EAAiBC,EAAAA,EAAgBC,MAAMC,OAAMC,aAErD,IAAKJ,EACH,MAAO,GAmBT,IAhBA,IAAMK,EAAY,CAChBL,EAAaM,OACbN,EAAaO,QACbP,EAAaQ,UACbR,EAAaS,SACbT,EAAaU,OACbV,EAAaW,SACbX,EAAaY,QAGTC,EA8CR,SAA4BrB,EAA4BQ,GAGtD,IAFA,IAAMK,EAAgE,IAAIS,IAEvDD,EAAA,EAAAE,EAAAf,EAAAa,EAAAE,EAAAC,OAAAH,IAAkB,CAAhC,IAAMI,EAAIF,EAAAF,GACPK,EAAM1B,EAAayB,EAAKE,IAAIC,gBAE9BC,EAAAA,EAAAA,GAASH,IACXb,EAAgBiB,IAAIJ,EAAK,CAAEK,KAAMN,EAAKM,KAAMC,MAAOP,EAAKO,O,CAI5D,OAAOnB,CACT,CA1D0BoB,CAAmBzB,EAAcR,GACnDuB,EAAmB,GACrBE,EAAuB,GACvBC,GAAoB,EACpBQ,EAA4B,GAEdC,EAAA,EAAAC,EAAAvB,EAAAsB,EAAAC,EAAAZ,OAAAW,IAAW,CAAxB,IAAME,EAAGD,EAAAD,GACNG,EAAkBzB,EAAU0B,QAAQF,GAEpCG,EAAqBC,EADTpB,EAAgBqB,IAAIL,IAGX,KAAvBG,IAC2B,KAAzBf,GACFA,EAAuBe,EACvBN,EAAgBS,KAAKN,IACZZ,IAAyBe,GAAsBd,IAAqBY,EAAkB,GAC/Ff,EAAOoB,KAAKC,EAAYV,EAAiBT,IACzCS,EAAkB,CAACG,GACnBZ,EAAuBe,GAEvBN,EAAgBS,KAAKN,GAEvBX,EAAmBY,E,CAIM,KAAzBb,GACFF,EAAOoB,KAAKC,EAAYV,EAAiBT,IAG3C,IACMoB,EAAiBJ,EADKpB,EAAgBqB,IAAIlC,EAAasC,cAM7D,MAJuB,KAAnBD,GACFtB,EAAOoB,KAAKC,EAAY,CAACpC,EAAasC,aAAcD,IAG/CtB,EAAOwB,KAAK,KACrB,CAEA,SAASH,EAAY5C,EAAgBQ,GACnC,OAAoB,IAAhBR,EAAKwB,OACA,GAAAlB,OAAGN,EAAK,GAAE,MAAAM,OAAKE,GAEjB,GAAAF,OAAGN,EAAK,GAAE,OAAAM,OAAMN,EAAKA,EAAKwB,OAAS,GAAE,MAAAlB,OAAKE,EACnD,CAgBA,SAASiC,EAAsBzC,GAC7B,OAAOA,GAAgC,KAAnBA,EAAU+B,MAAmC,KAApB/B,EAAUgC,MAGzD,SAAuBhC,GACb,IAAAQ,EAAiBC,EAAAA,EAAgBC,MAAMC,OAAMC,aAE/CC,EAA0C,MAAjB,OAAZL,QAAA,IAAAA,OAAY,EAAZA,EAAcwC,YAEjC,MAAO,GAAA1C,OAAG2C,EAAmBjD,EAAU+B,KAAMlB,GAAW,OAAAP,OAAM2C,EAAmBjD,EAAUgC,MAAOnB,GACpG,CATwEqC,CAAclD,GAAa,EACnG,CAUA,SAASiD,EAAmBjD,EAAcQ,QAAA,IAAAA,IAAAA,GAAA,GAClC,IAAAK,EAAiBb,EAAKG,MAAM,KAAKgD,IAAIC,QAApC/B,EAAIR,EAAA,GAAEU,EAAMV,EAAA,GAGnB,OAFa,IAAIwC,KAAK,EAAG,EAAG,EAAGhC,EAAME,GAGlC+B,oBAAeC,EAAW,CACzBC,KAAM,UACNC,OAAQ,UACRC,OAAQlD,IAETmD,aACL,C","sources":["../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/helpers/dealer-search-helper.ts"],"sourcesContent":["import { OpenHours } from '../../entities/dealer-response';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { OpeningHours } from '../../entities/content';\nimport { isString } from '../helper';\n\nexport function showDealerSearchDropdown(country: string): boolean {\n  const countriesWithDropdown = ['CN'];\n\n  return countriesWithDropdown.includes(country);\n}\n\nexport function getRegionSpecificCountry(country: string): string {\n  return country.includes('-') ? country.split('-')[0] : country;\n}\n\nexport function sanitizeDealerHomepage(originalUrl: string): string {\n  if (!originalUrl.startsWith('https://')) {\n    return `http://${originalUrl}`;\n  }\n\n  return originalUrl;\n}\n\nexport function getOpeningHours(openingHoursData: OpenHours[]): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  if (!openingHours) {\n    return '';\n  }\n\n  const WEEK_DAYS = [\n    openingHours.monday,\n    openingHours.tuesday,\n    openingHours.wednesday,\n    openingHours.thursday,\n    openingHours.friday,\n    openingHours.saturday,\n    openingHours.sunday\n  ];\n\n  const openingHoursMap = getOpeningHoursMap(openingHours, openingHoursData);\n  const result: string[] = [];\n  let previousOpeningHours = '';\n  let previousDayIndex = -1;\n  let consecutiveDays: string[] = [];\n\n  for (const day of WEEK_DAYS) {\n    const currentDayIndex = WEEK_DAYS.indexOf(day);\n    const openHours = openingHoursMap.get(day);\n    const openingHoursString = getOpeningHoursString(openHours);\n\n    if (openingHoursString !== '') {\n      if (previousOpeningHours === '') {\n        previousOpeningHours = openingHoursString;\n        consecutiveDays.push(day);\n      } else if (previousOpeningHours !== openingHoursString || previousDayIndex !== currentDayIndex - 1) {\n        result.push(getDayRange(consecutiveDays, previousOpeningHours));\n        consecutiveDays = [day];\n        previousOpeningHours = openingHoursString;\n      } else {\n        consecutiveDays.push(day);\n      }\n      previousDayIndex = currentDayIndex;\n    }\n  }\n\n  if (previousOpeningHours !== '') {\n    result.push(getDayRange(consecutiveDays, previousOpeningHours));\n  }\n\n  const dailyLunchOpenHours = openingHoursMap.get(openingHours.daily_lunch);\n  const dailyLunchTime = getOpeningHoursString(dailyLunchOpenHours);\n  if (dailyLunchTime !== '') {\n    result.push(getDayRange([openingHours.daily_lunch], dailyLunchTime));\n  }\n\n  return result.join('\\n');\n}\n\nfunction getDayRange(days: string[], openingHoursString: string) {\n  if (days.length === 1) {\n    return `${days[0]}: ${openingHoursString}`;\n  }\n  return `${days[0]} - ${days[days.length - 1]}: ${openingHoursString}`;\n}\n\nfunction getOpeningHoursMap(openingHours: OpeningHours, openingHoursData: OpenHours[]) {\n  const openingHoursMap: Map<string, { open: string; close: string }> = new Map();\n\n  for (const item of openingHoursData) {\n    const day = openingHours[item.day.toLowerCase() as keyof OpeningHours];\n\n    if (isString(day)) {\n      openingHoursMap.set(day, { open: item.open, close: item.close });\n    }\n  }\n\n  return openingHoursMap;\n}\n\nfunction getOpeningHoursString(openHours: { open: string; close: string } | undefined): string {\n  return openHours && openHours.open !== '' && openHours.close !== '' ? getTimeFormat(openHours) : '';\n}\n\nfunction getTimeFormat(openHours: { open: string; close: string }): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  const timeFormat = openingHours?.timeFormat === 12;\n\n  return `${convertToLocalTime(openHours.open, timeFormat)} - ${convertToLocalTime(openHours.close, timeFormat)}`;\n}\n\nfunction convertToLocalTime(time: string, timeFormat = false) {\n  const [hour, minute] = time.split(':').map(Number);\n  const date = new Date(0, 0, 0, hour, minute);\n\n  return date\n    .toLocaleString(undefined, {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: timeFormat\n    })\n    .toUpperCase();\n}\n"],"names":["showDealerSearchDropdown","e","includes","getRegionSpecificCountry","split","sanitizeDealerHomepage","startsWith","concat","getOpeningHours","n","navContentStore","state","dealer","openingHours","r","monday","tuesday","wednesday","thursday","friday","saturday","sunday","t","Map","a","length","o","i","day","toLowerCase","isString","set","open","close","getOpeningHoursMap","s","u","c","g","p","indexOf","l","getOpeningHoursString","get","push","getDayRange","d","daily_lunch","join","timeFormat","convertToLocalTime","getTimeFormat","map","Number","Date","toLocaleString","undefined","hour","minute","hour12","toUpperCase"],"sourceRoot":""}