{"version":3,"file":"static/js/2383.298aa16d.chunk.js","mappings":"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","sources":["../node_modules/@porschehn/navigation/dist/esm-es5/src/services/dealer-service.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/services/window-service.ts"],"sourcesContent":["import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n","/* istanbul ignore file */\n\nimport { breakpoint } from '@porsche-design-system/components-js/styles';\nimport { LatLong } from '../entities/places';\nimport { COOKIE_DOMAIN, MS_IN_MONTH } from '../utility/constants';\nimport {\n  camelToKebapCase,\n  getHTMLElement,\n  getString,\n  hasKey,\n  isString,\n  shallowCopySpecifiedAttributesWithDefault\n} from '../utility/helper';\nimport { NaviError, NaviErrorType, NaviErrorTypes } from '../utility/navi-error';\n\ntype CheckConsent = (args: {\n  processorId: string;\n  timeoutVar: Record<string, never>;\n  mapContainer: string;\n  callbacks: {\n    success: () => void;\n  };\n}) => void;\n\nexport type MarketingWindow = Window & {\n  GlobalConsent?: { Processor?: { googleMaps?: string } };\n  PCOM?: { globalConsent?: { checkConsent?: CheckConsent } };\n  ucPrivacyShield?: { checkConsent?: CheckConsent };\n};\n\nclass WindowService {\n  get location(): Location {\n    return window.location;\n  }\n\n  set location(newLocation: Location) {\n    window.location = newLocation;\n  }\n\n  get sessionStorage(): Storage {\n    return window.sessionStorage;\n  }\n\n  get localStorage(): Storage {\n    return window.localStorage;\n  }\n\n  set version(version: string) {\n    Object.assign(window, { PHN_HEADER_VERSION: version });\n  }\n\n  set navigationLoaded(loaded: boolean) {\n    Object.assign(window, { PHN_NAVIGATION_LOADED: loaded });\n  }\n\n  get bodyOverflow(): string {\n    return document.body.style.overflow;\n  }\n\n  get bodyHeight(): string {\n    return document.body.style.height;\n  }\n\n  requestAnimationFrame(callback: FrameRequestCallback): number {\n    return window.requestAnimationFrame(callback);\n  }\n\n  createDiv() {\n    return window.document.createElement('div');\n  }\n\n  getBreakpoint(): number {\n    const clientWidth = Math.max(window.document.documentElement.clientWidth, window.innerWidth || 0);\n\n    const matchingBreakpoint = Object.keys(breakpoint)\n      .reverse()\n      .find((foundBreakpoint) => hasKey(breakpoint, foundBreakpoint) && clientWidth >= breakpoint[foundBreakpoint]);\n\n    return typeof matchingBreakpoint === 'string' && hasKey(breakpoint, matchingBreakpoint)\n      ? breakpoint[matchingBreakpoint]\n      : 0;\n  }\n\n  get redirected(): boolean {\n    return (\n      (window as Window & { REDIRECTED?: boolean }).REDIRECTED === true ||\n      window.location.search.includes('cs_redirect=')\n    );\n  }\n\n  createIframe(id: string, src: string) {\n    const iframe = window.document.createElement('iframe');\n    iframe.id = id;\n    iframe.style.display = 'none';\n    iframe.src = src;\n\n    window.document.body.appendChild(iframe);\n  }\n\n  removeElement(id: string) {\n    window.document.getElementById(id)?.remove();\n  }\n\n  redirectToUrl(url: string) {\n    window.location.assign(url);\n  }\n\n  generateRandom(size: number): string {\n    const CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    const buffer = new Uint8Array(size);\n\n    window.crypto.getRandomValues(buffer);\n\n    const state: string[] = [];\n    for (let i = 0; i < buffer.byteLength; i += 1) {\n      const index = buffer[i] % CHARSET.length;\n      state.push(CHARSET[index]);\n    }\n\n    return state.join('');\n  }\n\n  /**\n   * site does NOT have consent mechanism -> consent NOT needed\n   * site does have consent mechanism + isConsentActive NOT exists -> consent NOT needed\n   * site does have consent mechanism + isConsentActive exists + isConsentActive -> consent needed\n   * site does have consent mechanism + NOT isConsentActive -> consent NOT needed\n   */\n\n  /**\n   * consent needed + consent given -> userConsent = true\n   * consent needed + consent NOT given -> userConsent = false\n   * consent NOT needed -> userConsent = true\n   */\n  maybeCheckMarketingConsent(handleSuccess: () => void): boolean {\n    const args = {\n      processorId: (window as MarketingWindow).GlobalConsent?.Processor?.googleMaps ?? 'Google Maps',\n      timeoutVar: {},\n      mapContainer: '',\n      callbacks: {\n        success: handleSuccess\n      }\n    };\n\n    if (typeof (window as MarketingWindow).PCOM?.globalConsent?.checkConsent === 'function') {\n      (window as MarketingWindow).PCOM?.globalConsent?.checkConsent?.(args);\n      return true;\n    }\n\n    if (typeof (window as MarketingWindow).ucPrivacyShield?.checkConsent === 'function') {\n      (window as MarketingWindow).ucPrivacyShield?.checkConsent?.(args);\n      return true;\n    }\n\n    handleSuccess();\n    return false;\n  }\n\n  async deriveChallenge(code: string): Promise<string> {\n    if (code.length < 43 || code.length > 128) {\n      throw new NaviError('invalid code length', NaviErrorTypes.INVALID_INPUT);\n    }\n\n    const buf = new ArrayBuffer(code.length);\n    const bufView = new Uint8Array(buf);\n\n    for (let i = 0; i < code.length; i++) {\n      bufView[i] = code.charCodeAt(i);\n    }\n\n    const buffer = await window.crypto.subtle.digest('SHA-256', bufView);\n\n    const bytes = new Uint8Array(buffer);\n\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n\n    return window.btoa(binary).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  }\n\n  async hashString(text: string): Promise<string> {\n    const msgUint8 = new TextEncoder().encode(text);\n    const hashBuffer = await window.crypto.subtle.digest('SHA-256', msgUint8);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  getScrollbarWidth(): string {\n    const scrollDiv = window.document.createElement('div');\n    scrollDiv.style.overflow = 'scroll';\n    window.document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    window.document.body.removeChild(scrollDiv);\n\n    return Number.isNaN(scrollbarWidth) ? '0px' : `${scrollbarWidth}px`;\n  }\n\n  async fetchGoogleMapsApi(\n    apiKey: string,\n    url = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`\n  ): Promise<typeof google> {\n    if (window.google !== undefined && window.google.maps !== undefined && window.google.maps.version !== undefined) {\n      return window.google;\n    }\n\n    const existingScript = document.getElementById('googleMaps'); // -> Current name?!\n\n    if (existingScript) {\n      return window.google;\n    }\n\n    const script = document.createElement('script');\n    script.src = url;\n    script.id = 'googleMaps';\n    document.head.appendChild(script);\n\n    return new Promise((resolve, reject) => {\n      script.onerror = () => {\n        reject(new NaviError('Failed to load google maps script.', NaviErrorTypes.GENERAL));\n      };\n      script.onload = () => {\n        resolve(window.google);\n      };\n    });\n  }\n\n  async getNavigatorLatLong(): Promise<LatLong> {\n    return new Promise((resolve, reject) => {\n      window.navigator.geolocation.getCurrentPosition(\n        ({ coords: { latitude, longitude } }) => {\n          resolve({ latitude, longitude });\n        },\n        (error) =>\n          reject(\n            new NaviError(\n              `geolocation.getCurrentPosition failed with ${error.code}: ${error.message}`,\n              getErrorType(error)\n            )\n          )\n      );\n    });\n  }\n\n  getCookie(cookieName: string): string {\n    return getString(\n      document.cookie\n        .split('; ')\n        .find((row) => row.startsWith(`${cookieName}=`))\n        ?.split('=')[1]\n    );\n  }\n\n  setCookie(cookieName: string, newValue: string): void {\n    document.cookie = `${cookieName}=${newValue};domain=${COOKIE_DOMAIN};expires=${new Date(\n      Date.now() + MS_IN_MONTH * 10\n    ).toUTCString()};`;\n  }\n\n  btoa(data: string) {\n    return window.btoa(data);\n  }\n\n  private initialBodyStyleValues = {\n    top: '',\n    position: '',\n    inlineSize: '',\n    overflowY: ''\n  } as const;\n  private initialDocumentScrollTop = 0;\n\n  lockScroll() {\n    this.initialBodyStyleValues = shallowCopySpecifiedAttributesWithDefault(\n      document.body.style,\n      this.initialBodyStyleValues\n    );\n    this.initialDocumentScrollTop = document.documentElement.scrollTop;\n\n    document.body.style.top = `-${document.documentElement.scrollTop}px`;\n    document.body.style.position = 'fixed';\n    document.body.style.inlineSize = '100%';\n    document.body.style.overflowY = 'scroll';\n  }\n\n  unlockScroll() {\n    Object.entries(this.initialBodyStyleValues).forEach(([key, value]) =>\n      document.body.style.setProperty(camelToKebapCase(key), value)\n    );\n\n    document.documentElement.scrollTop = this.initialDocumentScrollTop;\n  }\n\n  hasScrollbar(): boolean {\n    return window.document.body.offsetHeight > window.innerHeight;\n  }\n\n  async waitForElement(parent: HTMLElement, selector?: string): Promise<HTMLElement> {\n    if (!isString(selector)) {\n      return parent;\n    }\n\n    const el = getHTMLElement(parent.querySelector(selector));\n    if (el !== null) {\n      return el;\n    }\n    return new Promise((resolve) => {\n      const observer = new MutationObserver(() => {\n        const newEl = getHTMLElement(parent.querySelector(selector));\n        if (newEl !== null) {\n          resolve(newEl);\n          observer.disconnect();\n        }\n      });\n\n      observer.observe(parent, { childList: true, subtree: true });\n    });\n  }\n}\n\ninterface GeolocationPositionError {\n  code: number;\n  message: string;\n  PERMISSION_DENIED: number;\n  POSITION_UNAVAILABLE: number;\n  TIMEOUT: number;\n}\n\nexport function getErrorType(error: GeolocationPositionError): NaviErrorType {\n  switch (error.code) {\n    case error.PERMISSION_DENIED: {\n      return NaviErrorTypes.GEOLOCATION_DENIED;\n    }\n    case error.POSITION_UNAVAILABLE:\n    case error.TIMEOUT: {\n      return NaviErrorTypes.RETRY;\n    }\n    default: {\n      return NaviErrorTypes.GENERAL;\n    }\n  }\n}\n\nexport default new WindowService();\n"],"names":["getAllPPNDealersForMarket","e","r","t","getPPNDealers","latitude","longitude","radius","n","a","o","c","Headers","set","Environments","LOCAL","windowService","btoa","concat","u","coordinates","fetch","getQueryString","method","headers","i","d","sent","NaviError","NaviErrorTypes","GENERAL","status","NO_RESULTS","json","s","map","dealer","__rest","Object","assign","ppnDealer","getPPNDealer","find","id","undefined","dealersByRegionMap","Map","getPPNDealerByRegion","getPPNDealersByRegion","regions","flatMap","cities","dealers","values","reduce","__spreadArray","navStateStore","state","env","has","get","getConfig","BFF_ENDPOINT","initialBodyStyleValues","top","position","inlineSize","overflowY","initialDocumentScrollTop","defineProperty","prototype","window","location","sessionStorage","localStorage","PHN_HEADER_VERSION","PHN_NAVIGATION_LOADED","document","body","style","overflow","height","requestAnimationFrame","createDiv","createElement","getBreakpoint","Math","max","documentElement","clientWidth","innerWidth","keys","breakpoint","reverse","hasKey","REDIRECTED","search","includes","createIframe","display","src","appendChild","removeElement","getElementById","remove","redirectToUrl","generateRandom","Uint8Array","crypto","getRandomValues","byteLength","push","join","maybeCheckMarketingConsent","p","processorId","GlobalConsent","Processor","googleMaps","timeoutVar","mapContainer","callbacks","success","PCOM","globalConsent","checkConsent","l","call","ucPrivacyShield","deriveChallenge","length","INVALID_INPUT","ArrayBuffer","charCodeAt","subtle","digest","String","fromCharCode","replace","hashString","TextEncoder","encode","Array","from","toString","padStart","getScrollbarWidth","offsetWidth","removeChild","Number","isNaN","fetchGoogleMapsApi","google","maps","version","head","Promise","onerror","onload","getNavigatorLatLong","navigator","geolocation","getCurrentPosition","coords","code","message","PERMISSION_DENIED","GEOLOCATION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","RETRY","getErrorType","getCookie","getString","cookie","split","startsWith","setCookie","COOKIE_DOMAIN","Date","now","MS_IN_MONTH","toUTCString","lockScroll","this","shallowCopySpecifiedAttributesWithDefault","scrollTop","unlockScroll","entries","forEach","setProperty","camelToKebapCase","hasScrollbar","offsetHeight","innerHeight","waitForElement","isString","getHTMLElement","querySelector","MutationObserver","disconnect","observe","childList","subtree"],"sourceRoot":""}