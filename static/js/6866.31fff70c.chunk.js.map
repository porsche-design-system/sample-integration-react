{"version":3,"file":"static/js/6866.31fff70c.chunk.js","mappings":"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","sources":["../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/helpers/dealer-search-helper.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/services/dealer-service.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/autocomplete-search-field/autocomplete-search-field.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/autocomplete-search-field/autocomplete-search-field.scss?tag=phn-autocomplete-search-field&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-details-drawer/dealer-details-drawer.scss?tag=phn-dealer-details-drawer&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-details-drawer/dealer-details-drawer.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form/error-message.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.scss?tag=phn-dealer-search-by-number-of-dealers&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-by-number-of-dealers/dealer-search-by-number-of-dealers.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.scss?tag=phn-dealer-search-form-dropdown&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-dropdown/dealer-search-form-dropdown.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/services/maps-service.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-form-item-card.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-map-link.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-form-geolocation/dealer-search-form-geolocation.scss?tag=phn-dealer-search-form-geolocation&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-results.scss?tag=phn-dealer-search-results&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/dealer-search-results/dealer-search-results.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/menu-item-card/menu-item-card.scss?tag=phn-menu-item-card&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/menu-item-card/menu-item-card.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/myporsche-login/myporsche-login.scss?tag=phn-myporsche-login&encapsulation=scoped","../node_modules/@porschehn/navigation/dist/esm-es5/src/components/myporsche-login/myporsche-login.tsx","../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/ready.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/utility/timeout.ts"],"sourcesContent":["import { OpenHours } from '../../entities/dealer-response';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { OpeningHours } from '../../entities/content';\nimport { isString } from '../helper';\n\nexport function showDealerSearchDropdown(country: string): boolean {\n  const countriesWithDropdown = ['CN'];\n\n  return countriesWithDropdown.includes(country);\n}\n\nexport function getRegionSpecificCountry(country: string): string {\n  return country.includes('-') ? country.split('-')[0] : country;\n}\n\nexport function sanitizeDealerHomepage(originalUrl: string): string {\n  if (!originalUrl.startsWith('https://')) {\n    return `http://${originalUrl}`;\n  }\n\n  return originalUrl;\n}\n\nexport function getOpeningHours(openingHoursData: OpenHours[]): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  if (!openingHours) {\n    return '';\n  }\n\n  const WEEK_DAYS = [\n    openingHours.monday,\n    openingHours.tuesday,\n    openingHours.wednesday,\n    openingHours.thursday,\n    openingHours.friday,\n    openingHours.saturday,\n    openingHours.sunday\n  ];\n\n  const openingHoursMap = getOpeningHoursMap(openingHours, openingHoursData);\n  const result: string[] = [];\n  let previousOpeningHours = '';\n  let previousDayIndex = -1;\n  let consecutiveDays: string[] = [];\n\n  for (const day of WEEK_DAYS) {\n    const currentDayIndex = WEEK_DAYS.indexOf(day);\n    const openHours = openingHoursMap.get(day);\n    const openingHoursString = getOpeningHoursString(openHours);\n\n    if (openingHoursString !== '') {\n      if (previousOpeningHours === '') {\n        previousOpeningHours = openingHoursString;\n        consecutiveDays.push(day);\n      } else if (previousOpeningHours !== openingHoursString || previousDayIndex !== currentDayIndex - 1) {\n        result.push(getDayRange(consecutiveDays, previousOpeningHours));\n        consecutiveDays = [day];\n        previousOpeningHours = openingHoursString;\n      } else {\n        consecutiveDays.push(day);\n      }\n      previousDayIndex = currentDayIndex;\n    }\n  }\n\n  if (previousOpeningHours !== '') {\n    result.push(getDayRange(consecutiveDays, previousOpeningHours));\n  }\n\n  return result.join('\\n');\n}\n\nfunction getDayRange(days: string[], openingHoursString: string) {\n  if (days.length === 1) {\n    return `${days[0]}: ${openingHoursString}`;\n  }\n  return `${days[0]} - ${days[days.length - 1]}: ${openingHoursString}`;\n}\n\nfunction getOpeningHoursMap(openingHours: OpeningHours, openingHoursData: OpenHours[]) {\n  const openingHoursMap: Map<string, { open: string; close: string }> = new Map();\n\n  for (const item of openingHoursData) {\n    const day = openingHours[item.day.toLowerCase() as keyof OpeningHours];\n\n    if (isString(day)) {\n      openingHoursMap.set(day, { open: item.open, close: item.close });\n    }\n  }\n\n  return openingHoursMap;\n}\n\nfunction getOpeningHoursString(openHours: { open: string; close: string } | undefined): string {\n  return openHours && openHours.open !== '' && openHours.close !== '' ? getTimeFormat(openHours) : '';\n}\n\nfunction getTimeFormat(openHours: { open: string; close: string }): string {\n  const { openingHours } = navContentStore.state.dealer;\n\n  const timeFormat = openingHours?.timeFormat === 12;\n\n  return `${convertToLocalTime(openHours.open, timeFormat)} - ${convertToLocalTime(openHours.close, timeFormat)}`;\n}\n\nfunction convertToLocalTime(time: string, timeFormat = false) {\n  const [hour, minute] = time.split(':').map(Number);\n  const date = new Date(0, 0, 0, hour, minute);\n\n  return date\n    .toLocaleString(undefined, {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: timeFormat\n    })\n    .toUpperCase();\n}\n","import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n","import { Component, EventEmitter, h, Prop, State, Event, getAssetPath, Element, Listen, Watch } from '@stencil/core';\nimport { Prediction } from '../../entities/places';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getConfig, getHTMLInputElement, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\n\n@Component({\n  tag: 'phn-autocomplete-search-field',\n  styleUrl: 'autocomplete-search-field.scss',\n  scoped: true\n})\nexport class AutocompleteSearchField {\n  @Prop() placeholder!: string;\n  @Prop() predictions!: Prediction[];\n  @Prop() initialValue = '';\n  @Prop() errorState = '';\n  @Prop() errorMessage = '';\n\n  @State() showPredictions = false;\n  @State() highlightedPredictionIndex = -1;\n  @State() searchterm = this.initialValue;\n\n  @Event() searchInput!: EventEmitter<string>;\n  @Event() clearSearch!: EventEmitter<void>;\n  @Event() submitSearch!: EventEmitter<Prediction | null>;\n  @Event() predictionsToggle!: EventEmitter<boolean>;\n  @Event() autoCompleteLoaded!: EventEmitter<boolean>;\n\n  @Element() el!: HTMLPhnAutocompleteSearchFieldElement;\n\n  @Listen('click', { passive: true, target: 'window' })\n  clickListener(e: MouseEvent): void {\n    this.showPredictions =\n      e.composedPath()[0] === this.el.querySelector('input.autofocus') && this.predictions.length > 0;\n  }\n\n  @Listen('keydown', { passive: false })\n  keydownListener(e: KeyboardEvent): void {\n    if (e.key === 'Escape' && this.showPredictions) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.showPredictions = false;\n    }\n  }\n\n  @Watch('showPredictions')\n  watchShowPredictions(newValue: boolean): void {\n    this.predictionsToggle.emit(newValue);\n  }\n\n  @Watch('initialValue')\n  watchInitialValue(): void {\n    this.searchterm = this.initialValue;\n  }\n\n  componentDidRender(): void {\n    this.autoCompleteLoaded.emit(true);\n  }\n\n  private onKeyDown(pressedKey: string): void {\n    if (this.predictions.length === 0) return;\n\n    switch (pressedKey) {\n      case 'ArrowDown':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex === this.predictions.length - 1) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        }\n        this.highlightedPredictionIndex++;\n        break;\n\n      case 'ArrowUp':\n        if (!this.showPredictions) {\n          return;\n        }\n        if (this.highlightedPredictionIndex < 0) {\n          this.highlightedPredictionIndex = 0;\n          break;\n        } else if (this.highlightedPredictionIndex === 0) {\n          this.highlightedPredictionIndex = this.predictions.length - 1;\n          break;\n        }\n        this.highlightedPredictionIndex--;\n        break;\n    }\n\n    if (this.highlightedPredictionIndex > -1) {\n      this.searchterm = this.predictions[this.highlightedPredictionIndex].text;\n    }\n  }\n\n  private onSubmit() {\n    const prediction =\n      this.highlightedPredictionIndex < 0 ? this.predictions[0] : this.predictions[this.highlightedPredictionIndex];\n    this.submitSearch.emit(prediction ?? null);\n    this.showPredictions = false;\n    if (prediction !== undefined) this.searchterm = prediction.text;\n  }\n\n  render(): HTMLPhnAutocompleteSearchFieldElement {\n    return (\n      <form\n        class=\"form-container\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n      >\n        <phn-p-text-field-wrapper\n          data-test-id=\"dealer-search-form-input\"\n          state={isString(this.errorMessage) ? 'error' : 'none'}\n          message={this.errorMessage}\n        >\n          <input\n            class=\"autofocus\"\n            aria-label=\"Find a dealer by typing a city name or zip code\"\n            type=\"search\"\n            placeholder={this.placeholder}\n            autocomplete=\"off\"\n            role=\"combobox\"\n            data-validate=\"required\"\n            aria-expanded={(this.predictions.length > 0 && this.showPredictions).toString()}\n            aria-controls=\"predictions\"\n            aria-autocomplete=\"list\"\n            aria-activedescendant={this.showPredictions ? String(this.highlightedPredictionIndex) : undefined}\n            value={this.searchterm}\n            onInput={(event: Event) => {\n              event.preventDefault();\n\n              this.showPredictions = true;\n              this.highlightedPredictionIndex = -1;\n\n              const value = getHTMLInputElement(event.target)?.value;\n\n              if (!isString(value)) {\n                this.searchterm = '';\n                this.showPredictions = false;\n                dealerSearchResultsStore.state.savedDealerCookie = null;\n                this.clearSearch.emit();\n                return;\n              }\n\n              this.searchInput.emit(value);\n            }}\n            onKeyDown={(event: KeyboardEvent) => {\n              this.onKeyDown(event.key);\n            }}\n          />\n        </phn-p-text-field-wrapper>\n\n        {this.predictions.length > 0 && this.showPredictions ? (\n          <div class=\"prediction-container\">\n            <ul\n              id=\"predictions\"\n              data-test-id=\"dealer-search-autocomplete-predictions\"\n              role=\"listbox\"\n              aria-label=\"List of location predictions\"\n            >\n              {this.predictions.map((prediction, index) => (\n                <li\n                  key={prediction.id}\n                  class={index === this.highlightedPredictionIndex ? 'highlighted-prediction' : ''}\n                  role=\"option\"\n                  aria-selected={String(index === this.highlightedPredictionIndex)}\n                  id={String(index)}\n                  onClick={() => {\n                    this.highlightedPredictionIndex = index;\n                    this.onSubmit();\n                  }}\n                  onKeyDown={(event: KeyboardEvent) => {\n                    // TODO: does this code ever get executed?\n                    if (event.key === 'Enter') {\n                      this.onSubmit();\n                    }\n                  }}\n                >\n                  <phn-p-text color=\"inherit\">{prediction.text}</phn-p-text>\n                </li>\n              ))}\n            </ul>\n            <img\n              class=\"powered-by-google\"\n              src={getAssetPath(\n                `${getConfig(navStateStore.state.env).ASSETS_URL}/icon-assets/powered_by_google_on_white.png`\n              )}\n              alt=\"powered by Google\"\n            />\n          </div>\n        ) : null}\n      </form>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  .form-container {\n    display: block;\n    position: relative;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    box-sizing: border-box;\n\n    phn-p-text-field-wrapper {\n      width: 100%;\n\n      input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }\n      input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }\n      input[type=\"search\"]::-webkit-search-decoration,\n      input[type=\"search\"]::-webkit-search-cancel-button,\n      input[type=\"search\"]::-webkit-search-results-button,\n      input[type=\"search\"]::-webkit-search-results-decoration { display: none; }\n    }\n\n    &.inline-search-form {\n      margin-right: p-px-to-rem(16px);\n    }\n  }\n\n  .prediction-container {\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 10;\n    width: 100%;\n\n    background-color: white;\n    border: 1px solid $pds-theme-light-contrast-low;\n\n    ul {\n      margin-block: 0;\n      margin-inline: 0;\n      padding-inline: 0;\n      list-style-type: none;\n\n      li {\n        padding-left: p-px-to-rem(12px);\n        padding: p-px-to-rem(8px) 0 p-px-to-rem(8px) p-px-to-rem(12px);\n        color: $pds-theme-light-primary;\n\n        &:hover {\n          color: $pds-theme-light-notification-info;\n          background-color: $pds-theme-light-background-surface;\n        }\n\n        &.highlighted-prediction {\n          color: $pds-theme-light-notification-info;\n        }\n      }\n    }\n\n    .powered-by-google {\n      margin: p-px-to-rem(12px) 0 p-px-to-rem(12px) p-px-to-rem(12px);\n    }\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  margin-top: p-px-to-rem(26px);\n\n  @include pds-media-query-min('s') {\n    margin-top: p-px-to-rem(-2px);\n  }\n\n  @include pds-media-query-min('l') {\n    margin-top: p-px-to-rem(-3px);\n  }\n\n  @include pds-media-query-min('xxl') {\n    margin-top: p-px-to-rem(-7px);\n  }\n\n  .skeleton-headline {\n    width: auto;\n    height: p-px-to-rem(50px);\n    background: $pds-theme-light-contrast-low;\n    margin-bottom:  p-px-to-rem(28px);\n    border-radius: 4px;\n  }\n\n  phn-p-heading{\n    margin-bottom: p-px-to-rem(24px);\n  }\n\n  phn-menu-item {\n    margin-top: p-px-to-rem(24px);\n\n    &:first-of-type {\n      margin-top: p-px-to-rem(14px);\n    }\n  }\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    &.skeleton-menu-item {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { getDealerDetailsRoutingKey } from '../../entities/routing-key';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { DEALER_SEARCH_DISPLAY_ELEMENT_ID, EventAction, EventActions, MenuItemVariant } from '../../utility/constants';\nimport { addQueryParamsToUrl, isDesktop, isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { PPNDealer } from '../../entities/dealer-response';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getOpeningHours, sanitizeDealerHomepage } from '../../utility/helpers/dealer-search-helper';\nimport featureToggles from '../../services/feature-toggles';\n\n@Component({\n  tag: 'phn-dealer-details-drawer',\n  styleUrl: 'dealer-details-drawer.scss',\n  scoped: true\n})\nexport class DealerDetailsDrawer {\n  @Prop() dealerId!: string;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  @State() errorMessage = '';\n  @State() showSkeleton = true;\n\n  @Element() el!: HTMLPhnDealerDetailsDrawerElement;\n\n  @Event() clickDrawerHeaderBack!: EventEmitter<void>;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n  }\n\n  componentDidLoad(): void {\n    const dealer = this.getDealer();\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_DETAILS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(DEALER_SEARCH_DISPLAY_ELEMENT_ID),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer?.name\n      },\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: dealer?.name,\n        companyId: dealer?.porschePartnerNo\n      }\n    });\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.showSkeleton = false;\n  }\n\n  private getDealer(): PPNDealer {\n    const { ppnDealer: dealer } = dealerSearchResultsStore.state.ppnDealers[this.dealerId] || {};\n\n    return dealer;\n  }\n\n  private renderHeading(name: string): HTMLElement | null {\n    return (\n      <Fragment>\n        {this.showSkeleton ? <div class=\"skeleton-headline\" /> : null}\n        <phn-p-heading\n          style={{ display: this.showSkeleton ? 'none' : '' }}\n          tag=\"h3\"\n          size=\"large\"\n          data-test-id=\"dealer-headline\"\n        >\n          {name}\n        </phn-p-heading>\n      </Fragment>\n    );\n  }\n\n  render(): HTMLPhnDealerDetailsDrawerElement {\n    const ppnDealer = this.getDealer();\n\n    if (ppnDealer === undefined) {\n      return <div>{this.errorMessage}</div>;\n    }\n    const language = splitLocale(this.locale).language;\n    const { testDrive, finder, bookService } = navContentStore.state.dealer.details;\n\n    const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n    const address =\n      language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n    const name =\n      language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n    // postalCode is currently not available in addressLocalized\n    const hasAddress = isString(address.street) || isString(ppnDealer.address.postalCode) || isString(address.city);\n    const hasPhoneNumber = isString(ppnDealer.contactDetails.phoneNumber);\n    const hasEmail = isString(ppnDealer.contactDetails.emailAddress);\n    const hasHomepage = isString(ppnDealer.contactDetails.homepage);\n    const hasTestdrive = testDrive && isString(testDrive?.text) && isString(testDrive?.link);\n    const hasName = isString(ppnDealer.nameLocalized) || isString(ppnDealer.name);\n    const openingHours = getOpeningHours(ppnDealer.contactDetails.contactOpeningHours);\n    const hasOpeningHours = openingHours !== '';\n\n    let country = '';\n    try {\n      country = splitLocale(this.locale).country;\n    } catch (err) {\n      // throw the error away\n    }\n    const dealerAddress =\n      country === 'JP'\n        ? `〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`\n        : `${address.street}, ${ppnDealer.address.postalCode} ${address.city}`;\n    const customDatalayerProperties = {\n      componentSearch: {\n        searchTerm: dealerSearchResultsStore.state.searchTerm\n      },\n      partner: {\n        companyName: name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    };\n\n    return (\n      <Host>\n        {hasName && isDesktop(this.breakpoint) ? this.renderHeading(name) : null}\n        {hasAddress ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'address')}\n            analyticsId=\"mainmenu.finddealer.map\"\n            text={dealerAddress}\n            iconLeft=\"pin\"\n            data-test-id=\"dealer-address\"\n            link={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\n              `${address.street},${ppnDealer.address.postalCode},${address.city}`\n            )}`}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {featureToggles.isDealerSearchOpeningHoursEnabled() && hasOpeningHours ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'openingHours')}\n            analyticsId=\"mainmenu.finddealer.openinghours\"\n            text={openingHours}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-opening-hours\"\n            iconLeft=\"clock\"\n          />\n        ) : null}\n\n        {hasPhoneNumber ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'number')}\n            analyticsId=\"mainmenu.finddealer.phone\"\n            text={ppnDealer.contactDetails.phoneNumber}\n            iconLeft=\"phone\"\n            data-test-id=\"dealer-phonenumber\"\n            link={`tel:${ppnDealer.contactDetails.phoneNumber}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasEmail ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'email')}\n            analyticsId=\"mainmenu.finddealer.email\"\n            text={ppnDealer.contactDetails.emailAddress}\n            iconLeft=\"email\"\n            data-test-id=\"dealer-email\"\n            link={`mailto:${ppnDealer.contactDetails.emailAddress}`}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {hasHomepage ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, 'homepage')}\n            analyticsId=\"mainmenu.finddealer.website\"\n            text={ppnDealer.contactDetails.homepage.replace('https://', '')}\n            iconLeft=\"globe\"\n            data-test-id=\"dealer-homepage\"\n            link={sanitizeDealerHomepage(ppnDealer.contactDetails.homepage)}\n            target=\"_blank\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {finder && isString(country) ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, finder.id)}\n            analyticsId={finder.id}\n            text={finder.text}\n            data-test-id=\"dealer-finder-cars\"\n            link={addQueryParamsToUrl(finder.link, { dealership: ppnDealer.ppnOrgId })}\n            iconLeft=\"car\"\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n          />\n        ) : null}\n\n        {bookService ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, bookService.text)}\n            analyticsId={bookService.id}\n            text={bookService.text}\n            link={addQueryParamsToUrl(bookService.link, { dealer: ppnDealer.porschePartnerNo })}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-service\"\n            iconLeft={'wrench'}\n          />\n        ) : null}\n\n        {hasTestdrive ? (\n          <DealerDetailCard\n            showSkeleton={this.showSkeleton}\n            elementId={getDealerDetailsRoutingKey(this.dealerId, testDrive.text)}\n            analyticsId={testDrive.id}\n            text={testDrive.text}\n            link={testDrive.link}\n            datalayerEventAction={EventActions.DEALER_CONTACT_CLICK}\n            customDatalayerProperties={customDatalayerProperties}\n            variant={MenuItemVariant.DealerDetails}\n            data-test-id=\"dealer-book-testdrive\"\n            iconLeft={'steering-wheel'}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n\ntype DealerDetailCardType = {\n  showSkeleton: boolean;\n  elementId?: string;\n  'data-test-id': string;\n  analyticsId: string;\n  text: string;\n  link?: string;\n  customDatalayerProperties: TDataLayer;\n  datalayerEventAction: EventAction;\n  variant: string;\n  iconLeft: string;\n  target?: string;\n  ariaLabel?: string;\n};\n\nfunction DealerDetailCard(props: DealerDetailCardType): HTMLElement {\n  return <phn-menu-item-card tabIndex={0} class={`${props.showSkeleton ? 'skeleton' : ''}`} {...props} />;\n}\n","import { h } from '@stencil/core';\n\nexport default function ErrorMessage({\n  errorMessage,\n  onDismiss\n}: {\n  errorMessage: string;\n  onDismiss: () => void;\n}): HTMLElement {\n  return (\n    <div class=\"error-message animated\">\n      <phn-p-inline-notification state=\"error\" description={errorMessage} onDismiss={onDismiss} />\n    </div>\n  );\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { splitLocale } from '../../entities/locale';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getAllPPNDealersForMarket } from '../../services/dealer-service';\nimport { getConfig, isString } from '../../utility/helper';\nimport logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport {\n  DEALER_MARKET_SEARCH_TERM,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\n\n@Component({\n  tag: 'phn-dealer-search-by-number-of-dealers',\n  styleUrl: 'dealer-search-by-number-of-dealers.scss',\n  scoped: true\n})\nexport class DealerSearchByNumberOfDealers {\n  @State() isLoading = false;\n  @State() formErrorMessage: string | null = null;\n\n  @Prop() locale!: string;\n\n  @Element() el!: HTMLPhnDealerSearchByNumberOfDealersElement;\n\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { dealer } = navContentStore.state;\n      if (dealer.numberOfDealers <= 5) {\n        this.fetchAllDealersForMarket();\n      }\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  private async fetchAllDealersForMarket() {\n    const { error: errorContent } = navContentStore.state;\n\n    try {\n      this.isLoading = true;\n\n      const { country } = splitLocale(this.locale);\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getAllPPNDealersForMarket(\n        env,\n        getConfig(env).DEALER_API_URL_ALL_DEALERS,\n        country\n      );\n\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: DEALER_MARKET_SEARCH_TERM,\n        numberOfResults: dealer.numberOfDealers\n      }\n    });\n  }\n\n  private reset() {\n    this.formErrorMessage = null;\n    this.isLoading = false;\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render() {\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    if (isString(this.formErrorMessage))\n      return <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />;\n  }\n}\n","@import '../../scss';\n\n:host {\n  display: block;\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n\n  .city-select-form-field{\n    padding-top: p-px-to-rem(24px);\n  }\n\n  .title-container {\n    display: flex;\n    flex-direction: row;\n    border: 2px solid rgb(107, 109, 112);\n    border-radius: 5px;\n\n    transition: background-color 0.24s ease;\n    margin: 0;\n    min-height: p-px-to-rem(54px);\n\n    phn-p-text {\n      padding-left: 19px;\n    }\n\n\n    phn-p-icon{\n      margin-right: p-px-to-rem(16px);\n      padding-top: -8px;\n      outline: 0;\n    }\n\n    div.text-limit {\n      width: 80%;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, JSX, Listen, Prop, State } from '@stencil/core';\nimport { getPPNDealersByRegion } from '../../services/dealer-service';\nimport { splitLocale } from '../../entities/locale';\nimport { City, DealersByRegion } from '../../entities/dealer-response';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { getErrorMessage } from '../../utility/navi-error';\nimport Logger from '../../services/logger';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { isString } from '../../utility/helper';\nimport { componentsOnReady } from '../../utility/ready';\nimport { Timeout } from '../../utility/timeout';\nimport {\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport analyticsManager from '../../services/analytics/analytics-manager';\n\n@Component({\n  tag: 'phn-dealer-search-form-dropdown',\n  styleUrl: 'dealer-search-form-dropdown.scss',\n  scoped: true\n})\nexport class DealerSearchFormDropdown {\n  @Prop() locale = '';\n  @Prop() breakpoint!: number;\n\n  @State() isLoading = false;\n  @State() errorMessage: string | null = null;\n  @State() dealersOfRegion: DealersByRegion = { regions: [] };\n  @State() cities: City[] = [];\n  @State() selectedProvince = '';\n  @State() selectedCity = '';\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormDropdownElement;\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad();\n    this.getDealersByRegion();\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  @Listen('removeSkeletonOnDealerSearchForm')\n  loadedAutoCompleteListener(_event: Event): void {\n    this.showSkeleton = false;\n  }\n\n  private async getDealersByRegion() {\n    const { error: errorContent } = navContentStore.state;\n    const { country } = splitLocale(this.locale);\n\n    try {\n      this.isLoading = true;\n      this.dealersOfRegion = await getPPNDealersByRegion(country);\n    } catch (err) {\n      Logger.error('FETCH_DEALERS', err as Error);\n      this.errorMessage = getErrorMessage(errorContent, err as Error);\n    } finally {\n      this.isLoading = false;\n      this.dealerSearchFormEvent.emit();\n      this.emitResultsLoadEvent();\n    }\n  }\n\n  private onCitySelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedCity = (event.target as HTMLSelectElement).value;\n    this.selectedCity = selectedCity;\n    dealerSearchResultsStore.state.ppnDealers =\n      this.cities.find((city) => {\n        return [city.cityName, city.cityNameLocalized].includes(selectedCity);\n      })?.dealers || {};\n    dealerSearchResultsStore.state.results = Object.keys(dealerSearchResultsStore.state.ppnDealers);\n    dealerSearchResultsStore.state.searchTerm = `${this.selectedProvince}, ${this.selectedCity}`;\n  }\n\n  private onProvinceSelect(event: Event): void {\n    /* istanbul ignore if */\n    if (event.target === null) {\n      return;\n    }\n\n    const selectedProvince = (event.target as HTMLSelectElement).value;\n    this.cities = this.getCitiesByGivenRegionName(selectedProvince);\n    this.selectedProvince = selectedProvince;\n  }\n\n  private getCitiesByGivenRegionName(province: string): City[] {\n    const regions = this.dealersOfRegion.regions;\n\n    const selectedRegion = regions.find(({ regionName, regionNameLocalized }) =>\n      [regionName, regionNameLocalized].includes(province)\n    );\n\n    return selectedRegion?.cities || [];\n  }\n\n  private emitPageLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer } = navContentStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm),\n        displayElementName: dealer.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length || 0\n      }\n    });\n  }\n\n  private emitResultsLoadEvent() {\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.isLoading = false;\n    this.selectedProvince = '';\n    this.selectedCity = '';\n\n    dealerSearchResultsStore.state.results = null;\n    dealerSearchResultsStore.state.savedDealerCookie = null;\n\n    this.clearSearchEvent.emit();\n  }\n\n  render(): JSX.Element {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n    const searchText = dealerSearchResultsStore.state.searchTerm;\n\n    if (this.isLoading) {\n      return (\n        <div class=\"spinner\">\n          <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n        </div>\n      );\n    }\n\n    return (\n      <Host>\n        {results && results.length > 0 ? (\n          <form\n            class=\"form-container\"\n            onSubmit={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <div>\n              <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n                <div class=\"text-limit\">\n                  <phn-p-text\n                    weight=\"regular\"\n                    size=\"small\"\n                    tag=\"div\"\n                    ellipsis=\"true\"\n                    color=\"contrast-medium\"\n                    data-test-id=\"dealer-search-form-input\"\n                  >\n                    {searchText}\n                  </phn-p-text>\n                </div>\n                <phn-p-icon\n                  name=\"close\"\n                  class=\"close-icon\"\n                  style={{ display: this.showSkeleton ? 'none' : '', cursor: 'pointer' }}\n                  onClick={(event: Event) => {\n                    event.preventDefault();\n                    this.reset();\n                  }}\n                />\n              </div>\n            </div>\n          </form>\n        ) : (\n          <Fragment>\n            <phn-p-select-wrapper\n              filter\n              label={dealerContent.search.dropdown.province}\n              required\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n            >\n              <select\n                name=\"dealers-province\"\n                onChange={(event) => this.onProvinceSelect(event)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                <option hidden selected>\n                  {dealerContent.search.dropdown.selectAProvince}\n                </option>\n                {this.dealersOfRegion.regions.map((region) => {\n                  const province =\n                    splitLocale(this.locale).language === 'en' || region.regionNameLocalized === null\n                      ? region.regionName\n                      : region.regionNameLocalized;\n                  return <option value={province}>{province}</option>;\n                })}\n              </select>\n            </phn-p-select-wrapper>\n\n            <phn-p-select-wrapper\n              style={{ display: this.showSkeleton ? 'none' : '' }}\n              class=\"city-select-form-field\"\n              filter=\"true\"\n              label={dealerContent.search.dropdown.city}\n              required\n            >\n              <select\n                disabled={!isString(this.selectedProvince)}\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n                name=\"dealers-cities\"\n                onChange={(event) => {\n                  this.onCitySelect(event);\n                }}\n              >\n                <option hidden>{dealerContent.search.dropdown.selectACity}</option>\n                {this.cities.map((city) => (\n                  <option>\n                    {splitLocale(this.locale).language === 'en' || city.cityNameLocalized === null\n                      ? city.cityName\n                      : city.cityNameLocalized}\n                  </option>\n                ))}\n              </select>\n            </phn-p-select-wrapper>\n\n            {isString(this.errorMessage) ? (\n              <ErrorMessage errorMessage={this.errorMessage} onDismiss={() => this.reset()} />\n            ) : null}\n          </Fragment>\n        )}\n      </Host>\n    );\n  }\n}\n","/* istanbul ignore file */\nimport { splitLocale } from '../entities/locale';\nimport { LatLong, Prediction } from '../entities/places';\nimport { isString } from '../utility/helper';\nimport windowService from './window-service';\nimport { NaviErrorTypes, NaviError, NaviErrorType } from '../utility/navi-error';\nimport { getRegionSpecificCountry } from '../utility/helpers/dealer-search-helper';\n\nexport class MapsService {\n  private autocompleteService: google.maps.places.AutocompleteService | null = null;\n  private placesService: google.maps.places.PlacesService | null = null;\n  private geocoderService: google.maps.Geocoder | null = null;\n  private getLocation: ((latLong: LatLong) => google.maps.LatLng) | null = null;\n\n  async init(apiKey: string): Promise<void> {\n    try {\n      const google = await windowService.fetchGoogleMapsApi(apiKey);\n      this.autocompleteService = new google.maps.places.AutocompleteService();\n      this.placesService = new google.maps.places.PlacesService(new google.maps.Map(windowService.createDiv()));\n      this.geocoderService = new google.maps.Geocoder();\n      this.getLocation = (latLong: LatLong) => new google.maps.LatLng(latLong.latitude, latLong.longitude);\n    } catch (err) {\n      throw new NaviError(`windowService.fetchGoogleMapsApi failed with error: ${err}`, NaviErrorTypes.GENERAL);\n    }\n  }\n\n  async getPredictions(input: string, locale: string): Promise<Prediction[]> {\n    if (input.length === 0) {\n      return [];\n    }\n    //ToDo: Check what todo if country is no valid iso-code\n    const predictions = await new Promise<google.maps.places.AutocompletePrediction[] | null>((resolve, reject) => {\n      if (this.autocompleteService === null) {\n        reject(new NaviError('autocompleteService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.autocompleteService.getPlacePredictions(\n        {\n          input,\n          componentRestrictions: { country: getRegionSpecificCountry(splitLocale(locale).country) }\n        },\n        (predictions, status) =>\n          status === 'OK'\n            ? resolve(predictions)\n            : reject(\n                new NaviError(`autocompleteService.getPlacePredictions failed with ${status}`, getErrorType(status))\n              )\n      );\n    });\n\n    return (\n      predictions\n        ?.filter(({ place_id, description }) => isString(place_id) && isString(description))\n        .map(({ place_id: id, description: text }) => ({ id, text })) ?? []\n    );\n  }\n\n  async getPlaceCoordinates(placeId: string): Promise<LatLong> {\n    const response = await new Promise<google.maps.places.PlaceResult | null>((resolve, reject) => {\n      if (this.placesService === null) {\n        reject(new NaviError('placesService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.placesService.getDetails(\n        {\n          placeId\n        },\n        (response, status) =>\n          status === 'OK'\n            ? resolve(response)\n            : reject(new NaviError(`placeService.getDetails failed with ${status}`, getErrorType(status)))\n      );\n    });\n\n    const latitude = response?.geometry?.location?.lat();\n    const longitude = response?.geometry?.location?.lng();\n\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n      throw new NaviError(\n        `placesService.getDetails did not find latitude or longitude for placeId: ${placeId}`,\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return { latitude, longitude };\n  }\n\n  async getFormattedAddressFromCoordinates(latLong: LatLong): Promise<string> {\n    if (this.getLocation === null) {\n      throw new NaviError('getLocation is not initialised', NaviErrorTypes.GENERAL);\n    }\n\n    const location = this.getLocation(latLong);\n\n    const response = await new Promise<google.maps.GeocoderResult[] | null>((resolve, reject) => {\n      if (this.geocoderService === null) {\n        reject(new NaviError('geocoderService is not initialised', NaviErrorTypes.GENERAL));\n        return;\n      }\n\n      this.geocoderService.geocode({ location }, (response, status) => {\n        status === 'OK'\n          ? resolve(response)\n          : reject(new NaviError(`geocoderService.geocode failed with status ${status}`, getErrorType(status)));\n      });\n    });\n\n    if (response === null || response.length === 0) {\n      throw new NaviError(\n        'geocoderService.geocode did not find the location based on coordinates.',\n        NaviErrorTypes.NO_RESULTS\n      );\n    }\n\n    return response[0].formatted_address;\n  }\n}\n\nexport function getErrorType(status: string): NaviErrorType {\n  switch (status) {\n    case 'INVALID_REQUEST': {\n      return NaviErrorTypes.INVALID_INPUT;\n    }\n    case 'NOT_FOUND':\n    case 'ZERO_RESULTS': {\n      return NaviErrorTypes.NO_RESULTS;\n    }\n    case 'OVER_QUERY_LIMIT':\n    case 'UNKNOWN_ERROR': {\n      return NaviErrorTypes.RETRY;\n    }\n    case 'ERROR':\n    case 'REQUEST_DENIED':\n    default: {\n      return NaviErrorTypes.GENERAL;\n    }\n  }\n}\n\nexport default new MapsService();\n","import { Component, Element, Event, EventEmitter, Fragment, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { LatLong, Prediction } from '../../entities/places';\nimport { splitLocale } from '../../entities/locale';\nimport { navStateStore } from '../../state/nav-state-store';\nimport { getPPNDealers } from '../../services/dealer-service';\nimport { getConfig, getString, isString } from '../../utility/helper';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport logger from '../../services/logger';\nimport { getErrorMessage, NaviError, NaviErrorTypes } from '../../utility/navi-error';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER,\n  DEALER_SEARCH_TARGET_ELEMENT,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport mapsService from '../../services/maps-service';\nimport windowService from '../../services/window-service';\nimport { Timeout } from '../../utility/timeout';\nimport { navContentStore } from '../../state/nav-content-store';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { componentsOnReady } from '../../utility/ready';\nimport { getRegionSpecificCountry } from '../../utility/helpers/dealer-search-helper';\n\n@Component({\n  tag: 'phn-dealer-search-form-geolocation',\n  styleUrl: 'dealer-search-form-geolocation.scss',\n  scoped: true\n})\nexport class DealerSearchFormGeolocation {\n  @Prop() locale!: string;\n\n  @State() predictions: Prediction[] = [];\n  @State() errorMessage: string | null = null;\n  @State() formErrorMessage: string | null = null;\n  @State() isLoading = false;\n  @State() showGeolocationButton = dealerSearchResultsStore.state.results === null;\n  @State() animateResults = false;\n  @State() searchTerm = dealerSearchResultsStore.state.searchTerm;\n  @State() showSkeleton = true;\n\n  @Event() dealerSearchFormEvent!: EventEmitter;\n  @Event() clearSearchEvent!: EventEmitter;\n  @Event() removeSkeletonOnDealerSearchForm!: EventEmitter;\n\n  @Element() el!: HTMLPhnDealerSearchFormGeolocationElement;\n\n  private debounceTimeout = new Timeout(100);\n\n  @Listen('autoCompleteLoaded')\n  loadedAutoCompleteListener(): void {\n    this.showSkeleton = false;\n  }\n\n  private async waitForComponentsToLoad() {\n    await componentsOnReady(this.el, new Timeout(5000));\n    this.removeSkeletonOnDealerSearchForm.emit();\n  }\n\n  disconnectedCallback(): void {\n    dealerSearchResultsStore.state.searchTerm = this.searchTerm;\n    this.debounceTimeout.cancel();\n  }\n\n  componentWillLoad(): void {\n    this.waitForComponentsToLoad().then(() => {\n      const { error: errorContent } = navContentStore.state;\n\n      mapsService.init('GOOGLE_API_KEY').catch((err: Error) => {\n        logger.error('INIT_MAPS_SERVICE', err);\n        this.formErrorMessage = getErrorMessage(errorContent, err);\n        this.errorMessage = null;\n      });\n    });\n  }\n\n  componentDidLoad(): void {\n    this.emitPageLoadEvent();\n  }\n\n  private emitPageLoadEvent() {\n    const { dealer } = navContentStore.state;\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType('', ElementTypes.dealerSearchForm, true),\n        displayElementName: dealer.text\n      }\n    });\n  }\n\n  private emitResultsLoadEvent(searchTerm: string) {\n    const { results } = dealerSearchResultsStore.state;\n    const { dealer: dealerContent } = navContentStore.state;\n\n    const componentSearchSearchTerm = isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM;\n    const numberOfResults = results?.length || 0;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULTS_SCREEN_LOAD, {\n      componentDisplay: {\n        displayElementId: analyticsManager.getDealerResultsLoadDisplayElementId(\n          DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER\n        ),\n        displayElementType: analyticsManager.getDealerResultsLoadDisplayElementType(),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: componentSearchSearchTerm,\n        numberOfResults: numberOfResults\n      }\n    });\n  }\n\n  private async fetchDealers(getSearchTerms: () => Promise<[string, LatLong]>) {\n    const { error: errorContent } = navContentStore.state;\n    try {\n      this.reset();\n      this.isLoading = true;\n\n      const [searchTerm, placeCoordinates] = await getSearchTerms();\n      const { env } = navStateStore.state;\n\n      const ppnDealerSearchResults = await getPPNDealers(\n        env,\n        getConfig(env).DEALER_API_URL,\n        placeCoordinates,\n        getRegionSpecificCountry(splitLocale(this.locale).country)\n      );\n\n      dealerSearchResultsStore.state.searchTerm = searchTerm;\n      dealerSearchResultsStore.state.results = ppnDealerSearchResults.map(({ ppnDealer: dealer }) => dealer.id);\n      dealerSearchResultsStore.state.ppnDealers = ppnDealerSearchResults.reduce(\n        (dealers, dealerSearchResult) => ({\n          ...dealers,\n          [dealerSearchResult.ppnDealer.id]: dealerSearchResult\n        }),\n        dealerSearchResultsStore.state.ppnDealers\n      );\n      this.showGeolocationButton = false;\n    } catch (err) {\n      logger.error('FETCH_DEALERS', err as Error);\n      this.formErrorMessage = getErrorMessage(errorContent, err as Error);\n      this.errorMessage = null;\n    } finally {\n      this.isLoading = false;\n      this.animateResults = true;\n    }\n  }\n\n  private async onSubmit(prediction: Prediction | null) {\n    const { dealer: dealerContent, error: errorContent } = navContentStore.state;\n\n    if (!isString(this.searchTerm)) {\n      this.errorMessage = errorContent.noInput;\n      this.formErrorMessage = '';\n      return;\n    }\n\n    await this.fetchDealers(async () => {\n      if (prediction === null) {\n        throw new NaviError('Dealer search form submitted without prediction', NaviErrorTypes.INVALID_INPUT);\n      }\n\n      this.searchTerm = prediction.text;\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_SEARCH_CLICK, {\n        componentClick: {\n          clickElementId: prediction.id,\n          clickElementName: prediction.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: prediction.text\n        }\n      });\n\n      const placeCoordinates = await mapsService.getPlaceCoordinates(prediction.id);\n\n      return [prediction.text, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(this.searchTerm);\n  }\n\n  private async getCurrentLocation(): Promise<void> {\n    const { dealer: dealerContent } = navContentStore.state;\n\n    await this.fetchDealers(async () => {\n      const placeCoordinates = await windowService.getNavigatorLatLong();\n      const formattedAddress = await mapsService.getFormattedAddressFromCoordinates(placeCoordinates);\n\n      this.searchTerm = '';\n\n      globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_GEOLOCATION_CLICK, {\n        componentClick: {\n          clickElementId: dealerContent.search.geolocation.id,\n          clickElementName: dealerContent.search.geolocation.text,\n          clickElementType: ClickElementTypes.Button,\n          targetElement: DEALER_SEARCH_TARGET_ELEMENT\n        },\n        componentDisplay: {\n          displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n          displayElementType: analyticsManager.calculateDisplayElementType(\n            RoutingKeys.DEALER_SEARCH,\n            ElementTypes.dealerSearchForm\n          ),\n          displayElementName: dealerContent.text\n        },\n        componentSearch: {\n          searchTerm: GEOLOCATION_BUTTON_SEARCH_TERM\n        }\n      });\n\n      return [formattedAddress, placeCoordinates];\n    });\n\n    this.emitResultsLoadEvent(GEOLOCATION_BUTTON_SEARCH_TERM);\n  }\n\n  private async onDealerSearchEntry(searchTerm: string): Promise<void> {\n    const { error } = navContentStore.state;\n    try {\n      this.searchTerm = searchTerm;\n      this.errorMessage = null;\n      this.formErrorMessage = null;\n      this.showGeolocationButton = dealerSearchResultsStore.state.results === null;\n      this.predictions = await mapsService.getPredictions(searchTerm, this.locale);\n    } catch (err) {\n      logger.error('GET_PREDICTIONS', err as Error);\n      this.errorMessage = getErrorMessage(error, err as Error);\n      this.predictions = [];\n    }\n  }\n\n  private reset() {\n    this.errorMessage = null;\n    this.formErrorMessage = null;\n    this.animateResults = false;\n    this.showGeolocationButton = true;\n    this.isLoading = false;\n\n    dealerSearchResultsStore.state.results = null;\n  }\n\n  render(): HTMLPhnDealerSearchFormElement {\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results } = dealerSearchResultsStore.state;\n\n    return (\n      <Host class={this.showSkeleton ? 'skeleton' : ''}>\n        <div class=\"input-container\">\n          {this.showSkeleton ? <div class=\"skeleton-autocomplete-search-field\" /> : null}\n          <phn-autocomplete-search-field\n            placeholder={dealerContent.search.form.inputPlaceholder}\n            initialValue={dealerSearchResultsStore.state.searchTerm}\n            predictions={this.predictions}\n            onSearchInput={(e) => this.debounceTimeout.set(() => this.onDealerSearchEntry(e.detail))}\n            onClearSearch={() => {\n              this.predictions = [];\n              dealerSearchResultsStore.state.searchTerm = '';\n              this.searchTerm = '';\n              this.reset();\n              this.clearSearchEvent.emit();\n              this.showGeolocationButton = true;\n            }}\n            onSubmitSearch={(e) => this.onSubmit(e.detail)}\n            errorMessage={getString(this.errorMessage)}\n            style={{ display: this.showSkeleton ? 'none' : '' }}\n          />\n        </div>\n\n        {this.isLoading && (\n          <div class=\"spinner\">\n            <phn-p-spinner size=\"medium\" aria={{ 'aria-label': 'Loading page content' }} />\n          </div>\n        )}\n\n        {this.showGeolocationButton && results === null ? (\n          <Fragment>\n            <div\n              class={`or-container ${this.isLoading ? 'animate-out' : ''}`}\n              onAnimationEnd={() => {\n                this.showGeolocationButton = false;\n              }}\n            >\n              {this.showSkeleton ? <div class=\"skeleton-or-text\" /> : null}\n              <phn-p-text\n                color=\"inherit\"\n                size=\"inherit\"\n                tag=\"div\"\n                data-test-id=\"dealer-search-or-label\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.or}\n              </phn-p-text>\n              {this.showSkeleton ? <div class=\"skeleton-geolocation-button\" /> : null}\n              <phn-p-button\n                class={'geolocation'}\n                onClick={() => this.getCurrentLocation()}\n                variant=\"tertiary\"\n                icon=\"locate\"\n                style={{ display: this.showSkeleton ? 'none' : '' }}\n              >\n                {dealerContent.search.geolocation.text}\n              </phn-p-button>\n            </div>\n          </Fragment>\n        ) : null}\n\n        {isString(this.formErrorMessage) ? (\n          <ErrorMessage errorMessage={this.formErrorMessage} onDismiss={() => this.reset()} />\n        ) : null}\n      </Host>\n    );\n  }\n}\n","import { PPNDealer, PPNDealerSearchResult } from '../../entities/dealer-response';\nimport { EventEmitter, h, JSX } from '@stencil/core';\nimport { isString } from '../../utility/helper';\nimport { getDealerDetailsRoutingKey, RoutingKeys } from '../../entities/routing-key';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { splitLocale } from '../../entities/locale';\n\nexport function DealerSearchFormItemCard({\n  dealer,\n  showOverlay,\n  eventEmitter,\n  locale\n}: {\n  dealer: PPNDealerSearchResult;\n  showOverlay?: boolean;\n  eventEmitter: EventEmitter;\n  locale: string;\n}): JSX.Element | null {\n  const { ppnDealer, distance } = dealer;\n  const language = splitLocale(locale).language;\n  const isAddressLocalized = Object.values(ppnDealer.addressLocalized).every((x) => x != null && x != '');\n  // postalCode is currently not available in addressLocalized\n  const address =\n    language === 'en' ? ppnDealer.address : isAddressLocalized ? ppnDealer.addressLocalized : ppnDealer.address;\n  const name =\n    language === 'en' ? ppnDealer.name : isString(ppnDealer.nameLocalized) ? ppnDealer.nameLocalized : ppnDealer.name;\n  const numberOfDealers = navContentStore.state.dealer.numberOfDealers;\n  let country = '';\n  try {\n    country = splitLocale(locale).country;\n  } catch (err) {\n    // throw the error away\n  }\n  const onDealerCardClick = (ppnDealer: PPNDealer): void => {\n    const dealerDetailsRoutingKey = getDealerDetailsRoutingKey(ppnDealer.id);\n    eventEmitter.emit([dealerDetailsRoutingKey]);\n    const { dealer: dealerContent } = navContentStore.state;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_RESULT_CLICK, {\n      componentClick: {\n        clickElementId: ppnDealer.id,\n        clickElementName: ppnDealer.name,\n        clickElementType: ClickElementTypes.Button,\n        targetElement: `level2_${dealerDetailsRoutingKey}`\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: searchTerm,\n        numberOfResults: results?.length\n      },\n      partner: {\n        companyName: ppnDealer.name,\n        companyId: ppnDealer.porschePartnerNo\n      }\n    });\n  };\n\n  return (\n    <phn-menu-item-card\n      tabIndex={0}\n      text={name}\n      class={`animated ${showOverlay ? 'dealer-card-overlay' : ''} dealer-card`}\n      onClick={() => onDealerCardClick(ppnDealer)}\n      analyticsId={ppnDealer.id}\n    >\n      <div class=\"phn-flex-row phn-justify-between phn-align-center\">\n        {country === 'JP' ? (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`〒${ppnDealer.address.postalCode} ${address.city} ${address.street}`}\n          </phn-p-text>\n        ) : (\n          <phn-p-text color=\"primary\" size=\"small\">\n            {`${address.street}, `}\n            <span class=\"city\">\n              {ppnDealer.address.postalCode} {address.city}\n            </span>\n          </phn-p-text>\n        )}\n\n        {distance && distance.value >= 1 && numberOfDealers > 5 ? (\n          <phn-p-tag color=\"notification-info-soft\">{`${Math.round(\n            distance.value\n          )}${distance.unit.toLowerCase()}`}</phn-p-tag>\n        ) : null}\n      </div>\n    </phn-menu-item-card>\n  );\n}\n","import { navContentStore } from '../../state/nav-content-store';\nimport { h } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport {\n  ClickElementTypes,\n  DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n  ElementTypes,\n  EventActions,\n  GEOLOCATION_BUTTON_SEARCH_TERM\n} from '../../utility/constants';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\nimport { isString } from '../../utility/helper';\n\nexport function DealerSearchMapLink() {\n  const { dealer: dealerContent } = navContentStore.state;\n\n  function emitDealersMapEvent() {\n    const map = dealerContent.search.map;\n    const { results, searchTerm } = dealerSearchResultsStore.state;\n\n    globalDataLayerService.pushDataLayerEvent(EventActions.DEALER_MAP_CLICK, {\n      componentClick: {\n        clickElementId: map.id,\n        clickElementName: map.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: map.link\n      },\n      componentDisplay: {\n        displayElementId: DEALER_SEARCH_DISPLAY_ELEMENT_ID,\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.DEALER_SEARCH,\n          ElementTypes.dealerSearchForm\n        ),\n        displayElementName: dealerContent.text\n      },\n      componentSearch: {\n        searchTerm: isString(searchTerm) ? searchTerm : GEOLOCATION_BUTTON_SEARCH_TERM,\n        numberOfResults: results?.length\n      }\n    });\n  }\n  return (\n    <a class={'animated'} href={dealerContent.search.map.link} aria-label={dealerContent.search.map.description}>\n      <phn-p-button onClick={emitDealersMapEvent} variant=\"tertiary\">\n        {dealerContent.search.map.text}{' '}\n      </phn-p-button>\n    </a>\n  );\n}\n","@import '../../scss/index';\n\n:host {\n  display: block;\n\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n\n    & .skeleton-autocomplete-search-field {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px;\n    }\n\n    & .skeleton-or-text {\n      width: auto;\n      height: p-px-to-rem(20px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 4px 4px 0 0;\n    }\n\n    & .skeleton-geolocation-button {\n      width: auto;\n      height: p-px-to-rem(50px);\n      background: $pds-theme-light-contrast-low;\n      border-radius: 0 0 4px 4px;\n    }\n  }\n\n  .or-container {\n    position: relative;\n    width: 100%;\n    margin-top: p-px-to-rem(20px);\n\n    .geolocation {\n      width: 100%;\n      padding-bottom: 24px;\n    }\n\n    phn-p-text {\n      margin-bottom: p-px-to-rem(4px);\n      color: $pds-theme-light-primary;\n    }\n  }\n\n  .animate-out {\n    animation: fadeOutToTop 0.75s ease-in-out 0s;\n  }\n\n  .input-container {\n    width: 100%;\n  }\n\n  .spinner {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    width: 100%;\n    margin-top: p-px-to-rem(24px);\n  }\n}\n","@import '../../scss/helpers';\n\n:host {\n  display: block;\n\n  phn-dealer-details-drawer{\n    margin-top: p-px-to-rem(20px);\n  }\n\n\n  phn-menu-item-card {\n    & > div {\n      margin-top: 14px;\n    }\n  }\n\n  .dealer-card-overlay {\n    opacity: 0.3;\n  }\n\n  .dealer-card{\n    phn-p-tag{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n\n  .error-message {\n    position: relative;\n    margin-top: p-px-to-rem(32px);\n  }\n\n  .animated {\n    animation: fadeInFromBottom 0.75s ease-in-out 0s;\n  }\n\n  a {\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    text-decoration-line: none;\n    margin-top: p-px-to-rem(36px);\n\n    phn-p-button {\n      width: 100%;\n    }\n  }\n}\n","import { Component, Event, EventEmitter, Fragment, h, Host, Prop } from '@stencil/core';\nimport { dealerSearchResultsStore } from '../../state/dealer-search-results-store';\nimport { navContentStore } from '../../state/nav-content-store';\nimport { DealerSearchFormItemCard } from './dealer-search-form-item-card';\nimport { JSX } from '@stencil/core/internal';\nimport ErrorMessage from '../dealer-search-form/error-message';\nimport { DealerSearchMapLink } from './dealer-search-map-link';\n\n@Component({\n  tag: 'phn-dealer-search-results',\n  styleUrl: 'dealer-search-results.scss',\n  scoped: true\n})\nexport class DealerSearchResults {\n  @Prop() showOverlay = false;\n  @Prop() locale!: string;\n  @Prop() breakpoint!: number;\n\n  @Event({ bubbles: true, cancelable: false }) mobileMenuItemClick!: EventEmitter<string[]>;\n\n  render(): JSX.Element | null {\n    const { results, ppnDealers } = dealerSearchResultsStore.state;\n    const { error: errorContent } = navContentStore.state;\n\n    if (results === null) return null;\n\n    if (results?.length === 0)\n      return (\n        <Fragment>\n          <ErrorMessage errorMessage={errorContent.noResults} onDismiss={() => null} />\n        </Fragment>\n      );\n    const dealerId = results[0];\n    if (results.length === 1 && ppnDealers[dealerId]) {\n      dealerSearchResultsStore.state.savedDealerCookie = {\n        id: dealerId,\n        latitude: ppnDealers[dealerId].ppnDealer.coordinates.latitude,\n        longitude: ppnDealers[dealerId].ppnDealer.coordinates.longitude\n      };\n\n      return <phn-dealer-details-drawer breakpoint={this.breakpoint} dealerId={dealerId} locale={this.locale} />;\n    }\n\n    return (\n      <Host>\n        <Fragment>\n          {results.map((dealerId) => {\n            const dealer = ppnDealers[dealerId];\n\n            if (dealer === undefined || dealer.ppnDealer === undefined) {\n              return null;\n            }\n            return (\n              <DealerSearchFormItemCard\n                dealer={dealer}\n                eventEmitter={this.mobileMenuItemClick}\n                showOverlay={this.showOverlay}\n                locale={this.locale}\n              />\n            );\n          })}\n          <DealerSearchMapLink />\n        </Fragment>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n@mixin renderTitle() {\n  .title-container {\n    width: 100%;\n    margin: 0;\n\n    phn-p-heading {\n      word-break: break-word;\n      white-space: pre-line;\n    }\n\n    phn-p-icon{\n      margin-left: p-px-to-rem(16px);\n    }\n  }\n}\n\n@mixin default-skeleton() {\n  &.skeleton {\n    pointer-events: none;\n    user-select: none;\n    background: $pds-theme-light-contrast-low;\n    border-radius: 4px;\n\n    & * {\n      visibility: hidden;\n    }\n  }\n}\n\n:host {\n  display: block;\n  padding: p-px-to-rem(19px);\n  margin-top: p-px-to-rem(16px);\n  border-radius: 8px;\n  background-color: $pds-theme-light-state-hover;\n  transition: background-color 0.24s ease;\n  cursor: pointer;\n\n  button{\n    all: unset;\n    display: block;\n    width: 100%;\n  }\n\n  @include default-skeleton();\n\n  @include pds-media-query-min('s') {\n    background-color: $pds-theme-light-background-base;\n  }\n\n  &:hover {\n    @include pds-media-query-min('s') {\n      background-color: $pds-theme-light-state-hover;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .subtext {\n    color: $pds-theme-light-primary;\n  }\n\n  .dealer-card-item {\n    font-size: 16px;\n    font-family: \"Porsche Next\";\n    font-style: normal;\n    font-weight: 400;\n    line-height: 24px;\n    color: $pds-theme-light-primary;\n    word-break: break-word;\n    white-space: pre-line;\n  }\n\n  @include renderTitle();\n}\n","import { Component, Element, Fragment, h, Host, JSX, Listen, Prop } from '@stencil/core';\nimport { ClickElementType, ClickElementTypes, EventAction, EventActions } from '../../utility/constants';\nimport { TDataLayer } from '@porsche/globaldatalayer-events/projects/pcom/all/types';\nimport { getHTMLElement, isString } from '../../utility/helper';\nimport { sendDataLayerEvent } from '../../services/analytics/data-layer-event-sender';\n\n@Component({\n  tag: 'phn-menu-item-card',\n  styleUrl: 'menu-item-card.scss',\n  scoped: true\n})\nexport class MenuItemCard {\n  @Prop() text!: string;\n  @Prop() analyticsId!: string;\n  @Prop() subtext = '';\n  @Prop() elementId = '';\n  @Prop() link = '';\n  @Prop() datalayerEventAction: EventAction = EventActions.NAVIGATION_CLICK;\n  @Prop() customDatalayerProperties: TDataLayer = {};\n  @Prop() target = '_self';\n  @Prop() iconLeft = '';\n\n  @Element() el!: HTMLPhnMenuItemCardElement;\n\n  @Listen('keydown', { passive: false })\n  handleKeyDown(e: KeyboardEvent): void {\n    if (e.key === 'Enter') {\n      const anchorElement = getHTMLElement(e.target)?.querySelector('a');\n      const targetElement = anchorElement ? anchorElement : getHTMLElement(e.target);\n\n      if (targetElement) {\n        targetElement.click();\n        !anchorElement ? this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId) : null;\n      }\n    }\n  }\n\n  private sendDataLayerEvent(clickElementType: ClickElementType, elementId: string): void {\n    sendDataLayerEvent({\n      analyticsId: this.analyticsId,\n      text: this.text,\n      elementId,\n      clickElementType,\n      link: this.link,\n      customDatalayerProperties: this.customDatalayerProperties,\n      datalayerEventAction: this.datalayerEventAction\n    });\n  }\n\n  private renderTitle(): HTMLElement {\n    return (\n      <div class=\"phn-flex-row phn-align-center phn-justify-between title-container\">\n        {this.elementId ? (\n          <phn-p-text className={'dealer-card-item'}>{this.text}</phn-p-text>\n        ) : (\n          <phn-p-heading tag=\"h3\" size=\"medium\">\n            {this.text}\n          </phn-p-heading>\n        )}\n        {isString(this.iconLeft) ? <phn-p-icon name={this.iconLeft}></phn-p-icon> : null}\n      </div>\n    );\n  }\n\n  private renderSubtitle(): JSX.Element | null {\n    if (!isString(this.subtext)) {\n      return null;\n    }\n\n    return (\n      <phn-p-text\n        class={'subtext'}\n        color=\"contrast-medium\"\n        weight=\"regular\"\n        size=\"xx-small\"\n        tag=\"div\"\n        ellipsis=\"true\"\n        data-test-id=\"subtext\"\n      >\n        {this.subtext}\n      </phn-p-text>\n    );\n  }\n\n  render(): JSX.Element {\n    const body = (\n      <Fragment>\n        <div class=\"texts\">\n          {this.renderTitle()}\n          {this.renderSubtitle()}\n        </div>\n        <slot />\n      </Fragment>\n    );\n\n    if (isString(this.link))\n      return (\n        <a\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Link, this.elementId);\n          }}\n          class=\"card-link\"\n          href={this.link}\n          target={this.target}\n        >\n          {body}\n        </a>\n      );\n\n    return (\n      <Host>\n        <button\n          tabIndex={-1}\n          onClick={() => {\n            this.sendDataLayerEvent(ClickElementTypes.Button, this.elementId);\n          }}\n        >\n          {body}\n        </button>\n      </Host>\n    );\n  }\n}\n","@import '../../scss';\n\n:host {\n  .button-container {\n    display: flex;\n\n    @include pds-media-query-min-max('base', 'xs') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    @include pds-media-query-min-max('s', 'l') {\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    .login {\n      padding: p-px-to-rem(36px) 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n        padding-top: 0;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 p-px-to-rem(8px) p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min-max('s', 'l') {\n        padding: 0 0 p-px-to-rem(16px) 0;\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n\n    .more {\n      padding: 0 0 p-px-to-rem(16px) 0;\n\n      @include pds-media-query-min-max('base', 's') {\n        width: 100%;\n      }\n\n      @include pds-media-query-min('xs') {\n        padding: 0 0 p-px-to-rem(16px) p-px-to-rem(8px);\n      }\n\n      @include pds-media-query-min('s') {\n        padding: 0 0 p-px-to-rem(23px) 0\n      }\n\n      @include pds-media-query-min('xl') {\n        padding: 0 p-px-to-rem(16px) p-px-to-rem(23px) 0;\n      }\n    }\n  }\n\n  phn-p-text {\n    padding-bottom: p-px-to-rem(24px);\n    border-bottom: 2px solid $pds-theme-light-contrast-low;\n    margin-bottom: p-px-to-rem(10px);\n\n    @include pds-media-query-min('xxl') {\n      margin-bottom: p-px-to-rem(16px);\n    }\n  }\n\n  phn-p-link-pure {\n    float: left;\n    text-decoration: underline;\n    color: black;\n  }\n}\n","import { Component, Event, EventEmitter, Fragment, h, JSX, Prop } from '@stencil/core';\nimport { TLink } from '../../entities/content';\nimport globalDataLayerService from '../../services/analytics/global-data-layer-service';\nimport { ClickElementTypes, ElementTypes, EventActions } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\nimport analyticsManager from '../../services/analytics/analytics-manager';\nimport { RoutingKeys } from '../../entities/routing-key';\n\n@Component({\n  tag: 'phn-myporsche-login',\n  styleUrl: 'myporsche-login.scss',\n  scoped: true\n})\nexport class MyPorscheLogin {\n  @Prop() login!: TLink;\n  @Prop() more: TLink | null = null;\n  @Prop() signup!: TLink;\n  @Prop() signupText!: string;\n\n  @Event() loginEvent!: EventEmitter<void>;\n\n  private sendDataLayerEvent(link: TLink | null): void {\n    globalDataLayerService.pushDataLayerEvent(EventActions.NAVIGATION_LINK_CLICK, {\n      componentClick: {\n        clickElementId: link?.id,\n        clickElementName: link?.text,\n        clickElementType: ClickElementTypes.Link,\n        targetUrl: link?.link\n      },\n      componentDisplay: {\n        displayElementId: analyticsManager.calculateDisplayElementId(),\n        displayElementType: analyticsManager.calculateDisplayElementType(\n          RoutingKeys.MY_PORSCHE,\n          ElementTypes.myPorscheDrawer\n        ),\n        displayElementName: link?.text\n      }\n    });\n  }\n\n  render(): JSX.Element {\n    return (\n      <Fragment>\n        <div class=\"button-container\">\n          <phn-p-button\n            variant=\"primary\"\n            class=\"login\"\n            onClick={() => {\n              this.loginEvent.emit();\n              this.sendDataLayerEvent(this.login);\n            }}\n          >\n            {this.login.text}\n          </phn-p-button>\n          {this.more && isString(this.more.link) ? (\n            <phn-p-link\n              variant=\"tertiary\"\n              class=\"more\"\n              href={this.more.link}\n              onClick={() => {\n                this.sendDataLayerEvent(this.more);\n              }}\n            >\n              {this.more.text}\n            </phn-p-link>\n          ) : null}\n        </div>\n        <div>\n          <phn-p-link-pure\n            icon=\"none\"\n            onClick={() => {\n              this.sendDataLayerEvent(this.signup);\n            }}\n          >\n            <a href={this.signup.link}>{this.signup.text}</a>\n          </phn-p-link-pure>\n          <phn-p-text>&nbsp;{this.signupText}</phn-p-text>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import { HTMLStencilElement } from '@stencil/core/internal';\nimport windowService from '../services/window-service';\nimport { Timeout } from './timeout';\n\nexport async function componentsOnReady(\n  parent: HTMLElement | null,\n  timeout: Timeout,\n  ...selectors: string[]\n): Promise<HTMLElement[] | null> {\n  if (parent === null) {\n    return null;\n  }\n  const waitForElement = async (selector?: string) => {\n    const el = await windowService.waitForElement(parent, selector);\n\n    if (typeof (el as HTMLStencilElement)?.componentOnReady === 'function') {\n      await (el as HTMLStencilElement).componentOnReady();\n    }\n\n    return el;\n  };\n\n  const waitForElements = selectors.length > 0 ? selectors.map(waitForElement) : [waitForElement()];\n\n  const timer = new Promise<null>((resolve) => timeout.set(async () => resolve(null)));\n  return Promise.race([Promise.all(waitForElements), timer]);\n}\n","export class Timeout {\n  private timer: NodeJS.Timeout | null = null;\n\n  constructor(private delay: number) {}\n\n  set<T>(cb: () => Promise<T>): void {\n    this.cancel();\n\n    this.timer = setTimeout(async () => {\n      await cb();\n      this.cancel();\n    }, this.delay);\n  }\n\n  cancel(): void {\n    if (this.timer !== null) {\n      clearTimeout(this.timer);\n\n      if (typeof this.timer.unref === 'function') {\n        this.timer.unref();\n      }\n\n      this.timer = null;\n    }\n  }\n}\n"],"names":["showDealerSearchDropdown","e","includes","getRegionSpecificCountry","split","sanitizeDealerHomepage","startsWith","concat","getOpeningHours","n","navContentStore","state","dealer","openingHours","t","monday","tuesday","wednesday","thursday","friday","saturday","sunday","r","Map","a","length","o","i","day","toLowerCase","isString","set","open","close","getOpeningHoursMap","s","u","c","g","p","indexOf","f","getOpeningHoursString","get","push","getDayRange","join","timeFormat","convertToLocalTime","getTimeFormat","map","Number","Date","toLocaleString","undefined","hour","minute","hour12","toUpperCase","getAllPPNDealersForMarket","getPPNDealers","latitude","longitude","radius","Headers","Environments","LOCAL","windowService","btoa","coordinates","fetch","getQueryString","method","headers","d","sent","NaviError","NaviErrorTypes","GENERAL","status","NO_RESULTS","json","__rest","Object","assign","ppnDealer","getPPNDealer","find","id","dealersByRegionMap","getPPNDealerByRegion","getPPNDealersByRegion","regions","flatMap","cities","dealers","values","reduce","__spreadArray","navStateStore","env","has","getConfig","BFF_ENDPOINT","AutocompleteSearchField","this","initialValue","prototype","clickListener","showPredictions","composedPath","el","querySelector","predictions","keydownListener","key","preventDefault","stopPropagation","watchShowPredictions","predictionsToggle","emit","watchInitialValue","searchterm","componentDidRender","autoCompleteLoaded","onKeyDown","highlightedPredictionIndex","text","onSubmit","submitSearch","render","h","class","errorMessage","message","type","placeholder","autocomplete","role","toString","String","value","onInput","getHTMLInputElement","target","dealerSearchResultsStore","savedDealerCookie","clearSearch","searchInput","onClick","color","src","getAssetPath","ASSETS_URL","alt","DealerDetailsDrawer","componentWillLoad","waitForComponentsToLoad","componentDidLoad","getDealer","globalDataLayerService","pushDataLayerEvent","EventActions","DEALER_DETAILS_SCREEN_LOAD","componentDisplay","displayElementId","analyticsManager","getDealerResultsLoadDisplayElementId","DEALER_SEARCH_DISPLAY_ELEMENT_ID","displayElementType","getDealerResultsLoadDisplayElementType","displayElementName","name","componentSearch","searchTerm","partner","companyName","companyId","porschePartnerNo","componentsOnReady","Timeout","showSkeleton","ppnDealers","dealerId","renderHeading","Fragment","style","display","tag","size","splitLocale","locale","language","details","testDrive","finder","bookService","addressLocalized","every","address","l","nameLocalized","street","postalCode","city","contactDetails","phoneNumber","m","emailAddress","homepage","link","contactOpeningHours","y","w","country","b","k","Host","isDesktop","breakpoint","DealerDetailCard","elementId","getDealerDetailsRoutingKey","analyticsId","iconLeft","encodeURIComponent","datalayerEventAction","DEALER_CONTACT_CLICK","customDatalayerProperties","variant","MenuItemVariant","DealerDetails","featureToggles","isDealerSearchOpeningHoursEnabled","replace","addQueryParamsToUrl","dealership","ppnOrgId","tabIndex","ErrorMessage","onDismiss","description","DealerSearchByNumberOfDealers","then","numberOfDealers","fetchAllDealersForMarket","emitPageLoadEvent","removeSkeletonOnDealerSearchForm","error","isLoading","DEALER_API_URL_ALL_DEALERS","results","logger","formErrorMessage","getErrorMessage","emitResultsLoadEvent","DEALER_SEARCH_SCREEN_LOAD","calculateDisplayElementId","calculateDisplayElementType","ElementTypes","dealerSearchForm","DEALER_MARKET_SEARCH_TERM","numberOfResults","DEALER_RESULTS_SCREEN_LOAD","DEALER_SEARCH_RESULT_DISPLAY_ELEMENT_ID_DOUBLE_DRAWER","reset","aria","DealerSearchFormDropdown","getDealersByRegion","loadedAutoCompleteListener","dealersOfRegion","dealerSearchFormEvent","onCitySelect","selectedCity","cityName","cityNameLocalized","keys","selectedProvince","onProvinceSelect","getCitiesByGivenRegionName","regionName","regionNameLocalized","GEOLOCATION_BUTTON_SEARCH_TERM","clearSearchEvent","weight","ellipsis","cursor","filter","label","search","dropdown","province","required","onChange","hidden","selected","selectAProvince","disabled","selectACity","getErrorType","INVALID_INPUT","RETRY","mapsService","autocompleteService","placesService","geocoderService","getLocation","init","fetchGoogleMapsApi","maps","places","AutocompleteService","PlacesService","createDiv","Geocoder","LatLng","getPredictions","Promise","getPlacePredictions","input","componentRestrictions","place_id","getPlaceCoordinates","getDetails","placeId","geometry","location","lat","lng","getFormattedAddressFromCoordinates","geocode","formatted_address","DealerSearchFormGeolocation","debounceTimeout","disconnectedCallback","cancel","catch","fetchDealers","DEALER_API_URL","showGeolocationButton","animateResults","__awaiter","DEALER_SEARCH_CLICK","componentClick","clickElementId","clickElementName","clickElementType","ClickElementTypes","Button","targetElement","DEALER_SEARCH_TARGET_ELEMENT","RoutingKeys","DEALER_SEARCH","noInput","getCurrentLocation","getNavigatorLatLong","DEALER_GEOLOCATION_CLICK","geolocation","onDealerSearchEntry","form","inputPlaceholder","onSearchInput","detail","onClearSearch","onSubmitSearch","getString","onAnimationEnd","or","icon","DealerSearchFormItemCard","showOverlay","eventEmitter","distance","DEALER_RESULT_CLICK","Math","round","unit","DealerSearchMapLink","href","DEALER_MAP_CLICK","Link","targetUrl","DealerSearchResults","noResults","mobileMenuItemClick","MenuItemCard","NAVIGATION_CLICK","handleKeyDown","getHTMLElement","click","sendDataLayerEvent","renderTitle","className","renderSubtitle","subtext","MyPorscheLogin","NAVIGATION_LINK_CLICK","MY_PORSCHE","myPorscheDrawer","loginEvent","login","more","signup","signupText","arguments","waitForElement","componentOnReady","__generator","race","all","delay","timer","setTimeout","clearTimeout","unref"],"sourceRoot":""}