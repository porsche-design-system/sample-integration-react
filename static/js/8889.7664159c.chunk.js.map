{"version":3,"file":"static/js/8889.7664159c.chunk.js","mappings":"kPAOMA,EAGF,CAAC,EAML,SAASC,EAA0BC,GACzB,IAAAC,EAAeH,EAAKI,WACtBC,IACHC,EAAAA,EAAAA,GAASJ,IACNK,EAAAA,EAAAA,GAAsBL,GACtBM,EAAAA,EAAYR,MAAMS,kBAAkBD,EAAAA,EAAYR,MAAMU,qBAAuB,GAC7EC,GAA2BC,EAAAA,EAAAA,GAAsBP,GACjDQ,GAAkBC,EAAAA,EAAAA,GAAyBT,GAC3CU,EAAkBF,EAAkB,EAE1C,KAAKP,EAAAA,EAAAA,GAASD,GACZ,MAAO,SAGT,IAAMW,GAA6BV,EAAAA,EAAAA,GAASD,GACxC,QAAAY,OAAQJ,EAAe,KAAAI,OAAIN,GAC3B,QAAAM,OAAQJ,EAAkB,EAAC,YAE/B,GAAmB,iBAAfV,EAA+B,CACjC,GAA6B,KAAzBE,EACF,MAAO,QAAAY,OAAQF,EAAe,kBAAAE,OAAiBJ,EAAe,YAEhE,IAAMK,GAAuBC,EAAAA,EAAAA,GAAwBd,GACrD,MAAO,QAAAY,OAAQF,EAAe,KAAAE,OAAIC,EAAoB,KAAAD,OAAID,E,CAG5D,OAAOA,CACT,CAEA,SAASI,EACPlB,EACAC,EACAE,GAEQ,IAAAM,EAAeX,EAAKI,WACtBS,GAAkBC,EAAAA,EAAAA,GAAyBZ,GAEjD,GAAmB,iBAAfS,EAA+B,CACjC,IAAII,EAAkBF,EAItB,OAHIR,IACFU,GAAoC,GAE/B,QAAAE,OAAQF,EAAe,KAAAE,OAAId,E,CAElC,OAAOG,EAAAA,EAAAA,GAASJ,GACZ,QAAAe,OAAQJ,EAAe,KAAAI,OAAId,GAC3B,QAAAc,OAAQJ,EAAkB,EAAC,KAAAI,OAAId,EAEvC,CA8BA,SAASkB,IACP,OAAOrB,EAAMI,UACf,CAkBA,IAAAkB,EAAe,CACbC,cAvGF,SAAuBrB,GACrBF,EAAMI,WAAaF,CACrB,EAsGEsB,qCAlBF,SAA8CtB,GAC5C,MAAwB,iBAApBmB,IACKnB,EAEAD,GAEX,EAaEA,0BAAyBA,EACzBwB,uCAZF,WACE,MAAwB,iBAApBJ,IACKK,EAAAA,EAEAN,EAA4B,GAAIO,EAAAA,EAAaC,iBAExD,EAOER,4BAA2BA,EAC3BS,aAtDF,SAAsB3B,GACpB,IAAMC,EAA+BD,EAAS4B,KAAKC,MAAM,KACnD1B,EAAgCF,EAAmBA,EAAmB6B,OAAS,GAarF,MAV8B,KAA1B3B,OACwD4B,IAAtD9B,EAAmBA,EAAmB6B,OAAS,GACrC,GAEA7B,EAAmBA,EAAmB6B,OAAS,GAAGD,MAAM,KAAKG,KAAK,KAGpE7B,EAAsB0B,MAAM,KAAKG,KAAK,IAItD,EAuCEC,sBArCF,SAA+BjC,EAAmBC,GAChD,GAAID,EAAUkC,SAAS,UAAW,CAChC,IAAM/B,GAAkBS,EAAAA,EAAAA,GAAyBZ,GAEjD,MAAO,QAAAe,OAAQZ,EAAe,KAAAY,OAAId,EAAKkC,c,CAI3C,E,mECjFa7B,GAAc8B,E,SAAAA,GAAyB,CAClD7B,kBAAmB,GACnBC,mBAAoB,EACpB6B,kBAAmB,EACnBC,yBAA0B,KAC1BC,yBAA0B,M","sources":["../node_modules/@porschehn/navigation/dist/esm-es5/src/services/analytics/analytics-manager.ts","../node_modules/@porschehn/navigation/dist/esm-es5/src/state/router-store.ts"],"sourcesContent":["import { BodyType } from '../../entities/content';\nimport { determineMainDrawerLevel, getLastRoutingSegment, getPreviousRoutingKey } from '../../entities/routing-key';\nimport { routerStore } from '../../state/router-store';\nimport { DEALER_SEARCH_ELEMENT_TYPE, DisplayElementType, ElementType, ElementTypes } from '../../utility/constants';\nimport { isString } from '../../utility/helper';\nimport { getSideDrawerRoutingKey } from '../menu-items-service';\n\nconst state: {\n  drawerType?: DisplayElementType;\n  elementType?: ElementType;\n} = {};\n\nfunction setDrawerType(drawerType: DisplayElementType): void {\n  state.drawerType = drawerType;\n}\n\nfunction calculateDisplayElementId(routingKeyForNavigatingForward?: string): string {\n  const { drawerType } = state;\n  const mainDrawerRoutingKey =\n    (isString(routingKeyForNavigatingForward)\n      ? getPreviousRoutingKey(routingKeyForNavigatingForward)\n      : routerStore.state.routingKeyHistory[routerStore.state.routingKeyPointer]) || '';\n  const lastMainDrawerRoutingKey = getLastRoutingSegment(mainDrawerRoutingKey);\n  const mainDrawerLevel = determineMainDrawerLevel(mainDrawerRoutingKey);\n  const sideDrawerLevel = mainDrawerLevel - 1;\n\n  if (!isString(mainDrawerRoutingKey)) {\n    return 'level0';\n  }\n\n  const mainDrawerDisplayElementId = isString(mainDrawerRoutingKey)\n    ? `level${mainDrawerLevel}-${lastMainDrawerRoutingKey}`\n    : `level${mainDrawerLevel - 1}-unknown`;\n\n  if (drawerType === 'doubleDrawer') {\n    if (mainDrawerRoutingKey === '') {\n      return `level${sideDrawerLevel}-unknown_level${mainDrawerLevel}-unknown`;\n    }\n    const sideDrawerRoutingKey = getSideDrawerRoutingKey(mainDrawerRoutingKey);\n    return `level${sideDrawerLevel}-${sideDrawerRoutingKey}_${mainDrawerDisplayElementId}`;\n  }\n\n  return mainDrawerDisplayElementId;\n}\n\nfunction calculateDisplayElementType(\n  activeRoutingKey: string,\n  elementType: ElementType,\n  isSideDrawer?: boolean\n): string {\n  const { drawerType } = state;\n  const mainDrawerLevel = determineMainDrawerLevel(activeRoutingKey);\n\n  if (drawerType === 'doubleDrawer') {\n    let sideDrawerLevel = mainDrawerLevel;\n    if (isSideDrawer) {\n      sideDrawerLevel = sideDrawerLevel - 1;\n    }\n    return `level${sideDrawerLevel}_${elementType}`;\n  } else {\n    return isString(activeRoutingKey)\n      ? `level${mainDrawerLevel}_${elementType}`\n      : `level${mainDrawerLevel - 1}_${elementType}`;\n  }\n}\n\nfunction getModelName(bodyType: BodyType): string {\n  const urlSplitIntoPieces: string[] = bodyType.link.split('/');\n  const lastElementInUrlSplit: string = urlSplitIntoPieces[urlSplitIntoPieces.length - 1];\n  let modelName: string;\n\n  if (lastElementInUrlSplit === '') {\n    if (urlSplitIntoPieces[urlSplitIntoPieces.length - 2] === undefined) {\n      modelName = '';\n    } else {\n      modelName = urlSplitIntoPieces[urlSplitIntoPieces.length - 2].split('-').join(' ');\n    }\n  } else {\n    modelName = lastElementInUrlSplit.split('-').join(' ');\n  }\n\n  return modelName;\n}\n\nfunction getModelTargetElement(elementId: string, text: string): string | undefined {\n  if (elementId.includes('models')) {\n    const mainDrawerLevel = determineMainDrawerLevel(elementId);\n\n    return `level${mainDrawerLevel}_${text.toLowerCase()}`;\n  }\n\n  return;\n}\n\nfunction getDrawerType() {\n  return state.drawerType;\n}\n\nfunction getDealerResultsLoadDisplayElementId(elementId: string): string {\n  if (getDrawerType() === 'doubleDrawer') {\n    return elementId;\n  } else {\n    return calculateDisplayElementId();\n  }\n}\n\nfunction getDealerResultsLoadDisplayElementType(): string {\n  if (getDrawerType() === 'doubleDrawer') {\n    return DEALER_SEARCH_ELEMENT_TYPE;\n  } else {\n    return calculateDisplayElementType('', ElementTypes.dealerSearchForm);\n  }\n}\n\nexport default {\n  setDrawerType,\n  getDealerResultsLoadDisplayElementId,\n  calculateDisplayElementId,\n  getDealerResultsLoadDisplayElementType,\n  calculateDisplayElementType,\n  getModelName,\n  getModelTargetElement\n};\n","import { createStore } from '@stencil/store';\n\ninterface RouterStore {\n  routingKeyHistory: string[];\n  routingKeyPointer: number;\n  animatingPointer: number;\n  initialRoutingKeyHistory: string[] | null;\n  initialRoutingKeyPointer: number | null;\n  // status: 'CLOSED' | 'OPENED';\n}\n\nexport const routerStore = createStore<RouterStore>({\n  routingKeyHistory: [],\n  routingKeyPointer: -1,\n  animatingPointer: -1,\n  initialRoutingKeyHistory: null,\n  initialRoutingKeyPointer: null\n});\n"],"names":["state","calculateDisplayElementId","e","t","drawerType","r","isString","getPreviousRoutingKey","routerStore","routingKeyHistory","routingKeyPointer","a","getLastRoutingSegment","n","determineMainDrawerLevel","l","i","concat","o","getSideDrawerRoutingKey","calculateDisplayElementType","getDrawerType","analyticsManager","setDrawerType","getDealerResultsLoadDisplayElementId","getDealerResultsLoadDisplayElementType","DEALER_SEARCH_ELEMENT_TYPE","ElementTypes","dealerSearchForm","getModelName","link","split","length","undefined","join","getModelTargetElement","includes","toLowerCase","createStore","animatingPointer","initialRoutingKeyHistory","initialRoutingKeyPointer"],"sourceRoot":""}