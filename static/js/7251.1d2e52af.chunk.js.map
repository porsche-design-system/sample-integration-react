{"version":3,"file":"static/js/7251.1d2e52af.chunk.js","mappings":"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","sources":["../node_modules/@porschehn/navigation/dist/esm-es5/src/services/dealer-service.ts"],"sourcesContent":["import { DealersByRegion, PPNDealer, PPNDealerSearchResult, PPNDistance } from '../entities/dealer-response';\nimport { Environment, Environments } from '../entities/environment';\nimport { LatLong } from '../entities/places';\nimport { NaviError, NaviErrorTypes } from '../utility/navi-error';\nimport windowService from './window-service';\nimport { navStateStore } from '../state/nav-state-store';\nimport { getConfig, getQueryString } from '../utility/helper';\n\nexport async function getAllPPNDealersForMarket(\n  env: Environment,\n  dealerApiUrl: string,\n  country: string\n): Promise<PPNDealerSearchResult[]> {\n  return getPPNDealers(env, dealerApiUrl, { latitude: 0, longitude: 0 }, country, { radius: 10000000 });\n}\n\ntype GetPPNDealersOptions = {\n  /**\n   * The radius around the given coordinates to search for dealers\n   */\n  radius?: number;\n};\n\nexport async function getPPNDealers(\n  env: Environment,\n  dealerApiUrl: string,\n  coordinates: LatLong,\n  country: string,\n  options: GetPPNDealersOptions = {}\n): Promise<PPNDealerSearchResult[]> {\n  const { radius } = options;\n\n  let response: Response;\n  let ppnDealerSearchResults: { dealer: PPNDealer; distance: PPNDistance }[];\n\n  try {\n    const headers = new Headers();\n\n    headers.set('Accept', '*/*');\n\n    /* istanbul ignore next */\n    if (env === Environments.LOCAL) {\n      headers.set(\n        'Authorization',\n        'Basic ' + windowService.btoa(`${'DEALER_SEARCH_API_USER'}:${'DEALER_SEARCH_API_PASS'}`)\n      );\n    }\n\n    const requestParams = {\n      coordinates: `${coordinates.latitude},${coordinates.longitude}`,\n      radius\n    };\n\n    response = await fetch(`${dealerApiUrl}/${country}/dealers?${getQueryString(requestParams)}`, {\n      method: 'GET',\n      headers\n    });\n  } catch (err) {\n    throw new NaviError('Unable to fetch dealers', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 400) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid coordinates', NaviErrorTypes.GENERAL);\n  }\n\n  if (response.status === 404) {\n    throw new NaviError(\n      'dealerService.getPPNDealers failed with invalid country code and therefore responded with no results',\n      NaviErrorTypes.NO_RESULTS\n    );\n  }\n\n  if (response.status !== 200) {\n    throw new NaviError('dealerService.getPPNDealers failed with invalid response', NaviErrorTypes.GENERAL);\n  }\n\n  try {\n    ppnDealerSearchResults = await response.json();\n  } catch (err) {\n    throw new NaviError(\n      'dealerService.getPPNDealers could not parse response into json format',\n      NaviErrorTypes.GENERAL\n    );\n  }\n\n  return ppnDealerSearchResults.map(({ dealer, ...rest }) => ({ ppnDealer: dealer, ...rest }));\n}\n\nexport async function getPPNDealer(\n  env: Environment,\n  dealerApiUrl: string,\n  id: string,\n  coordinates: LatLong,\n  country: string\n): Promise<PPNDealerSearchResult> {\n  // (LR/MX) 13.09.2022: If we ever remove the workaround, remember to map the dealer type to ppnDealer\n  let ppnDealer: PPNDealerSearchResult | undefined;\n\n  try {\n    const ppnDealerSearchResults = await getPPNDealers(env, dealerApiUrl, coordinates, country);\n    ppnDealer = ppnDealerSearchResults.find((dealerSearchResult) => id === dealerSearchResult.ppnDealer.id);\n  } catch (err) {\n    throw new NaviError('Unable to fetch a dealer', NaviErrorTypes.GENERAL);\n  }\n\n  if (ppnDealer === undefined) {\n    throw new NaviError(`Requested dealer ${id} could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return ppnDealer;\n}\n\nconst dealersByRegionMap = new Map<string, DealersByRegion | undefined>();\n\nexport async function getPPNDealerByRegion(id: string, region: string): Promise<PPNDealerSearchResult> {\n  const dealersOfRegion = await getPPNDealersByRegion(region);\n\n  const dealerResult = dealersOfRegion.regions\n    .flatMap(({ cities }) =>\n      cities.flatMap(({ dealers }) =>\n        Object.values(dealers).reduce<{ ppnDealer: PPNDealer }[]>((dealerList, dealer) => [...dealerList, dealer], [])\n      )\n    )\n    .find(({ ppnDealer }) => ppnDealer.id === id);\n\n  if (dealerResult === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n\n  return dealerResult;\n}\n\nexport async function getPPNDealersByRegion(region: string): Promise<DealersByRegion> {\n  const { env } = navStateStore.state;\n  const headers = new Headers();\n  let dealersByRegion: DealersByRegion | undefined;\n  if (dealersByRegionMap.has(region)) {\n    dealersByRegion = dealersByRegionMap.get(region);\n  } else {\n    const { BFF_ENDPOINT } = getConfig(env);\n\n    headers.set('Accept', '*/*');\n\n    const response = await fetch(`${BFF_ENDPOINT}/dealers/region/${region}?env=${env}`, {\n      method: 'GET',\n      headers\n    });\n\n    dealersByRegion = await response.json();\n    dealersByRegionMap.set(region, dealersByRegion);\n  }\n  if (dealersByRegion === undefined) {\n    throw new NaviError(`Requested dealer could not be found`, NaviErrorTypes.NO_RESULTS);\n  }\n  return dealersByRegion;\n}\n"],"names":["getAllPPNDealersForMarket","e","r","t","getPPNDealers","latitude","longitude","radius","n","a","o","c","Headers","set","Environments","LOCAL","windowService","btoa","concat","u","coordinates","fetch","getQueryString","method","headers","i","d","sent","NaviError","NaviErrorTypes","GENERAL","status","NO_RESULTS","json","s","map","dealer","__rest","Object","assign","ppnDealer","getPPNDealer","find","id","undefined","dealersByRegionMap","Map","getPPNDealerByRegion","getPPNDealersByRegion","regions","flatMap","cities","dealers","values","reduce","__spreadArray","navStateStore","state","env","has","get","getConfig","BFF_ENDPOINT"],"sourceRoot":""}